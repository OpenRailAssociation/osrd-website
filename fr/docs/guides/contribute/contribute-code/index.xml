<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contribuer au code on OSRD</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/</link><description>Recent content in Contribuer au code on OSRD</description><generator>Hugo</generator><language>fr</language><atom:link href="https://osrd.fr/fr/docs/guides/contribute/contribute-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Principes généraux</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/general-principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/general-principles/</guid><description>&lt;ul>
&lt;li>Expliquez ce que vous faites et pourquoi.&lt;/li>
&lt;li>Documentez le nouveau code.&lt;/li>
&lt;li>Ajoutez des tests clairs et simples.&lt;/li>
&lt;li>Décomposez le travail en morceaux intelligibles.&lt;/li>
&lt;li>Prenez le temps de choisir de bons noms.&lt;/li>
&lt;li>Évitez les abréviations peu connues.&lt;/li>
&lt;li>&lt;strong>Contrôle et cohérence de la réutilisation du code de tiers&lt;/strong> : une dépendance est ajoutée seulement si elle est absolument nécessaire.&lt;/li>
&lt;li>Chaque dépendance ajoutée diminue notre autonomie et notre cohérence.&lt;/li>
&lt;li>Nous essayons de limiter à un petit nombre les PRs de mise à jour des dépendances chaque semaine
dans chaque composant, donc regrouper les montées de version dans une même PR est une bonne option
(reportez-vous au &lt;code>README.md&lt;/code> de chaque composant).&lt;/li>
&lt;li>&lt;strong>Ne pas réinventer la roue&lt;/strong> : en opposition au point précédent, ne réinventez pas tout à tout prix.&lt;/li>
&lt;li>S&amp;rsquo;il existe une dépendance dans l&amp;rsquo;écosystème qui est le standard « de facto », nous devrions fortement envisager de l&amp;rsquo;utiliser.&lt;/li>
&lt;li>Plus de code et de recommandations générales dans le dépôt principal &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/CONTRIBUTING.md">CONTRIBUTING.md&lt;/a>.&lt;/li>
&lt;li>Demandez toute l&amp;rsquo;aide dont vous avez besoin !&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/fr/docs/guides/contribute/contribute-code/backend-conventions/">Consulter les conventions pour le back-end ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Conventions back-end</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/backend-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/backend-conventions/</guid><description>&lt;h1 id="python">Python&lt;/h1>
&lt;p>Le code Python est utilisé pour certains paquets et pour les tests d&amp;rsquo;intégration.&lt;/p>
&lt;ul>
&lt;li>Suivez le &lt;a href="https://www.python.org/dev/peps/pep-0020/">Zen of Python&lt;/a>.&lt;/li>
&lt;li>Les projets sont organisés avec &lt;a href="https://docs.astral.sh/uv/">uv&lt;/a>&lt;/li>
&lt;li>Le code est linté avec &lt;a href="https://docs.astral.sh/ruff/">ruff&lt;/a>.&lt;/li>
&lt;li>Le code est formaté avec &lt;a href="https://docs.astral.sh/ruff/">ruff&lt;/a>.&lt;/li>
&lt;li>Les tests sont écrits avec &lt;a href="https://docs.pytest.org/">pytest&lt;/a>.&lt;/li>
&lt;li>Les types sont vérifiés avec &lt;a href="https://microsoft.github.io/pyright/">pyright&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="rust">Rust&lt;/h1>
&lt;ul>
&lt;li>Comme référence pour le développement de notre API, nous utilisons les &lt;a href="https://rust-lang.github.io/api-guidelines/about.html">Rust API guidelines&lt;/a>.
D&amp;rsquo;une manière générale, il convient de les respecter.&lt;/li>
&lt;li>Préférer les importations granulaires aux importations globales comme &lt;code>diesel::*&lt;/code>.&lt;/li>
&lt;li>Les tests sont écrits avec le &lt;a href="https://doc.rust-lang.org/book/ch11-01-writing-tests.html">framework de base&lt;/a>.&lt;/li>
&lt;li>Utilisez l&amp;rsquo;&lt;a href="https://doc.rust-lang.org/rust-by-example/meta/doc.html">exemple de documentation&lt;/a> pour savoir comment formuler et formater votre documentation.&lt;/li>
&lt;li>Utilisez un style de commentaire cohérent :
&lt;ul>
&lt;li>&lt;code>///&lt;/code> les commentaires de la documentation sont au-dessus des invocations &lt;code>#[derive(Trait)]&lt;/code>.&lt;/li>
&lt;li>Les commentaires &lt;code>//&lt;/code> doivent généralement être placés au-dessus de la ligne en question, plutôt qu&amp;rsquo;en ligne.&lt;/li>
&lt;li>Les commentaires commencent par des lettres majuscules.
Terminez-les par un point s&amp;rsquo;ils ressemblent à une phrase.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Utilisez les commentaires pour organiser des portions de code longues et complexes qui ne peuvent être raisonnablement remaniées en fonctions distinctes.&lt;/li>
&lt;li>Le code est linté avec &lt;a href="https://github.com/rust-lang/rust-clippy">clippy&lt;/a>.&lt;/li>
&lt;li>Le code est formaté avec &lt;a href="https://github.com/rust-lang/rustfmt">fmt&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="java">Java&lt;/h1>
&lt;ul>
&lt;li>Le code est formaté avec &lt;a href="https://checkstyle.sourceforge.io/">checkstyle&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Conventions front-end</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/frontend-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/frontend-conventions/</guid><description>&lt;p>Nous utilisons &lt;strong>ReactJS&lt;/strong> et tous les fichiers doivent être écrits en &lt;strong>Typescript&lt;/strong>.&lt;/p>
&lt;p>Le code est &lt;em>linté&lt;/em> avec &lt;a href="https://eslint.org/">eslint&lt;/a>, et &lt;strong>formaté&lt;/strong> avec &lt;a href="https://prettier.io/">prettier&lt;/a>.&lt;/p>
&lt;h2 id="nomenclature">Nomenclature&lt;/h2>
&lt;p>&lt;img src="https://osrd.fr/images/docs/contribute/nomenclature-front-end.svg" alt="Diagramme de l’Infrastructure">&lt;/p>
&lt;p>Les &lt;strong>applications&lt;/strong> (osrd eex, osrd stdcm, éditeur infra, éditeur matériel) proposent des &lt;strong>vues&lt;/strong> (gestion des projets, gestions des études, etc.) liées à des &lt;strong>modules&lt;/strong> (projet, étude, etc.) qui contiennent les composants.&lt;/p>
&lt;p>Ces &lt;strong>vues&lt;/strong> sont constituées de &lt;strong>composants&lt;/strong> et sous-composants &lt;u>tous issus des modules&lt;/u>.
En plus de contenir les fichiers de &lt;strong>vues&lt;/strong> des applications, elles peuvent contenir un répertoire &lt;strong>scripts&lt;/strong> qui propose des scripts liés à ces vues. Les &lt;strong>vues&lt;/strong> déterminent la logique et l&amp;rsquo;&lt;u>accès au store&lt;/u>.&lt;/p></description></item><item><title>Écrire du code</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/write-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/write-code/</guid><description>&lt;ol>
&lt;li>
&lt;p>Si vous n&amp;rsquo;être pas un habitué de Git, &lt;a href="https://learngitbranching.js.org/">suivez ce tutoriel&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Créez une branche&lt;/strong>&lt;br>
Si vous comptez contribuer régulièrement, vous pouvez demander accès au &lt;a href="https://github.com/OpenRailAssociation/osrd">dépôt principal&lt;/a>. Sinon, &lt;a href="https://github.com/OpenRailAssociation/osrd/fork">créez un fork&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Ajoutez des changements sur votre branche&lt;/strong>&lt;br>
Essayez de découper votre travail en étapes macroscopiques, et sauvegardez vos changements dans un commit à la fin de chaque étape. Essayez de suivre &lt;a href="../conventions/">les conventions du projet&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Conservez votre branche à jour&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>git switch &amp;lt;your_branch&amp;gt;
git fetch
git rebase origin/dev
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/fr/docs/guides/contribute/contribute-code/commit-conventions/">Continuer vers le style des commits ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Conventions de commits</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/commit-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/commit-conventions/</guid><description>&lt;h2 id="style-de-commits">Style de commits&lt;/h2>
&lt;p>Le format général des commits est le suivant :&lt;/p>
&lt;pre tabindex="0">&lt;code>composant1, composant2: description du changement à l&amp;#39;impératif

Description détaillée ou technique du contenu et de la motivation du
changement, si le titre n&amp;#39;est pas complètement évident.
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>le message comme le code doit être en anglais&lt;/strong> (seulement des caractères ASCII pour le titre)&lt;/li>
&lt;li>il peut y avoir plusieurs composants, séparés par des &lt;code>:&lt;/code> quand il y a une relation hiérarchique, ou des &lt;code>,&lt;/code> sinon&lt;/li>
&lt;li>les composants sont en minuscule, avec éventuellement &lt;code>-&lt;/code>, &lt;code>_&lt;/code> ou &lt;code>.&lt;/code>&lt;/li>
&lt;li>la description du changement à l&amp;rsquo;impératif commence par un verbe en minuscule&lt;/li>
&lt;li>le titre ne doit pas comporter de lien (&lt;code>#&lt;/code> est interdit)&lt;/li>
&lt;/ul>
&lt;p>Idéalement :&lt;/p></description></item><item><title>Partagez vos changements</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/share-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/share-changes/</guid><description>&lt;p>L&amp;rsquo;auteur d&amp;rsquo;une &lt;em>pull request (PR)&lt;/em> est responsable de son « cycle de vie ». Il se charge de contacter les différents acteurs, de suivre la revue de code, répondre aux commentaires et corriger le code suite à la revue de code (vous pouvez également consulter la &lt;a href="https://osrd.fr/fr/docs/guides/contribute/code-review/">page dédiée à la revue de code&lt;/a>).&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Ouvrez une &lt;em>pull request&lt;/em>&lt;/strong> &lt;br>
Une fois que vos changements sont prêts, il est temps de proposer de les intégrer à la branche &lt;code>dev&lt;/code>.
Cela se fait &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">dans l&amp;rsquo;interface web de Github&lt;/a>.&lt;/p></description></item><item><title>Tests</title><link>https://osrd.fr/fr/docs/guides/contribute/contribute-code/tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/fr/docs/guides/contribute/contribute-code/tests/</guid><description>&lt;h2 id="back-end">Back-end&lt;/h2>
&lt;ul>
&lt;li>Les tests d&amp;rsquo;intégration sont écrits avec &lt;a href="https://docs.pytest.org/">pytest&lt;/a> dans le dossier &lt;code>/tests&lt;/code>.&lt;/li>
&lt;li>Chaque route décrite dans les fichiers &lt;code>openapi.yaml&lt;/code> doit avoir un test d&amp;rsquo;intégration.&lt;/li>
&lt;li>Le test doit vérifier à la fois le format et le contenu des réponses valides et invalides.&lt;/li>
&lt;/ul>
&lt;h2 id="front-end">Front-end&lt;/h2>
&lt;p>L&amp;rsquo;écriture fonctionnelle des tests est réalisée avec les &lt;em>Product Owners&lt;/em>, et les développeurs choisissent une implémentation technique qui répond précisément aux besoins exprimés et qui s&amp;rsquo;intègre dans les recommandations présentes ici.&lt;/p></description></item></channel></rss>