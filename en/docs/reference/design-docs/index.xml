<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSRD – Design documents</title><link>https://osrd.fr/en/docs/reference/design-docs/</link><description>Recent content in Design documents on OSRD</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://osrd.fr/en/docs/reference/design-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Signaling</title><link>https://osrd.fr/en/docs/reference/design-docs/signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/signaling/</guid><description>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>The signaling layer includes all signals, which respond to track occupancy and
reservation. Signals can be of different types, and are modularly loaded. Only
their behavior towards the state of the infrastructure and the train&amp;rsquo;s reaction
to signaling matters.&lt;/p>
&lt;p>Signals are connected to each other by blocks. Blocks define paths permitted
by signaling.&lt;/p>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>The signaling system is at the crossroads of many needs:&lt;/p>
&lt;ul>
&lt;li>it must allow for realistic signaling simulation in a multi-train simulation&lt;/li>
&lt;li>it must allow the conflict detection system to determine which resources are required for the train&lt;/li>
&lt;li>it must allow application users to edit and display signals&lt;/li>
&lt;li>it must allow for visualization of signals on a map&lt;/li>
&lt;li>it must allow for automated import from existing databases&lt;/li>
&lt;/ul>
&lt;h2 id="design-requirements">Design requirements:&lt;/h2>
&lt;p>All static data:&lt;/p>
&lt;ul>
&lt;li>must enable the front-end to display the signals&lt;/li>
&lt;li>must enable the infrastructure editor to configure signals&lt;/li>
&lt;li>must enable the back-end to simulate signals&lt;/li>
&lt;li>must be close to realistic industry models&lt;/li>
&lt;li>must allow for the modeling of composite signals, which carry several
logical signals within a single physical signal&lt;/li>
&lt;/ul>
&lt;p>To simulate signaling:&lt;/p>
&lt;ul>
&lt;li>blocks must be generated for both user convenience and &lt;strong>pathfinding&lt;/strong>&lt;/li>
&lt;li>for each signal, its &lt;strong>next compatible signal&lt;/strong> and &lt;strong>protected zones&lt;/strong> must be deduced&lt;/li>
&lt;li>the &lt;strong>minimum necessary information&lt;/strong> must be provided to the signaling modules for their operation&lt;/li>
&lt;li>enable using signaling modules without instantiating a complete simulation&lt;/li>
&lt;li>allow for signals to be loaded in any order, in parallel&lt;/li>
&lt;/ul>
&lt;p>For speed limits:&lt;/p>
&lt;ul>
&lt;li>some speed limits have to be enforced depending on the train path&amp;rsquo;s routes&lt;/li>
&lt;li>speed limits can be configured to have an impact on signaling&lt;/li>
&lt;li>ability to link the reaction of the train to a signal, and a speed limit&lt;/li>
&lt;/ul>
&lt;h2 id="assumptions">Assumptions&lt;/h2>
&lt;ul>
&lt;li>Each physical signal can be decomposed into a list of logical signals, all of which are associated with a signaling system.&lt;/li>
&lt;li>Blocks have a type.&lt;/li>
&lt;li>It is possible to compute, given a signal alone, its block and route delimiting properties.&lt;/li>
&lt;li>Blocks never cross route boundaries.&lt;/li>
&lt;li>Blocks which are not covered by routes do not exist, or can be ignored.&lt;/li>
&lt;li>At any time, trains only use one signaling system capable of transmitting movement authority.&lt;/li>
&lt;li>Speed limits change depending on which route is in use, and affect how signals behave&lt;/li>
&lt;li>Some speed limits have an impact on signaling, and some do not&lt;/li>
&lt;li>Either a speed limits differentiates per train category, or requires dynamic signaling, but not both&lt;/li>
&lt;/ul>
&lt;h2 id="operations">Operations&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Instantiating a view&lt;/strong> creates a framework for observing signals&lt;/li>
&lt;li>&lt;strong>Planning the path signals&lt;/strong> to the view the blocks that the train will traverse&lt;/li>
&lt;li>&lt;strong>Observing a signal&lt;/strong> subscribe to the state of a signal (through the view)&lt;/li>
&lt;li>&lt;strong>Passing a signal&lt;/strong> signals that a signal has been passed by the train (through the view)&lt;/li>
&lt;/ul>
&lt;h2 id="research-questions">Research Questions&lt;/h2>
&lt;ul>
&lt;li>Are there any blocks that overlap the end of a route? SNCF(Loïc): No.&lt;/li>
&lt;li>Are there any signals which rely on the state of the one after next signal? SNCF(Loïc): No.&lt;/li>
&lt;li>Are there signals that change behavior based on the active block in front of them? SNCF(Loïc): Yes, for slowdowns.&lt;/li>
&lt;li>Are there signals that are the start of blocks of different types? SNCF(Loïc): Yes.&lt;/li>
&lt;li>Can the behavior of a signal depend on which block is active after the end of the current block? SNCF(Loïc): Yes, with slowdowns or blinking yellow.&lt;/li>
&lt;li>Do some signaling systems need additional information in the blocks? SNCF(Loïc): Kind of, there are slowdowns, but it&amp;rsquo;s not specifically carried by the block.&lt;/li>
&lt;li>Is it nominal for a train to have multiple active signaling systems at the same time? SNCF(Loïc): No.&lt;/li>
&lt;li>are there any signals which depend on which route is set, but are not route delimiters? SNCF(Loïc): Yes, see Sémaphore Clignotant&lt;/li>
&lt;li>how do speed limits per train category and dynamic signaling interact? SNCF(Nicolas): There shouldn&amp;rsquo;t be any speed limit per category signaled by dynamic signaling&lt;/li>
&lt;li>are there any signals which depend on the state of multiple routes? SNCF(Loïc): No&lt;/li>
&lt;/ul></description></item><item><title>Docs: Conflict detection</title><link>https://osrd.fr/en/docs/reference/design-docs/conflict-detection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/conflict-detection/</guid><description>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>This document is a work in progress&lt;/p>
&lt;/div>
&lt;p>Conflict detection is the process of looking for timetable conflicts.
A timetable conflict is any predictable condition which disrupts planned operations.
Planned operations can be disrupted if a train is slowed down, prevented from proceeding, or delayed.&lt;/p>
&lt;p>One of the core features of OSRD is the ability to automatically detect some conflicts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spacing conflicts&lt;/strong>: insufficient spacing between trains sharing the same path&lt;/li>
&lt;li>&lt;strong>routing conflicts&lt;/strong>: insufficient spacing between trains with intersecting paths&lt;/li>
&lt;/ul>
&lt;p>Some other kinds of conflicts may be detected &lt;em>later on&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>maintenance conflicts&lt;/strong>: planned maintenance disrupts the path of a train&lt;/li>
&lt;li>&lt;strong>power delivery conflicts&lt;/strong>: combined power delivery requirements exceeds capacity&lt;/li>
&lt;/ul>
&lt;p>Conflict detection relies on interlocking and signaling modeling and simulation to:&lt;/p>
&lt;ol>
&lt;li>figure out what each actor requires to perform its duty undisturbed&lt;/li>
&lt;li>detect conflicting requirements&lt;/li>
&lt;/ol>
&lt;h2 id="design-constraints">Design constraints&lt;/h2>
&lt;p>The primary design goals are as follows:&lt;/p>
&lt;ul>
&lt;li>enable threading new train paths into an existing timetable (see STDCM)&lt;/li>
&lt;li>produce conflicts which can be linked back to a root cause&lt;/li>
&lt;li>operate in way that can be visualized and interpreted&lt;/li>
&lt;li>scale to real world timetables: millions of yearly trains, tens of thousands of daily trains&lt;/li>
&lt;/ul>
&lt;p>In addition to these goals, the following constraints apply:&lt;/p>
&lt;ul>
&lt;li>it must be possible to thread new train paths into timetables with existing conflicts&lt;/li>
&lt;li>it must not cause false-negatives: if no conflicts are detected, a multi-train simulation of the same timetable must not yield any slowdowns&lt;/li>
&lt;li>it cannot rely on data we do not have&lt;/li>
&lt;li>it has to enable later support of mobile block systems&lt;/li>
&lt;li>it has to rely on existing signaling and interlocking simulation&lt;/li>
&lt;li>it has to enable detecting conflicts regardless of the signaling system in use&lt;/li>
&lt;li>it has to support transitions between signaling systems&lt;/li>
&lt;li>it has to support conflicts between different signaling systems&lt;/li>
&lt;/ul>
&lt;h2 id="conflict-modeling">Conflict modeling&lt;/h2>
&lt;p>&lt;strong>Actors&lt;/strong> are objects which cause resources to be used:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>train paths&lt;/strong> (or someone / something on the behalf of the train)&lt;/li>
&lt;li>&lt;strong>maintenance work&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Actors need &lt;strong>resources&lt;/strong> to be available to proceed, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>zones&lt;/strong>, which have one state per way to traverse it&lt;/li>
&lt;li>&lt;strong>switches&lt;/strong>, which have one state per position&lt;/li>
&lt;li>&lt;strong>station platforms&lt;/strong>, which could be used to prevent two large trains from occupying both sides of a tiny platform&lt;/li>
&lt;/ul>
&lt;p>Actor emit &lt;strong>resource requirements&lt;/strong>, which:&lt;/p>
&lt;ul>
&lt;li>describe the need of an actor for a resource, for a given time span&lt;/li>
&lt;li>describe what the resource is needed for&lt;/li>
&lt;li>detail how the resource is used, such as switch position, zone entry and exit&lt;/li>
&lt;/ul>
&lt;p>Resource requirements can turn out to be either &lt;strong>satisfied&lt;/strong>
or &lt;strong>conflicting&lt;/strong> with other requirements, depending on compatibility rules.&lt;/p>
&lt;p>&lt;strong>Compatibility rules differ by requirement purpose and resource type&lt;/strong>. For example:&lt;/p>
&lt;ul>
&lt;li>spacing requirements are exclusive: simultaneous requirements for the same resource are conflicting&lt;/li>
&lt;li>zone and switch requirements are shareable: simultaneous requirements are satisfied if the resource configuration is identical&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>For conflict detection to work, resource requirements have to be at least as extensive as what&amp;rsquo;s required to guarantee that a train path will not be disturbed.&lt;/strong>&lt;/p>
&lt;h2 id="routing-conflicts">Routing conflicts&lt;/h2>
&lt;h3 id="context">Context&lt;/h3>
&lt;p>For trains to proceed safely along their planned path:&lt;/p>
&lt;ul>
&lt;li>switches have to be moved in the appropriate position&lt;/li>
&lt;li>level crossings have to activate&lt;/li>
&lt;li>risks of collision with other trains have to be mitigated&lt;/li>
&lt;/ul>
&lt;p>In practice, the path of trains is partitioned into routes, which when set, ensure a train can safely follow the route.&lt;/p>
&lt;p>Routes have the following lifestyle:&lt;/p>
&lt;ul>
&lt;li>As a train approaches the start of one of its routes, it is &lt;strong>called&lt;/strong> by an operator. If all resources required to safely use the route are available, switches and level crossings start to move. If a resources is not available, e.g. because another train has reserved a section of track, this process is delayed until all conditions are met.&lt;/li>
&lt;li>Once all resources are configured and reserved, the route is &lt;strong>set&lt;/strong> and ready to be followed. Before that point, the entry of the route was protected by signaling, which prevented the train from moving past the entry point.&lt;/li>
&lt;li>As the train moves along the route, it is &lt;strong>destroyed&lt;/strong>. When the tail of the trail releases key detectors along the route, resources before this detector are released, and can this be reserved by other routes.&lt;/li>
&lt;/ul>
&lt;p>For a train to proceed through a route unimpeded, the following things have to happen:&lt;/p>
&lt;ul>
&lt;li>The route has to be set before the train arrives, and before it is slowed down by signaling.&lt;/li>
&lt;li>The route has to be called, so that is it set in time.&lt;/li>
&lt;li>All resources required for the route to start setting at call time have to be available.&lt;/li>
&lt;/ul>
&lt;h3 id="generating-requirements">Generating requirements&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">RouteRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">route&lt;/span>: &lt;span style="color:#000">RouteId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">set_deadline&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone_requirements&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">RouteZoneRequirement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">RouteZoneRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone&lt;/span>: &lt;span style="color:#000">ZoneId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">entry_det&lt;/span>: &lt;span style="color:#000">DirDetectorId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">exit_det&lt;/span>: &lt;span style="color:#000">DirDetectorId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">release_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">switches&lt;/span>: &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SwitchId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SwitchConfigId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Routing requirements are generated by the following algorithm:&lt;/p>
&lt;ul>
&lt;li>Compute the set deadline using signaling simulation. The set deadline is the point in time at which the train would be slowed down if the route were not set.&lt;/li>
&lt;li>For each zone in each route, simulate when it would be released, and thus not required anymore.&lt;/li>
&lt;/ul>
&lt;div class="pageinfo pageinfo-info">
&lt;p>Route overlaps are not yet supported.&lt;/p>
&lt;/div>
&lt;h3 id="requirement-compatibility-rules">Requirement compatibility rules&lt;/h3>
&lt;p>Requirement compatibility is evaluated for all &lt;code>RouteZoneRequirement&lt;/code>s, grouped by zone. Requirements A and B, ordered such that &lt;code>A.set_deadline &amp;lt;= B.set_deadline&lt;/code>, are compatible if and only if either:&lt;/p>
&lt;ul>
&lt;li>their active time span does not overlap, such that &lt;code>A.release_time &amp;lt;= (B.set_deadline - activation_time)&lt;/code>, where the activation time is the delay required to reconfigure from &lt;code>A.switches&lt;/code> to &lt;code>B.switches&lt;/code>.&lt;/li>
&lt;li>&lt;code>(A.entry_det, A.exit_det, A.switches) == (B.entry_det, B.exit_det, B.switches)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="spacing-conflicts">Spacing conflicts&lt;/h2>
&lt;h3 id="context-1">Context&lt;/h3>
&lt;p>Even if interlocking mitigates some of the risks associated with operating trains, a major one is left out: head to tail collisions, caused by insufficient spacing.&lt;/p>
&lt;p>This responsibility is handled by signaling, which conveys both interlocking and spacing constraints.&lt;/p>
&lt;p>Signaling helps trains slow down until the end of their movement authority, which is either:&lt;/p>
&lt;ul>
&lt;li>behind the tail of the next train&lt;/li>
&lt;li>at the end of the last route set for this train&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Spacing requirements are emitted for zones which if occupied, would cause a slowdown, and zones occupied by the train&lt;/strong>&lt;/p>
&lt;h3 id="generating-requirements-1">Generating requirements&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">SpacingRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone&lt;/span>: &lt;span style="color:#000">ZoneId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">begin_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">end_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every time the driver sees a signal, generate updated spacing requirements by calculating which zones, if occupied, would trigger a slowdown:&lt;/p>
&lt;ul>
&lt;li>start by assuming the zone just after the head of the train is occupied&lt;/li>
&lt;li>until the train is not slowed down, move the occupied section one zone further away from the train&lt;/li>
&lt;/ul>
&lt;h3 id="requirement-compatibility-rules-1">Requirement compatibility rules&lt;/h3>
&lt;p>Requirement compatibility is evaluated for all &lt;code>SpacingRequirement&lt;/code>s, grouped by zone.&lt;/p>
&lt;p>Requirements A and B are compatible if and only if their &lt;code>[begin_time, end_time]&lt;/code> ranges do not overlap.&lt;/p>
&lt;h2 id="incremental-requirement-generation">Incremental requirement generation&lt;/h2>
&lt;h3 id="routing-requirements">Routing requirements&lt;/h3>
&lt;pre class="mermaid">sequenceDiagram
participant client as Client
participant gen as Routing resource generator
client -&amp;gt;&amp;gt; gen: initial path &amp;#43; train movement
loop
gen -&amp;gt;&amp;gt; client: prefix path extension needed
client -&amp;gt;&amp;gt; gen: extra prefix path &amp;#43; train movement
end
gen -&amp;gt;&amp;gt; client: resource requirements&lt;/pre>
&lt;p>After an initial path is given, the requirement generator can ask for more &lt;strong>prefix&lt;/strong> path (before the start of the route). The client responds with:&lt;/p>
&lt;ul>
&lt;li>the extra prefix path&lt;/li>
&lt;li>the movement of the train over time on the given prefix path&lt;/li>
&lt;/ul>
&lt;p>If the initial path has multiple routes, the last route is the one resource requirements are emitted for.&lt;/p>
&lt;h3 id="spacing-requirements">Spacing requirements&lt;/h3>
&lt;pre class="mermaid">sequenceDiagram
participant client as Client
participant gen as Spacing resource generator
client -&amp;gt;&amp;gt; gen: initial path &amp;#43; train movement
loop
gen -&amp;gt;&amp;gt; client: postfix path extension needed
client -&amp;gt;&amp;gt; gen: extra postfix path
end
gen -&amp;gt;&amp;gt; client: resource requirements&lt;/pre>
&lt;p>After an initial path is given, the requirement generator can ask for more &lt;strong>postfix&lt;/strong> path (before the start of the route).&lt;/p>
&lt;h2 id="visualizing-requirements">Visualizing requirements&lt;/h2>
&lt;script type="application/javascript" src="mkt.js">&lt;/script>
&lt;p>&lt;object style="width: 100%" onload="mkt_hydrate(this.contentDocument.rootElement)" type="image/svg+xml" data="requirements-diagram.svg">&lt;/object>&lt;/p>
&lt;p>&lt;a href="./requirements-diagram.html">Full-page requirements diagram&lt;/a>&lt;/p></description></item><item><title>Docs: Train simulation v3</title><link>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/</guid><description>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>This work is pending implementation, and has not yet been adjusted to
reflect potential required adjustments.&lt;/p>
&lt;/div>
&lt;p>These articles describe the design of the new train simulation system.&lt;/p>
&lt;p>This system should be simpler and more stable than the current one,
and should enable more advanced features in the future.&lt;/p></description></item><item><title>Docs: Search for last-minute train slots (STDCM)</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/</guid><description>
&lt;p>OSRD can be used to find a slot for a train in an already established
timetable, without causing conflicts with other trains.&lt;/p>
&lt;p>The acronym STDCM (Short Term Digital Capacity Management) is used
to describe this concept in general.&lt;/p></description></item><item><title>Docs: Timetable v2</title><link>https://osrd.fr/en/docs/reference/design-docs/timetable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/timetable/</guid><description>
&lt;p>&lt;img src="timetable.svg" alt="Test">&lt;/p>
&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;p>Some major changes were made between our first version of the timetable and the new one:&lt;/p>
&lt;ul>
&lt;li>Isolate the timetable table. It can be used in a scenario or in other contexts&lt;/li>
&lt;li>Have a soft reference from train schedule to rolling stock (to be able to create a train schedule with unknown rolling stock)&lt;/li>
&lt;li>Consider path and simulation output as cache (that don&amp;rsquo;t require to be stored in DB)&lt;/li>
&lt;li>We can compute pathfinding without having to store data&lt;/li>
&lt;li>All input needed to compute a path is stored in the train schedule (we can recompute it if needed)&lt;/li>
&lt;li>All input needed to run a simulation is stored in the train schedule (we can recompute it if needed)&lt;/li>
&lt;/ul>
&lt;h1 id="train-schedule-v2">Train schedule v2&lt;/h1>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>&lt;code>front&lt;/code>: easy to keep consistent during edition&lt;/li>
&lt;li>&lt;code>front&lt;/code>: intermediate invalid states than can be reached during edition have to be encodable&lt;/li>
&lt;li>&lt;code>front&lt;/code>: when deleting a waypoint that is referenced by margins, the position of the deleted waypoint within the path must be preserved until the situation is resolved&lt;/li>
&lt;li>&lt;code>import&lt;/code>: path waypoint locations can be specified using UIC operational point codes&lt;/li>
&lt;li>&lt;code>import&lt;/code>: support fixed scheduled arrival times at stops and arbitrary points&lt;/li>
&lt;li>&lt;code>import&lt;/code> &lt;code>edition&lt;/code>: train schedules must be self-contained: they cannot be described using the result of pathfinding or simulations&lt;/li>
&lt;/ul>
&lt;h2 id="design-decisions-1">Design decisions&lt;/h2>
&lt;h3 id="path-waypoints-have-an-identity">Path waypoints have an identity&lt;/h3>
&lt;p>At some point in the design process, the question was raised of whether to reference location of stops and margin transitions by name, or by value. That is, should stops hold the index of the waypoint where the stop occurs, or a description of the location where the stop occurs?&lt;/p>
&lt;p>It was decided to add identifiers to path waypoints, and to reference those identifiers where referencing a path location is needed. This has multiple upsides:&lt;/p>
&lt;ul>
&lt;li>you can&amp;rsquo;t reference a location outside of the path&lt;/li>
&lt;li>when changing a waypoint&amp;rsquo;s location, for example from one station&amp;rsquo;s platform to another, no additional work is needed to keep the path consistent&lt;/li>
&lt;li>if a path goes to the same place multiple times, the identifier reference makes it clear which path location is referenced&lt;/li>
&lt;li>it makes keeping data consistent while editing easier, as all locations are kept in a single place&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-train-schedules-and-soft-deletes">Invalid train schedules and soft deletes&lt;/h3>
&lt;p>If a user deletes a waypoint, what happens? Is it the front-end&amp;rsquo;s responsibility to only save valid schedules, or can invalid schedules be represented in the data model? We decided that it wasn&amp;rsquo;t just the front-end&amp;rsquo;s responsibility, as we want to be able to model inconsistent states, until the user comes back to fix it.&lt;/p>
&lt;p>One key observation was that we do not want to lose the ability to locate within the path waypoints that were deleted, until all references are gone. How is the front-end supposed to display margin bounds or stops for a waypoint that&amp;rsquo;s gone, if it&amp;rsquo;s not there anymore?&lt;/p>
&lt;p>We thus decided to add a &lt;code>deleted&lt;/code> soft-delete flag to waypoints. When this flag is set, the back-end runs simulations on the path, but still allows saving it. Once all references to a deleted waypoint are gone, it can be removed from the path. The backend can deny train schedules with stale deleted waypoints.&lt;/p>
&lt;h3 id="separating-path-and-stops">Separating path and stops&lt;/h3>
&lt;p>This decision was hard to make, as there are little factors influencing this decision. Two observations led us to this decision:&lt;/p>
&lt;ul>
&lt;li>when deleting a waypoint, the end user may want to preserve the associated stop. Making the separation clear in the data model helps with implementing this behavior correctly, if deemed relevant&lt;/li>
&lt;li>bundling stops into the path makes it harder to describe what fields &lt;code>path&lt;/code> waypoints should have, and what should have a separate object and reference. It was decided that keeping &lt;code>path&lt;/code> a simple list of &lt;code>Location&lt;/code>, with no strings attached, made things a little clearer.&lt;/li>
&lt;/ul>
&lt;h3 id="no-more-engineering-margins">No more engineering margins?&lt;/h3>
&lt;p>In the legacy model, we had engineering margins. These margins had the property of being able to overlap. It was also possible to choose the distribution algorithm for each margin individually.&lt;/p>
&lt;p>We asked users to comment on the difference and the usefulness of retaining these margins with scheduled points. The answer is that there is no fundamental difference, and that the additional flexibility offered by engineering margins makes no practical sense (overlap and choice of distribution&amp;hellip;).&lt;/p>
&lt;h3 id="arrival-times-are-durations-since-departure-time">Arrival times are durations since departure time&lt;/h3>
&lt;ul>
&lt;li>this allows shifting the departure time without having to change arrival times&lt;/li>
&lt;li>we don&amp;rsquo;t have to parse dates and compute date differences within a single trip&lt;/li>
&lt;/ul>
&lt;p>We also discussed whether to use seconds or ISO 8601 durations. In the end, ISO 8601 was chosen, despite the simplicity of seconds:&lt;/p>
&lt;ul>
&lt;li>it preserves the user&amp;rsquo;s choice unit for specifying duration&lt;/li>
&lt;li>it interfaces nicely with the ISO 8601 departure time&lt;/li>
&lt;li>it does not suffer from potential integer-float serialization related precision loss&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-and-outdated-train-schedules">Invalid and outdated train schedules&lt;/h3>
&lt;p>Reasons for a train schedule to be &lt;strong>invalid&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Inconsistent train schedule (contains deleted waypoint)&lt;/li>
&lt;li>Rolling stock not found&lt;/li>
&lt;li>Path waypoint not found&lt;/li>
&lt;li>The path cannot be found&lt;/li>
&lt;/ul>
&lt;p>Reasons for a train schedule to be &lt;strong>outdated&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The train path changed&lt;/li>
&lt;li>The train running time changed&lt;/li>
&lt;/ul>
&lt;p>What we can do about outdated trains:&lt;/p>
&lt;ol>
&lt;li>Nothing, they&amp;rsquo;re updated without notification&lt;/li>
&lt;li>We can notify the user that a train schedule is outdated:
&lt;ul>
&lt;li>Nothing can be done except acknowledge the change&lt;/li>
&lt;li>We can not check what changed between the old and new version&lt;/li>
&lt;li>We can not know the cause of this change (RS, Infra, Algorithms&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Note: The outdated status is a nice to have feature (it won&amp;rsquo;t be implemented right now).&lt;/p>
&lt;h2 id="creation-fields">Creation fields&lt;/h2>
&lt;p>These fields are required at creation time, but cannot be changed afterwards.
They are returned when the train schedule is queried.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">timetable_id&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="modifiable-fields">Modifiable fields&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">train_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ABC3615&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">rolling_stock_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">R2D2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># labels are metadata. They&amp;#39;re only used for display filtering&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;tchou-tchou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;choo-choo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># used to select speed limits for simulation&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">speed_limit_tag&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;MA100&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the start time is an ISO 8601 datetime with timezone. it is not always the&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># same at the departure time, as there may be a stop at the starting point&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">start_time&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2023-12-21T08:51:11.914897+00:00&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: a, uic&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">87210&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Any operational point matching the given uic&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: b, track: foo, offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 10m on track foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: c, deleted: true, trigram&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ABC}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Any operational point matching the trigram ABC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: d, operational_point&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">X}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A specified operational point&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the algorithm used for distributing margins and scheduled times&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constraint_distribution&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MARECO&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or LINEAR&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># all durations and times are specified using ISO 8601&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># we don&amp;#39;t supports months and years duration since it&amp;#39;s ambiguous&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># times are defined as time elapsed since start. Even if the attribute is omitted,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># a scheduled point at the starting point is inferred to have departure=start_time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the &amp;#34;locked&amp;#34; flag is ignored by the backend.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># To specify signal&amp;#39;s state on stop&amp;#39;s arrival, you can use the &amp;#34;reception_signal&amp;#34; enum:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - OPEN: arrival on open signal, will reserve resource downstream of the signal.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - STOP: arrival on stop signal, will not reserve resource downstream of the signal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># and will trigger safety speed on approach.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - SHORT_SLIP_STOP: arrival on stop signal with a short slip distance,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># will not reserve resource downstream of the signal and will trigger safety&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># speed on approach as well as short slip distance speed.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This is used for cases where a movable element is placed shortly after the signal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># and going beyond the signal would cause major problems.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This is used automatically for any stop before a buffer-stop.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This is also the default use for STDCM stops, as it is the most restrictive.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">schedule&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: a, stop_for: PT5M, locked&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># inferred arrival to be equal to start_time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: b, arrival: PT10M, stop_for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PT5M}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: c, stop_for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PT5M}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: d, arrival: PT50M, locked: true, reception_signal&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SHORT_SLIP_STOP}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">margins&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This example encodes the following margins:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># a --- 5% --- b --- 3% --- c --- 4.5min/100km --- d&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># /!\ all schedule points with either an arrival or departure time must also be&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># margin boundaries. departure and arrival waypoints are implicit boundaries. /!\&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># boundaries delimit margin sections. A list of N boundaries yields N + 1 sections.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">boundaries&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">b, c]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the following units are supported:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - % means added percentage of the base simulation time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - min/100km means minutes per 100 kilometers&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">values&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;5%&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;3%&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;4.5min/100km&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># train speed at simulation start, in meters per second.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># must be zero if the train starts at a stop&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">initial_speed&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.5&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">power_restrictions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">from: b, to: c, value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;M1C1&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">comfort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AIR_CONDITIONING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or HEATING, default STANDARD&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">options&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Should we use electrical profiles to select rolling stock speed effort curves&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use_electrical_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="combining-margins-and-schedule">Combining margins and schedule&lt;/h1>
&lt;p>Margins and scheduled points are two ways to add time constraints to a train&amp;rsquo;s schedule.
Therefore, there must be a clear set of rules to figure out how these two interfaces interact.&lt;/p>
&lt;p>The end goal is to make the target schedule and margins consistent with each other. This is achieved by:&lt;/p>
&lt;ul>
&lt;li>computing what the schedule would look like if only margins were applied&lt;/li>
&lt;li>compare that to the target schedule&lt;/li>
&lt;li>correct the margin schedule so that it matches the target schedule&lt;/li>
&lt;/ul>
&lt;p>The path is partitioned as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>known time sections&lt;/strong> span between locations where the arrival time is known.
If there are &lt;code>N&lt;/code> such locations, there are &lt;code>N - 1&lt;/code> known time sections.
In these sections, margins need to be adjusted to match the target schedule.&lt;/li>
&lt;li>If the arrival time at destination is unknown, the section from the last known
arrival time point and the destination is called the &lt;strong>relaxed time section&lt;/strong> has no bound.
Margins can be applied directly.&lt;/li>
&lt;/ul>
&lt;p>As &lt;strong>margins cannot span known time section boundaries&lt;/strong>, each known time section can be
further subdivided into margin sections. Margins cover the entire path.&lt;/p>
&lt;p>&lt;strong>The end goal is to find the target arrival time at the end of each margin section&lt;/strong>.
This needs to be done while preserving consistency with the input schedule.&lt;/p>
&lt;p>&lt;img src="schedule.svg" alt="Schedule building algorithm">&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;p>Note that stops do not impact margin repartition. For example, the margin &lt;strong>does not need&lt;/strong> to be proportionally distributed on each side of &lt;code>b&lt;/code>.&lt;/p>
&lt;p>The same goes for points with arrival time. They impact whether the margin is respected or not, but they do not force the margin to be proportionally distributed on each side of the point.&lt;/p>
&lt;/div>
&lt;p>The final schedule is computed as follows:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>base simulation&lt;/strong> is computed, without any time constraint (other than stops). It&amp;rsquo;s used to compute provisional margin values.&lt;/li>
&lt;li>Make a &lt;strong>provisional time table&lt;/strong>, which ignores target arrival times but includes provisional margin values.&lt;/li>
&lt;li>For each &lt;strong>known time section&lt;/strong>, compute the adjustment required to make the provisional schedule match the target schedule.&lt;/li>
&lt;li>Distribute this difference into the known time section&amp;rsquo;s margin sections, proportionally to margin section running time.
After distributing the adjustment into margin sections, the &lt;strong>final schedule&lt;/strong> should be compatible with the target schedule.&lt;/li>
&lt;/ul>
&lt;h2 id="error-handling">Error handling&lt;/h2>
&lt;p>Some errors may happen while building the timetable:&lt;/p>
&lt;ul>
&lt;li>if a known time section&amp;rsquo;s required adjustment is negative, a warning must be raised, as margins will have to be lowered&lt;/li>
&lt;li>if a margin section&amp;rsquo;s final running time is tighter than the base simulation, it cannot be achieved, and a warning should be raised&lt;/li>
&lt;/ul>
&lt;p>Other errors can happen at runtime:&lt;/p>
&lt;ul>
&lt;li>target margin values can be too low, as transitions from high density margin to low margin section force the train to lose
time after it has exited to high density margin section.&lt;/li>
&lt;li>target margin values can also be too high, as the train may not have time to slow down enough, or drive so slow as to be
unacceptable.&lt;/li>
&lt;/ul>
&lt;p>During simulation, &lt;strong>if a target arrival time cannot be achieved, the rest of the schedule still stands&lt;/strong>.&lt;/p>
&lt;p>The mission model in OSRD is represented almost like a Train Schedule with the addition of 2 fields:&lt;/p>
&lt;ul>
&lt;li>&lt;code>step: Duration (ISO 8601)&lt;/code> corresponds to the delay between each train&lt;/li>
&lt;li>&lt;code>duration: Duration (ISO 8601)&lt;/code> which corresponds to the total duration of the mission.&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>A mission with a step of 15 min and a duration of 2 hours will see 8 trains running from the departure time.&lt;/p>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;h3 id="timetable">Timetable&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /timetable
GET /timetable/ # Paginated list timetable
PUT /timetable/ID
DELETE /timetable/ID
GET /timetable/ID/train_schedules # Paginated list of train schedules
GET /timetable/ID/paced_trains # Paginated list of paced_trains
&lt;/code>&lt;/pre>&lt;h3 id="train-schedule">Train Schedule&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /timetable/ID/train_schedules # A batch creation
GET /train_schedule/ID
PUT /train_schedule/ID # Update a specific train schedule
DELETE /train_schedule # A batch deletion
&lt;/code>&lt;/pre>&lt;h3 id="paced-train">Paced Train&lt;/h3>
&lt;p>POST /timetable/ID/paced_trains # A batch creation
GET /paced_train/ID
PUT /paced_train/ID # Update a specific paced train
DELETE /paced_trains # A batch deletion&lt;/p>
&lt;pre tabindex="0">&lt;code>
### Path
&lt;/code>&lt;/pre>&lt;p>POST /infra/ID/pathfinding/topo # Not required now can be move later
POST /infra/ID/pathfinding/blocks&lt;/p>
&lt;h1 id="takes-a-pathfinding-result-and-a-list-of-properties-to-extract">takes a pathfinding result and a list of properties to extract&lt;/h1>
&lt;p>POST /infra/ID/path_properties?props[]=slopes&amp;amp;props[]=gradients&amp;amp;props[]=electrifications&amp;amp;props[]=geometry&amp;amp;props[]=operational_points
GET /train_schedule/ID/path?infra_id=42 # Retrieve the path from a train schedule
GET /paced_train/ID/path?infra_id=42 # Retrieve the path from a paced_train&lt;/p>
&lt;pre tabindex="0">&lt;code>
### Simulation results
&lt;/code>&lt;/pre>&lt;h1 id="retrieve-the-list-of-conflict-of-the-timetable-invalid-trains-are-ignored">Retrieve the list of conflict of the timetable (invalid trains are ignored)&lt;/h1>
&lt;p>GET /timetable/ID/conflicts?infra=N&lt;/p>
&lt;h1 id="retrieve-the-space-speed-and-time-curve-of-a-given-train">Retrieve the space, speed and time curve of a given train&lt;/h1>
&lt;p>GET /train_schedule/ID/simulation?infa=N&lt;/p>
&lt;h1 id="retrieve-the-space-speed-and-time-curve-of-a-given-paced-train">Retrieve the space, speed and time curve of a given paced train&lt;/h1>
&lt;p>GET /paced_train/ID/simulation?infa=N&lt;/p>
&lt;h1 id="retrieves-simulation-information-for-a-given-train-list-useful-for-finding-out-whether-pathfindingsimulation-was-successful">Retrieves simulation information for a given train list. Useful for finding out whether pathfinding/simulation was successful.&lt;/h1>
&lt;p>GET /train_schedule/simulations_sumary?infa=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;h1 id="retrieves-simulation-information-for-a-given-paced-train-list-useful-for-finding-out-whether-pathfindingsimulation-was-successful">Retrieves simulation information for a given paced train list. Useful for finding out whether pathfinding/simulation was successful.&lt;/h1>
&lt;p>GET /paced_train/simulations_sumary?infa=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;h1 id="projects-the-space-time-curves-and-paths-of-a-number-of-train-schedules-onto-a-given-path">Projects the space time curves and paths of a number of train schedules onto a given path&lt;/h1>
&lt;p>POST /v2/train_schedule/project_path?infra=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;h1 id="projects-the-space-time-curves-and-paths-of-a-number-of-paced-trains-onto-a-given-path">Projects the space time curves and paths of a number of paced trains onto a given path&lt;/h1>
&lt;p>POST /paced_train/project_path?infra=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;pre tabindex="0">&lt;code>
## Frontend workflow
The frontend shouldn&amp;#39;t wait minutes to display something to the user. When a timetable contains hundreds of trains it can take some time to simulate everything.
The idea is to split requests into small batches.
```mermaid
flowchart TB
InfraLoaded[Check for infra to be loaded]
RetrieveTimetable[Retrieve Timetable]
RetrieveTrains[Retrieve TS2 payloads]
SummarySimulation[[Summary simulation batch N:N+10]]
TrainProjectionPath[Get selected train projection path]
Projection[[Projection batch N-10:N]]
TrainSimulation[Get selected train simulation]
TrainPath[Get selected train path]
TrainPathProperties[Get selected train path properties]
DisplayGev(Display: GEV / Map /\n Driver Schedule/ Linear / Output Table)
DisplayGet(Display Space Time Chart)
DisplayTrainList(Display train list)
Conflicts(Compute and display conflicts)
ProjectConflicts(Display conflicts in GET)
InfraLoaded --&amp;gt;|Wait| SummarySimulation
InfraLoaded --&amp;gt;|Wait| TrainProjectionPath
InfraLoaded --&amp;gt;|Wait| TrainPath
TrainPath --&amp;gt;|If found| TrainSimulation
TrainPath --&amp;gt;|If found| TrainPathProperties
RetrieveTimetable --&amp;gt;|Get train ids| RetrieveTrains
RetrieveTrains ==&amp;gt;|Sort trains and chunk it| SummarySimulation
SummarySimulation ==&amp;gt;|Wait for the previous batch| Projection
SummarySimulation --&amp;gt;|Gradually fill cards| DisplayTrainList
TrainPathProperties --&amp;gt;| | DisplayGev
TrainSimulation --&amp;gt;|If valid simulation| DisplayGev
TrainProjectionPath --&amp;gt;|Wait for the previous batch| Projection
SummarySimulation -..-&amp;gt;|If no projection train id| TrainProjectionPath
Projection ==&amp;gt;|Gradually fill| DisplayGet
SummarySimulation --&amp;gt;|Once everything is simulated| Conflicts
Conflicts --&amp;gt; ProjectConflicts
&lt;/code>&lt;/pre></description></item><item><title>Docs: Authentication and authorization</title><link>https://osrd.fr/en/docs/reference/design-docs/auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/auth/</guid><description>
&lt;h2 id="context-and-requirements">Context and requirements&lt;/h2>
&lt;ul>
&lt;li>authentication (&lt;code>authn&lt;/code>) is the process of figuring out a user&amp;rsquo;s identity.&lt;/li>
&lt;li>authorization (&lt;code>authz&lt;/code>) is the process of figuring out whether a user can do something.&lt;/li>
&lt;/ul>
&lt;p>This design project started as a result of a feature request coming from SNCF users
and stakeholders. After some interviews, we believe the overall needs to be as follows:&lt;/p>
&lt;ul>
&lt;li>controlling access to features
&lt;ul>
&lt;li>some users are supposed to only view results of operational studies&lt;/li>
&lt;li>some users only get access to part of the app&lt;/li>
&lt;li>not everyone can have access to the admin panel&lt;/li>
&lt;li>it could be nice to be able to roll experimental features out incrementally&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>controlling access to data
&lt;ul>
&lt;li>some infrastructures shall only be changed by automated import jobs&lt;/li>
&lt;li>users might want to control who can mess with what they&amp;rsquo;re currently working on&lt;/li>
&lt;li>rolling stock, infrastructure and timetable data may be confidential&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="overall-architecture">Overall architecture&lt;/h2>
&lt;pre class="mermaid">flowchart LR
subgraph gateway
auth([authentication])
end
subgraph editoast
subgraph authorization
roles([role check])
permissions([permission check])
end
end
subgraph decisions
permit
deny
end
request --&amp;gt; auth --&amp;gt; roles --&amp;gt; permissions
auth --&amp;gt; deny
roles --&amp;gt; deny
permissions --&amp;gt; permit &amp;amp; deny&lt;/pre>
&lt;h2 id="authentication">Authentication&lt;/h2>
&lt;p>The app&amp;rsquo;s backend is not responsible for authenticating the user: it gets all required information
from &lt;code>gateway&lt;/code>, the authenticating reverse proxy which stands between it and the front-end.&lt;/p>
&lt;ul>
&lt;li>at application start-up, the front-end redirects to the login page if the user is not logged in&lt;/li>
&lt;li>if the user is already authenticated, the gateway returns user metadata&lt;/li>
&lt;li>otherwise, the gateway initiates the authentication process, usually with OIDC.
The implementation was designed to allow new backends to be added easily.&lt;/li>
&lt;li>once the user is authenticated, all requests to the backend can expect the following headers to be set:
&lt;ul>
&lt;li>&lt;code>x-remote-user-identity&lt;/code> contain a unique identifier for this identity. It can be thought of as an opaque &lt;code>provider_id/user_id&lt;/code> tuple.&lt;/li>
&lt;li>&lt;code>x-remote-user-name&lt;/code> contain a username&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>When editoast receives a request, it has to match the remote user ID with a
database user, creating it as needed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">table&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authn_subject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">bigserial&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">generated&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">always&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">as&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">identity&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">primary&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">table&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authn_user&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">primary&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">key&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">auth_subject&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cascade&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">identity_id&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">text&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">text&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">table&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authn_group&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">primary&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">key&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">auth_subject&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cascade&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">text&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">-- add a trigger so that when a group is deleted, the associated authn_subject is deleted too
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">-- add a trigger so that when a user is deleted, the associated authn_subject is deleted too
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">table&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authn_group_membership&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">auth_user&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cascade&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">auth_group&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cascade&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">unique&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="group-and-role-management-api">Group and role management API&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
Users cannot be directly created. The authenticating reverse proxy is in charge of user management.
&lt;/div>
&lt;ul>
&lt;li>role management is protected by the &lt;code>role:admin&lt;/code> role.&lt;/li>
&lt;li>groups management is subject to permissions.&lt;/li>
&lt;/ul>
&lt;h4 id="get-information-about-a-user">Get information about a user&lt;/h4>
&lt;pre tabindex="0">&lt;code>GET /authn/me
GET /authn/user/{user_id}
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Foo Bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;groups&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;app_roles&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ops&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;builtin_roles&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:read&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="#builtin-roles">Builtin roles&lt;/a> are deduced from app roles, and thus cannot be directly edited.&lt;/p>
&lt;h4 id="add-roles-to-a-user-or-group">Add roles to a user or group&lt;/h4>
&lt;p>This endpoint can only be called if the user has the &lt;code>role:admin&lt;/code> builtin role.&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /authn/user/{user_id}/roles/add
POST /authn/group/{group_id}/roles/add
&lt;/code>&lt;/pre>&lt;p>Takes a list of app roles:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ops&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;stdcm&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="remove-roles-from-a-user-or-group">Remove roles from a user or group&lt;/h4>
&lt;p>This endpoint can only be called if the user has the &lt;code>role:admin&lt;/code> builtin role.&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /authn/user/{user_id}/roles/remove
&lt;/code>&lt;/pre>&lt;p>Takes a list of app roles to remove:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ops&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="create-a-group">Create a group&lt;/h4>
&lt;p>This endpoint can only be called if the user has the &lt;code>group:create&lt;/code> builtin role.
When a user creates a group, it becomes its owner.&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /authn/group
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;app_roles&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ops&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Returns the group ID.&lt;/p>
&lt;h4 id="add-users-to-a-group">Add users to a group&lt;/h4>
&lt;p>Can only be called if the user has &lt;code>Writer&lt;/code> access to the group.&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /authn/group/{group_id}/add
&lt;/code>&lt;/pre>&lt;p>Takes a list of user IDs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="remove-users-from-a-group">Remove users from a group&lt;/h4>
&lt;p>Can only be called if the user has &lt;code>Writer&lt;/code> access to the group.&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /authn/group/{group_id}/remove
&lt;/code>&lt;/pre>&lt;p>Takes a list of user IDs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="delete-a-group">Delete a group&lt;/h4>
&lt;p>Can only be called if the user has &lt;code>Owner&lt;/code> access to the group.&lt;/p>
&lt;pre tabindex="0">&lt;code>DELETE /authn/group/{group_id}
&lt;/code>&lt;/pre>&lt;h2 id="authorization">Authorization&lt;/h2>
&lt;p>As shown in the overall architecture section, to determine if a subject is
allowed to conduct an action on a resource, two checks are performed:&lt;/p>
&lt;ol>
&lt;li>We check that the &lt;strong>roles&lt;/strong> of the subject allows the action.&lt;/li>
&lt;li>We check that the subject has the &lt;strong>minimum privileges&lt;/strong> on the resource(s) that are required to perform the action.&lt;/li>
&lt;/ol>
&lt;h3 id="roles">Roles&lt;/h3>
&lt;p>Subject can have any number of roles. Roles allow access to features. Roles do not give rights on specific objects.&lt;/p>
&lt;p>Both the frontend and backend require some roles to be set to allow access to parts of the app.
In the frontend, roles guard features, in the backend, roles guard endpoints or group of endpoints.&lt;/p>
&lt;p>There are two types of roles:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Builtin roles&lt;/strong> are bundled with OSRD. Only builtin roles can be required by endpoints. These roles &lt;strong>cannot&lt;/strong> directly be assigned to users.&lt;/li>
&lt;li>&lt;strong>Application roles&lt;/strong> can be assigned to users. These roles are defined in a configuration file that editoast reads at startup.&lt;/li>
&lt;/ul>
&lt;p>Here is an example of what builtin roles might look like:&lt;/p>
&lt;ul>
&lt;li>&lt;code>role:admin&lt;/code> allows assigning roles to users and groups&lt;/li>
&lt;li>&lt;code>group:create&lt;/code> allows creating user groups&lt;/li>
&lt;li>&lt;code>infra:read&lt;/code> allows access to the map viewer module&lt;/li>
&lt;li>&lt;code>infra:write&lt;/code> implies &lt;code>infra:read&lt;/code>. it allows access to the infrastructure editor.&lt;/li>
&lt;li>&lt;code>rolling-stock:read&lt;/code>&lt;/li>
&lt;li>&lt;code>rolling-stock:write&lt;/code> implies &lt;code>rolling-stock:read&lt;/code>. Allows access to the rolling stock editor.&lt;/li>
&lt;li>&lt;code>timetable:read&lt;/code>&lt;/li>
&lt;li>&lt;code>timetable:write&lt;/code> implies &lt;code>timetable:read&lt;/code>&lt;/li>
&lt;li>&lt;code>operational-studies:read&lt;/code> allows read only access to operational studies. it implies &lt;code>infra:read&lt;/code>, &lt;code>timetable:read&lt;/code> and &lt;code>rolling-stock:read&lt;/code>&lt;/li>
&lt;li>&lt;code>operational-studies:write&lt;/code> allows write access to operational studies. it implies &lt;code>operational-studies:read&lt;/code> and &lt;code>timetable:write&lt;/code>&lt;/li>
&lt;li>&lt;code>stdcm&lt;/code> implies &lt;code>infra:read&lt;/code>, &lt;code>timetable:read&lt;/code> and &lt;code>rolling-stock:read&lt;/code>. it allows access to the short term path request module.&lt;/li>
&lt;li>&lt;code>admin&lt;/code> gives access to the admin panel, and implies all other roles&lt;/li>
&lt;/ul>
&lt;p>Given these builtin roles, application roles may look like:&lt;/p>
&lt;ul>
&lt;li>&lt;code>operational-studies-customer&lt;/code> implies &lt;code>operational-studies:read&lt;/code>&lt;/li>
&lt;li>&lt;code>operational-studies-analyst&lt;/code> implies &lt;code>operational-studies:write&lt;/code>&lt;/li>
&lt;li>&lt;code>stdcm-customer&lt;/code> implies &lt;code>stdcm&lt;/code>&lt;/li>
&lt;li>&lt;code>ops&lt;/code> implies &lt;code>admin&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Roles are &lt;em>hierarchical&lt;/em>. This is a necessity to ensure that, for example, if we are to introduce a new action related to scenarios, each subject with the role &amp;ldquo;exploitation studies&amp;rdquo; gets that new role automatically.
We&amp;rsquo;d otherwise need to edit the appropriate existing roles.&lt;/p>
&lt;p>Their hierarchy could resemble:&lt;/p>
&lt;pre class="mermaid">%%{init: {&amp;#34;flowchart&amp;#34;: {&amp;#34;defaultRenderer&amp;#34;: &amp;#34;elk&amp;#34;}} }%%
flowchart TD
subgraph application roles
operational-studies-analyst
operational-studies-customer
end
subgraph builtin roles
rolling-stock:read
rolling-stock:write
infra:read
infra:write
timetable:read
timetable:write
operational-studies:read
operational-studies:write
end
operational-studies-analyst --&amp;gt; operational-studies:write
operational-studies-customer --&amp;gt; operational-studies:read
infra:write --&amp;gt; infra:read
rolling-stock:write --&amp;gt; rolling-stock:read
operational-studies:read --&amp;gt; infra:read &amp;amp; timetable:read &amp;amp; rolling-stock:read
operational-studies:write --&amp;gt; operational-studies:read &amp;amp; timetable:write
timetable:write --&amp;gt; timetable:read
classDef app fill:#333,color:white,font-style:italic
classDef builtin fill:#992233,color:white,font-style:bold
class stdcm,exploitation,infra,project,study,scenario app
class infra_read,infra_edit,infra_delete,project_create,study_delete,scenario_create,scenario_update builtin&lt;/pre>
&lt;h3 id="permissions">Permissions&lt;/h3>
&lt;p>Permission checks are done by the backend, even though the frontend may use the effective privilege level
of a user to decide whether to allow modifying / changing permissions for a given object.&lt;/p>
&lt;p>Permissions are checked per resource, after checking roles.
A single request may involve multiple resources, and as such involve multiple permission checks.&lt;/p>
&lt;p>Permission checks are performed as follows:&lt;/p>
&lt;ul>
&lt;li>for each request, before any resource is accessed, compute which resources need access and required privilege levels&lt;/li>
&lt;li>figure out, for the request&amp;rsquo;s user, its effective privilege level for every involved resource&lt;/li>
&lt;li>if the user&amp;rsquo;s privilege level does not meet expectations, raise an error &lt;strong>before any change is made&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EffectivePrivLvl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Owner&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// all operations allowed, including granting access and deleting the resource
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Writer&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// can change the resource
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Creator&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// can create new sub resources
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Reader&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// can read the resource
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MinimalMetadata&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// is indirectly aware that the resource exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[must_use]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">get_privlvl&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resource_pk&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">user&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">UserIdentity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">EffectivePrivLvl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The backend may therefore perform one or more privilege check per request:&lt;/p>
&lt;ul>
&lt;li>pathfinding:
&lt;ul>
&lt;li>&lt;code>Reader&lt;/code> on the infrastructure&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>displaying a timetable:
&lt;ul>
&lt;li>&lt;code>Reader&lt;/code> on each rolling stock&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>batch train creation:
&lt;ul>
&lt;li>&lt;code>Creator&lt;/code> on the timetable&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conflict detection:
&lt;ul>
&lt;li>&lt;code>Reader&lt;/code> on the infrastructure&lt;/li>
&lt;li>&lt;code>Reader&lt;/code> on the timetable&lt;/li>
&lt;li>&lt;code>Reader&lt;/code> on every involved rolling stock&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>simulation results:
&lt;ul>
&lt;li>&lt;code>Reader&lt;/code> on the infrastructure&lt;/li>
&lt;li>&lt;code>Reader&lt;/code> on the rolling stock&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>A grant is a right, given to a user or group on a specific resource.
Users get privileges through grants. There are two types of grants:&lt;/p>
&lt;ul>
&lt;li>explicit grants are explicitly attached to resources&lt;/li>
&lt;li>implicit grants automatically propagate explicit grants for objects which belong to a hierarchy:
&lt;ul>
&lt;li>if a subject owns a project, it also owns all studies and scenarios&lt;/li>
&lt;li>if a subject can read a scenario, it knows the parent study and project exist&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="explicit-grants">Explicit grants&lt;/h4>
&lt;ul>
&lt;li>can be edited from the frontend&lt;/li>
&lt;li>any user holding grants over a resource can add new ones&lt;/li>
&lt;li>when a resource is created, &lt;code>Owner&lt;/code> is granted to the current user&lt;/li>
&lt;li>not all objects type can have explicit grants: train schedule inherit their timetable&amp;rsquo;s grants&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">-- this type is the same as EffectivePrivLvl, except that MinimalMetadata is absent,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">-- as it cannot be granted directly. mere knowledge that an object exist can only be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">-- granted using implicit grants.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">grant_privlvl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">as&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">enum&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Owner&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Writer&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Creator&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Reader&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">-- this table is a template, which other grant tables are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">-- designed to be created from. it must be kept empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">table&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_template_grant&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">-- if subject is null, this grant applies to any subject
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">subject&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authn_subject&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cascade&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">grant_privlvl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">granted_by&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authn_user&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">granted_at&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">timestamp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">CURRENT_TIMESTAMP&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">-- these indices speed up cascade deletes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_template_grant&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">subject&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">index&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_template_grant&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">granted_by&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">-- create a new grant table for infrastructures
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">table&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_grant_EXAMPLE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">like&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_template_grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">including&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">all&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">bigint&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">references&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EXAMPLE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cascade&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">unique&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">nulls&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">distinct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resource&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">subject&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">-- raise an error if grants are inserted into the template
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_grant_insert_error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">RETURNS&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">trigger&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">AS&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#a40000">$&lt;/span>&lt;span style="color:#000">err$&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">BEGIN&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RAISE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">EXCEPTION&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;authz_grant is a template, which other grant &amp;#39;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#39;tables are designed to inherit from. it must be kept empty.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">END&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">$&lt;/span>&lt;span style="color:#000">err$&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">LANGUAGE&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">plpgsql&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">trigger&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">before&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">insert&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_template_grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">execute&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz_grant_insert_error&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="implicit-grants">Implicit grants&lt;/h4>
&lt;div class="alert alert-info" role="alert">
Implicit grants only apply to the operational studies module, &lt;strong>not&lt;/strong> timetables, infrastructures and rolling stocks.
&lt;/div>
&lt;p>Implicit grants propagate explicit grants to related objects. There are two types of implicit grants:&lt;/p>
&lt;ul>
&lt;li>explicit grants propagate downwards within hierarchies: &lt;code>Owner&lt;/code>, &lt;code>Reader&lt;/code>, &lt;code>Writer&lt;/code> propagate as is, &lt;code>Creator&lt;/code> is reduced to &lt;code>Reader&lt;/code>&lt;/li>
&lt;li>&lt;code>MinimalMetadata&lt;/code> propagates up within project hierarchies, so that read access to a study or scenario allows having the name and description of the parent project&lt;/li>
&lt;/ul>
&lt;p>The following objects have implicit grants:&lt;/p>
&lt;ul>
&lt;li>&lt;code>project&lt;/code> gets &lt;code>MinimalMetadata&lt;/code> if the user has any right on a child study or scenario&lt;/li>
&lt;li>&lt;code>study&lt;/code> gets:
&lt;ul>
&lt;li>&lt;code>MinimalMetadata&lt;/code> if the user has any right on a child scenario&lt;/li>
&lt;li>&lt;code>Owner&lt;/code>, &lt;code>Reader&lt;/code>, &lt;code>Writer&lt;/code> if the user has such right on the parent study. &lt;code>Creator&lt;/code> is reduced to &lt;code>Reader&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>scenario&lt;/code> gets &lt;code>Owner&lt;/code>, &lt;code>Reader&lt;/code>, &lt;code>Writer&lt;/code> if the user has such right on the parent study or project. &lt;code>Creator&lt;/code> is reduced to &lt;code>Reader&lt;/code>.&lt;/li>
&lt;li>&lt;code>train-schedule&lt;/code>s have the same grants as their timetable&lt;/li>
&lt;/ul>
&lt;h3 id="permission-meta-model">Permission meta-model&lt;/h3>
&lt;h4 id="get-the-privilege-level-of-the-current-user">Get the privilege level of the current user&lt;/h4>
&lt;pre tabindex="0">&lt;code>GET /authz/{resource_type}/{resource_id}/privlvl
&lt;/code>&lt;/pre>&lt;h4 id="get-all-grants-for-a-resource">Get all grants for a resource&lt;/h4>
&lt;pre tabindex="0">&lt;code>GET /authz/{resource_type}/{resource_id}/grants
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;subject&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;group&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;implicit_grant&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Owner&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;implicit_grant_source&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;project&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;subject&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;grant&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Writer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;subject&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;grant&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Writer&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;implicit_grant&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MinimalMetadata&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;implicit_grant_source&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;project&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Implicit grants cannot be edited, and are only displayed to inform the end user.&lt;/p>
&lt;h4 id="add-a-new-grant">Add a new grant&lt;/h4>
&lt;pre tabindex="0">&lt;code>POST /authz/{resource_type}/{resource_id}/grants
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;subject_id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;grant&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Writer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="change-a-grant">Change a grant&lt;/h4>
&lt;pre tabindex="0">&lt;code>PATCH /authz/{resource_type}/{resource_id}/grants/{grant_id}
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;grant&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Reader&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="revoke-a-grant">Revoke a grant&lt;/h4>
&lt;pre tabindex="0">&lt;code>DELETE /authz/{resource_type}/{resource_id}/grants/{grant_id}
&lt;/code>&lt;/pre>&lt;h2 id="implementation-plan">Implementation plan&lt;/h2>
&lt;h3 id="phase-1-ground-work">Phase 1: ground work&lt;/h3>
&lt;p>Back-end:&lt;/p>
&lt;ul>
&lt;li>pass the proper headers from the reverse proxy to editoast&lt;/li>
&lt;li>implement the authn / authz model into the database&lt;/li>
&lt;li>get / create users on the fly using reverse proxy headers&lt;/li>
&lt;li>implement the role parsing and book-keeping (it can be parsed on startup and leaked into a static lifetime)&lt;/li>
&lt;li>implement a proof of concept for roles using &lt;code>role:admin&lt;/code> and role management&lt;/li>
&lt;li>implement a proof of concept for permissions by implementing group management&lt;/li>
&lt;li>implement a middleware within editoast which:
&lt;ul>
&lt;li>attaches a UserInfo object to each request&lt;/li>
&lt;li>ensures that role / permission checks were performed. Implement two modules: log on missing check, abort on missing check.&lt;/li>
&lt;li>injects which checks were performed into response headers so it can be tested&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>introduce the concept of rolling stock collections to enable easier rolling stock permission checking&lt;/li>
&lt;li>write a migration guide to help OSRD developers navigate the authorization APIs&lt;/li>
&lt;/ul>
&lt;p>Front-end:&lt;/p>
&lt;ul>
&lt;li>take into account builtin roles to decide which features to unlock&lt;/li>
&lt;li>design, validate and build a permission editor&lt;/li>
&lt;li>prepare graceful handling of 403s&lt;/li>
&lt;/ul>
&lt;h3 id="phase-2-migration">Phase 2: migration&lt;/h3>
&lt;p>Back-end:&lt;/p>
&lt;ul>
&lt;li>incrementally migrate all endpoints, using the middleware to find missing checks&lt;/li>
&lt;li>switch the default action on missing permission check to abort&lt;/li>
&lt;/ul>
&lt;p>Front-end:&lt;/p>
&lt;ul>
&lt;li>add the permission editor to all relevant objects&lt;/li>
&lt;li>handle 403s, especially on scenarios, where read access on the timetable, infra, rolling stock collections and electrical profile is required&lt;/li>
&lt;/ul>
&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;h3 id="simultaneous-rbac-and-abac">Simultaneous RBAC and ABAC&lt;/h3>
&lt;p>RBAC: role based access control (users have roles, actions require roles)
ABAC: attribute based access control (resources have attributes, user + actions require attributes). ACLs are a kind of ABAC.&lt;/p>
&lt;p>After staring at what users asked for and established authorization models allow,
we figured out that while no one model is a good fit on its own:&lt;/p>
&lt;ul>
&lt;li>just RBAC would not allow fine grained, per object access control&lt;/li>
&lt;li>just ABAC would not allow guarding off access to entire features&lt;/li>
&lt;/ul>
&lt;p>We decided that each authorization model could be used where it shows its strength:&lt;/p>
&lt;ul>
&lt;li>RBAC is used to authorize access to frontend features and backend endpoints&lt;/li>
&lt;li>ABAC is used to authorize actions on specific objects&lt;/li>
&lt;/ul>
&lt;p>We found no success in our attempts to find a unifying model.&lt;/p>
&lt;h3 id="not-using-any-policy-language">Not using any policy language&lt;/h3>
&lt;p>At first, we assumed that using a policy language would assist with correctly implementing authorization. After further consideration, we concluded that:&lt;/p>
&lt;ul>
&lt;li>no user asked for policy flexibility nor policy as code, and there does not seem to be any obvious use case not already covered by RBAC + ABAC&lt;/li>
&lt;li>the main policy language considered, cedar, makes it very awkward to implement single pass RBAC + ABAC&lt;/li>
&lt;li>the primary benefit of policy languages, policy flexibility, is still very much constrained by the data the policy engine is fed: for OSRD,
feeding all grants, all users, all groups and all roles to the policy engine is not practical. we thus need filtering and careful modeling,
which almost guarantees changes will be required if a new authz rule type were to be requested by a customer. Worse yet, these changes seem
to require more effort than adapting the authz system if there were not policy language at all.&lt;/li>
&lt;li>as policy languages only deal with evaluating the policy, one can be introduced later if so desired&lt;/li>
&lt;/ul>
&lt;h3 id="no-implicit-grants-for-infra-timetable-and-rolling-stock">No implicit grants for infra, timetable and rolling stock&lt;/h3>
&lt;p>We felt like this feature would be hard to implement, and be likely to introduce confidentiality and performance issues:&lt;/p>
&lt;ul>
&lt;li>these objects may not be part of any operational studies, or multiple operational studies&lt;/li>
&lt;li>implicit grants are hard to implement, and risk introducing vulnerabilities&lt;/li>
&lt;li>infra, timetable and rolling stock are likely to be confidential&lt;/li>
&lt;/ul>
&lt;p>Instead, we plan to:&lt;/p>
&lt;ul>
&lt;li>delay implementing this feature until we figure out if the lack thereof is an UX issue&lt;/li>
&lt;li>if deemed required, implement it by checking, within the permission editor, whether all
users having access to a scenario can access associated data, and suggesting associated
permission changes&lt;/li>
&lt;/ul>
&lt;h3 id="all-resource-types-share-the-same-permission-management-endpoints">All resource types share the same permission management endpoints&lt;/h3>
&lt;p>We considered two patterns for permission management endpoints:&lt;/p>
&lt;ul>
&lt;li>a single set of endpoints for all resource types: &lt;code>/authz/{resource_type}/{resource_id}/grants/...&lt;/code>&lt;/li>
&lt;li>separate set of endpoints per resource type: &lt;code>/v2/infra/{infra_id}/grants/...&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>We found that:&lt;/p>
&lt;ul>
&lt;li>having separate set of endpoints per resource types brought extra back-end and front-end complexity&lt;/li>
&lt;li>the only constraint of unified permission management endpoints is that all resource types need globally unique IDs&lt;/li>
&lt;li>the globally unique ID constraint is less costly than the extra complexity of separate endpoints&lt;/li>
&lt;/ul>
&lt;h3 id="dynamically-enforce-permission-checks">Dynamically enforce permission checks&lt;/h3>
&lt;p>Ideally, there would be static checks enforcing permission checks.
However, we found no completely fool proof way to statically do so.&lt;/p>
&lt;p>Instead, we decided that all permission checks will be registered
with a middleware, which will either log or raise an error when a
handler performs no check.&lt;/p>
&lt;ul>
&lt;li>during local development, the middleware logs missing permission checks as errors&lt;/li>
&lt;li>during continuous integration checks and production deployments, the middleware aborts on missing checks&lt;/li>
&lt;/ul></description></item><item><title>Docs: Editoast error management</title><link>https://osrd.fr/en/docs/reference/design-docs/editoast-errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/editoast-errors/</guid><description>
&lt;h1 id="issues-of-the-old-system">Issues of the old system&lt;/h1>
&lt;ul>
&lt;li>Mix between internal errors and API errors&lt;/li>
&lt;li>Errors are converted into &lt;code>InternalError&lt;/code> early, which means that a caller of a function returning an &lt;code>editoast::Result&lt;/code> will have some trouble &lt;code>match&lt;/code>ing on the error returned
&lt;ul>
&lt;li>That means that it&amp;rsquo;s troublesome to add context to an existing error, or to wrap it into another higher-level one.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>We can&amp;rsquo;t track at compile-time which errors are returned by each function: that means that we don&amp;rsquo;t know for sure which errors an endpoint can return (without careful manual investigation at least&amp;hellip;)&lt;/li>
&lt;li>Consequently, we hardly can declare in the OpenApi file what errors an endpoint precisely returns, degrading the editoast API quality&lt;/li>
&lt;li>The frontend still requires editoast to declare all its errors though, to ensure they are translated properly. To achieve that we dynamically collect each &lt;code>EditoastError&lt;/code> using the crate &lt;code>inventory&lt;/code>. All the error descriptions collected are then transformed into OpenAPI schemas procedurally. On top of being a Rust antipattern (collecting state in proc-macros), this is complex to maintain on both editoast and frontend sides.
&lt;ul>
&lt;li>Not having each endpoint linked to the list of errors it can raise, also prevents the frontend easily handling errors properly.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It&amp;rsquo;s still unclear how we should expose errors from Core.&lt;/li>
&lt;/ul>
&lt;h1 id="goals">Goals&lt;/h1>
&lt;ul>
&lt;li>Have a clear separation between logically distinct errors.&lt;/li>
&lt;li>Dispose of a way to actually match on errors when they occur deeper in the stack&lt;/li>
&lt;li>Separate the error definition and their serialization.&lt;/li>
&lt;li>Establish how we want to forward Core&amp;rsquo;s errors.&lt;/li>
&lt;li>Tie the errors to the endpoint they originate from in the OpenAPI.&lt;/li>
&lt;/ul>
&lt;h1 id="constraints">Constraints&lt;/h1>
&lt;ul>
&lt;li>Keep the same error format (for backward compatibility reasons to avoid involving the frontend too much).
&lt;ul>
&lt;li>We must keep the &lt;code>editoast:&lt;/code> prefix in the error type.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The error must live until it is handled, conversion to our standard error format only happens in the response serialization.&lt;/li>
&lt;li>Errors must implement &lt;code>std::error::Error&lt;/code>.&lt;/li>
&lt;li>Errors must be composable. This will typically be handled by &lt;code>thiserror&lt;/code>&amp;rsquo;s &lt;code>#[from]&lt;/code> attribute.&lt;/li>
&lt;li>Error variants must be shareable to ensure the deduplication of error kinds. For example, let&amp;rsquo;s say we have two functions &lt;code>get_infra(id: usize)&lt;/code> and &lt;code>rename_infra(id: usize, name: String)&lt;/code>. Both functions error types have to include a variant describing the error case of an infrastructure not being found by its ID. However, we can&amp;rsquo;t duplicate something like &lt;code>InfraNotFound { id: usize }&lt;/code> in both error types as this leads to two different error paths describing the same error case. This is especially problematic for error translation keys. We need to be able to define an error &lt;code>InfraNotFound&lt;/code> and include it in both error types.
&lt;ul>
&lt;li>A unicity check may be performed in the post-processing of the OpenAPI file to ensure that each error has a unique error type.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Each endpoint must provide all its error cases in the OpenAPI. (How the frontend will consume them is another problem that we&amp;rsquo;ll have to deal with.)&lt;/li>
&lt;li>As for OSRD errors, the &lt;code>context&lt;/code> field of the error is populated in the views.&lt;/li>
&lt;li>Errors can be handled in a generic manner (for situations where it makes some sense to do so).
&lt;ul>
&lt;li>I.e.: some form of downcasting is available.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="new-system">New system&lt;/h1>
&lt;ul>
&lt;li>Rely on &lt;code>thiserror&lt;/code> everywhere.&lt;/li>
&lt;li>Keep the &lt;code>trait EditoastError&lt;/code> but only implement it for errors defined in &lt;code>views&lt;/code>.
&lt;ul>
&lt;li>Since it is only used in &lt;code>views&lt;/code> now, let&amp;rsquo;s rename it to &lt;code>trait ViewError&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Create a proc-macro &lt;code>derive(ViewError)&lt;/code> which interfaces with &lt;code>derive(thiserror::Error)&lt;/code>.&lt;/li>
&lt;li>The &lt;code>context&lt;/code> is empty by default but can be provided by the &lt;code>impl ViewError&lt;/code>. The macro is also able to take context providers.&lt;/li>
&lt;li>&lt;code>ViewError&lt;/code>&amp;rsquo;s &lt;code>#[source]&lt;/code>, &lt;code>#[from]&lt;/code>, &lt;code>source&lt;/code> and &lt;code>backtrace&lt;/code> fields are never serialized, unless explicitly provided. This shouldn&amp;rsquo;t be the case as it exposes editoast internals at the API level.&lt;/li>
&lt;li>&lt;code>impl&amp;lt;T: ViewError&amp;gt; utoipa::IntoResponses for T&lt;/code> (may be generated or inferred)&lt;/li>
&lt;li>Errors &lt;strong>should not&lt;/strong> implement &lt;code>Serialize&lt;/code> except for view errors (&lt;code>derive(ViewError)&lt;/code>) which generates an &lt;code>impl ViewError&lt;/code> used to serialize in the HTTP response.&lt;/li>
&lt;li>Error cases that will be used repeatedly are defined as a &lt;code>struct&lt;/code> but still &lt;code>derive(thiserror::Error)&lt;/code>.&lt;/li>
&lt;li>The &lt;code>error_type&lt;/code> of each variant is generated by the macro at the format &lt;code>ErrorTypeName::VariantName&lt;/code>, but can be provided explicitly if conflicts arise.
&lt;ul>
&lt;li>&lt;code>editoast:&lt;/code> will be prepended systematically to indicate the service that raised the error.&lt;/li>
&lt;li>Since this type is not guaranteed to be unique, we may implement a post-processing step to ensure errors with the same &lt;code>error_type&lt;/code> have the same OpenAPI schema.&lt;/li>
&lt;li>To ease the debugging process, an optional &lt;code>source_location&lt;/code> will be provided in &lt;code>ViewError&lt;/code>s containing a link to the GitHub file and line where the error is defined.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="nominal-case">Nominal case&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// in mod views;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">get_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>: &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GetError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">GetError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ID not found&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">IdNotFound&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;name not found&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NameNotFound&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">name&lt;/span>: &lt;span style="color:#204a87">String&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">process_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resource&lt;/span>: &lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Computation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ProcessingError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">ProcessingError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Resource is invalid&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InvalidResource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource&lt;/span>: &lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Resource is too old&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">OutdatedResource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource&lt;/span>: &lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[utoipa::path(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> ...,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> responses(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> (status = 200, body = Computation),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> EndpointError, // impl utoipa::IntoResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> )
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">endpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>: &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Computation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EndpointError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">get_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">process_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resource&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EndpointError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Resource not found&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// &amp;lt;=&amp;gt; status = 400
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ResourceNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GetError&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(internal)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// &amp;lt;=&amp;gt; status = 500, default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ProcessingFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ProcessingError&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="share-errors-between-crates">Share errors between crates&lt;/h2>
&lt;p>Since we require no other constraint that &lt;code>impl std::error::Error&lt;/code> for composition, it&amp;rsquo;s easy to nest errors using &lt;code>thiserror&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// in editoast_models
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;postgres error: {0}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">DbError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">diesel&lt;/span>::&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// in editoast_valkey (if we actually had that crate 👀)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;valkey error: {0}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">ValkeyError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">redis&lt;/span>::&lt;span style="color:#000">RedisError&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// in editoast_views, where diesel isn&amp;#39;t available
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;invalid resource form: {0}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">FormError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ResourceForm&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(name = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;CreateResourceError&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// schema name &amp;amp; error_type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">CreateError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;will be overridden, but still useful for development&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(internal, name = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Database&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Db&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DbError&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(transparent)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// shown to the user
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InvalidForm&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">FormError&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">create&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CreateError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">UpdateError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(internal)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Db&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DbError&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(internal)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Valkey&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ValkeyError&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(transparent)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InvalidForm&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">FormError&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">update&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">UpdateError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ease-composability">Ease composability&lt;/h2>
&lt;h3 id="nesting-viewerrors">Nesting &lt;code>ViewError&lt;/code>s&lt;/h3>
&lt;p>We composed errors by nesting them thanks to &lt;code>thiserror&lt;/code>. However, to compose and reuse &lt;code>EditoastErrors&lt;/code>, we need a special flag so that when we attempt to serialize the error, we return the serialization of the source error directly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;no such infra: {id}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(context, status = NOT_FOUND)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// accepts http::StatusCode associated constants
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">InfraNotFound&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;unauthorized&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(status = 401)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Unauthorized&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EndpointError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InfraNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Unauthorized&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Unauthorized&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;oh no&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="full-deriveviewerror-spec">Full &lt;code>derive(ViewError)&lt;/code> spec&lt;/h2>
&lt;p>The macro supports enums, named structs and tuple structs (fixme correct naming).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// not an EditoastError
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;wrong string: {0}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">WrongString&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// error_type = &amp;#34;InvalidInt&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// context = { value: number }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(ViewError, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;wrong int: {value}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user, name = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;InvalidInt&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">WrongInt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">value&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">i64&lt;/span> &lt;span style="color:#000;font-weight:bold">};&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(ViewError, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;my error type&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(context)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">MyError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// error_type = &amp;#34;MyError::InvalidString&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// context = { expected_format: string }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// #[view_error(internal)] by default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InvalidString&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">source&lt;/span>: &lt;span style="color:#000">WrongString&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">expected_format&lt;/span>: &lt;span style="color:#204a87">String&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// error_type = &amp;#34;MyError::InvalidInt&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// context = { value: number } (xyz is skipped as we forward the ViewError)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">WrongInt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">source&lt;/span>: &lt;span style="color:#000">WrongInt&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xyz&lt;/span>: &lt;span style="color:#204a87">String&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// error_type = &amp;#34;MyError::Bad&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// context = { &amp;#34;0&amp;#34;: string, &amp;#34;1&amp;#34;: number }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;user did a bad with {0} and {1}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user, name = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Bad&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Oops&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="providing-context">Providing &lt;code>context&lt;/code>&lt;/h3>
&lt;p>Context is computed just before the error is serialized in &lt;code>axum&lt;/code>&amp;rsquo;s error handler.&lt;/p>
&lt;p>Note: it shouldn&amp;rsquo;t be used in &lt;code>editoast&lt;/code> as we now have enums variants we can &lt;code>match&lt;/code> on. The &lt;code>context&lt;/code> response field is meant to provide data potentially useful to the frontend so that it may perform some kind of error recovery.&lt;/p>
&lt;p>&lt;code>derive(ViewError)&lt;/code> provides a few ways to set it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NoContext&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">because&lt;/span>: &lt;span style="color:#204a87">String&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// context = { }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user, context)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AllFieldsIntoContext&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">reasons&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// context = { &amp;#34;reasons&amp;#34;: [string] }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// select (and maybe rename) some fields to include to the context
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user, context(reason, recovery_id = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;recovery&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">))]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SomeFieldsIntoContext&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">reason&lt;/span>: &lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">recovery_id&lt;/span>: &lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">not_serializable&lt;/span>: &lt;span style="color:#000">mpsc&lt;/span>::&lt;span style="color:#000">Sender&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">not_wanted&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// context = { &amp;#34;reason&amp;#34;: string, &amp;#34;recovery&amp;#34;: string }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// with a provider function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(context_with = context_provider)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Variant1&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Variant2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">context_provider&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">error&lt;/span>: &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">HashMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">serde_json&lt;/span>::&lt;span style="color:#000">Value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about-core-errors">About Core errors&lt;/h3>
&lt;p>The Core service is a bit special as it already returns errors with the common OSRD format. Since editoast doesn&amp;rsquo;t really need to parse and recover from Core errors&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, we don&amp;rsquo;t need an exhaustive list of them. We still need to differentiate them from other editoast errors (let&amp;rsquo;s not start tossing &lt;code>InternalError&lt;/code> around again…) and to provide a key for the frontend to translate them.&lt;/p>
&lt;p>Core errors are then &amp;ldquo;lightly&amp;rdquo; wrapped: we keep the error as a generic &lt;code>serde_json::Value&lt;/code> that we include into a &lt;code>struct CoreError&lt;/code> that we can augment with additional information about the request. This way, the original is preserved, forwarded to the frontend, but fits our new error paradigm.&lt;/p>
&lt;p>&lt;code>CoreError&lt;/code> draft:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// in editoast_core
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">CoreError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// RabbitMQ &amp;#34;endpoint&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rpc&lt;/span>: &lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Request metadata
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">metadata&lt;/span>: &lt;span style="color:#000">HashMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// The original error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">error&lt;/span>: &lt;span style="color:#000">serde_json&lt;/span>::&lt;span style="color:#000">Value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: the &lt;code>error&lt;/code> field is kept as a &lt;code>serde_json::Value&lt;/code> and not parsed (even though its format is standard) as we&amp;rsquo;re not supposed to perform any kind of analysis or recovery on it. If we end up parsing it in the future, that means we need a stronger mapping between Core errors and what editoast expects. The red flag will be more obvious if we end up manipulating a JSON dict instead of a proper structure.&lt;/p>
&lt;h3 id="why-do-we-need-a-derive-macro">Why do we need a derive macro?&lt;/h3>
&lt;p>The main issue with our error system is that the types we manipulate do not serialize to the error format we want. For example, an error defined like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{cause}&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">MyError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cause&lt;/span>: &lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">fix&lt;/span>: &lt;span style="color:#204a87">String&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>shouldn&amp;rsquo;t be serialized as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;cause&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Emperor Zurg&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;fix&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Buzz Lightyear&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>like &lt;code>serde::Serialize&lt;/code> would do, but as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;error_type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;editoast:MyError&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Emperor Zurg&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;context&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;cause&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Emperor Zurg&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;fix&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Buzz Lightyear&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>making &lt;code>derive(serde::Serialize)&lt;/code> basically useless for our errors. On top of that, since by design the derive macros of &lt;code>utoipa&lt;/code> (&lt;code>ToSchema&lt;/code>, &lt;code>IntoResponse&lt;/code> especially) interpret the type structure like &lt;code>derive(serde::Serialize)&lt;/code> would do, we can&amp;rsquo;t rely on them either. Therefore we need a custom derive macro to convey the structural information of the type at runtime, while still allowing a custom &lt;code>Serialize&lt;/code> and &lt;code>IntoResponse&lt;/code> implementations.&lt;/p>
&lt;p>Another solution would be to shift our error definition paradigm and orient ourselves to a system without code generation (probably using a combination of traits and builders). This would imply to rewrite all our errors and their handling, which is costly 🤑🫰. We&amp;rsquo;d also have to get rid of the convenience of &lt;code>thiserror&lt;/code>, a huge loss in terms of ergonomics. And that would break the consistency with the other sub-crates of editoast.&lt;/p>
&lt;p>The macro doesn&amp;rsquo;t even have to be overly complex. The &lt;code>trait ViewError&lt;/code> could be responsible of translating the static type definition into an associated constant, which would be used to compute data produced at runtime. (Ie. &lt;code>impl axum::IntoResponse for T: ViewError&lt;/code> and &lt;code>impl utoipa::IntoResponses for T: ViewError&lt;/code>.) This would reduce the amount of generated code, at the expense of more complex data manipulation at runtime.&lt;/p>
&lt;p>Going this deep into the implementation is not the goal of this document: the best way to do things will be decided when the migration work will start.&lt;/p>
&lt;h2 id="implementation-plan">Implementation plan&lt;/h2>
&lt;p>We&amp;rsquo;ll need a progressive migration as this implies too much change to fit in a single PR. &lt;code>EditoastError&lt;/code> and &lt;code>ViewError&lt;/code> will have to cohabit for some time.&lt;/p>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;ol>
&lt;li>Create the &lt;code>trait views::ViewError&lt;/code>&lt;/li>
&lt;li>Implement an &lt;code>axum::IntoResponse&lt;/code> for &lt;code>ViewError&lt;/code> to generate a standard OSRD error response payload&lt;/li>
&lt;li>Add a post-processing step to the OpenAPI generation to ensure the consistency of error status codes. More details below.&lt;/li>
&lt;li>Create a derive macro &lt;code>ViewError&lt;/code> that interfaces with &lt;code>thiserror::Error&lt;/code> API and generates &lt;em>at least&lt;/em> &lt;code>impl ViewError&lt;/code>&lt;/li>
&lt;li>The macro may generate an &lt;code>impl utoipa::IntoResponses&lt;/code> that tells &lt;code>utoipa&lt;/code> what to expect in the response payloads. This trait may be auto-implemented for each &lt;code>ViewError&lt;/code> type (we&amp;rsquo;ll see how things go in the implementation).&lt;/li>
&lt;li>We&amp;rsquo;ll have to change the frontend error keys collection script almost entirely by the end of this migration. We could update it to also look for errors in the OpenAPI routes response section but that&amp;rsquo;s extra work which brings little benefits. We accept a temporary desync of the error keys while this migration is ongoing.&lt;/li>
&lt;/ol>
&lt;h3 id="migration">Migration&lt;/h3>
&lt;p>The easier way to proceed here would be, to start by converting simple errors that occur deep in the stack (such as Postgres errors, Valkey errors, Core errors, etc.). This way, we can rely on the Rust compiler to guide us through the process and ensure we don&amp;rsquo;t forget any error. We&amp;rsquo;ll need some kind of adapters to incorporate these errors into &lt;code>EditoastError&lt;/code>s. We may find a generic way to do that, but that&amp;rsquo;s more an implementation detail, especially since that would be temporary.&lt;/p>
&lt;p>A good starting place would be &lt;code>editoast_search&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> because its internal errors do not implement &lt;code>EditoastError&lt;/code> already. Valkey errors may also be a decent candidate.&lt;/p>
&lt;p>One large change that will have to be atomic will be the adaptation of &lt;code>Model&lt;/code>&amp;rsquo;s errors&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="wrapping-up-things">Wrapping up things&lt;/h3>
&lt;p>Eventually, when all errors are converted and views errors are attached to their endpoint(s) in the OpenAPI, we&amp;rsquo;ll have to:&lt;/p>
&lt;ol>
&lt;li>Remove &lt;code>trait EditoastError&lt;/code>, &lt;code>derive(EditoastError)&lt;/code> and &lt;code>struct InternalError&lt;/code> (at least its former version as the name may be reused in a different scope)&lt;/li>
&lt;li>Adapt the frontend error keys collection script to look for errors in the OpenAPI routes response section instead of &lt;code>components/schemas&lt;/code>&lt;/li>
&lt;li>(Out of scope) Discuss with the frontend the level of visibility about internal errors we want to give the user&lt;/li>
&lt;/ol>
&lt;h2 id="rejected-ideas">Rejected ideas&lt;/h2>
&lt;h3 id="anonymous-enums">Anonymous enums&lt;/h3>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>Rejected because it wouldn&amp;rsquo;t be trivial to implement the multiple &lt;code>From&amp;lt;T, U, ..&amp;gt; for EnumX&amp;lt;T, U, ..&amp;gt;&lt;/code> without negative type parameters or the fallback type (unstable). That&amp;rsquo;s necessary to make the &lt;code>EnumX&lt;/code> usage transparent and avoid using &lt;code>T1&lt;/code>, &amp;hellip;, &lt;code>Tn&lt;/code> variants explicitly. The crate &lt;code>anon_enum&lt;/code> deals with this issue by not providing the feature, so it won&amp;rsquo;t help either.&lt;/p>
&lt;/div>
&lt;p>Since we now have to really manage errors happening in every function &lt;strong>as precisely as possible&lt;/strong>, there will likely be a lot of error enums going around. This may be a hassle and wrongfully encourage returning &lt;code>Option&lt;/code> as an error. To circumvent that, an easy (albeit opinionated) QoL feature would be to use anonymous enums.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">get_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Enum3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DbError&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ValkeyError&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MissingResourceError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">process_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resource&lt;/span>: &lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Computation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Enum2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DbError&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ProcessingError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[utoipa::path(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> ...,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> responses(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> (status = 200, body = Computation),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> (status = 400, body = EndpointError)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> )
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">endpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>: &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Computation&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EndpointError&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">get_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">process_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resource&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Debug, thiserror::Error, ViewError)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EndpointError&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Db&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DbError&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Valkey&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ValkeyError&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(transparent)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Missing&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MissingResourceError&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[error(transparent)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[view_error(user)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Processing&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[from]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ProcessingError&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The implementation of the &lt;code>EnumX&lt;/code> type would be rather easy to generate for many tuple sizes. The crate &lt;a href="https://docs.rs/anon_enum/1.1.0/anon_enum/">anon_enum&lt;/a> exists but if we choose to use this pattern, it&amp;rsquo;s probably better to have our own type for greater flexibility and avoid another dependency.&lt;/p>
&lt;h3 id="incident-reports">Incident reports&lt;/h3>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>Rejected because it would be another mechanism to maintain with little benefits: errors are already persisted using opentelemetry, and for &amp;ldquo;internal server errors&amp;rdquo;, it&amp;rsquo;s up to the frontend to choose how much details is shown to the user.&lt;/p>
&lt;/div>
&lt;p>For &lt;code>internal&lt;/code> errors that won&amp;rsquo;t contain meaningful information for the end user, we substitute the error by:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;error_type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;InternalError&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;a meaningful message&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;context&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;incident&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;uuid&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to be able to find and investigate the error later on, we associate to each &lt;code>5xx&lt;/code> error a unique &lt;code>incident&lt;/code> identifier. At first we&amp;rsquo;ll just log the incident with:&lt;/p>
&lt;ul>
&lt;li>the error message&lt;/li>
&lt;li>the error &lt;code>Debug&lt;/code> representation&lt;/li>
&lt;li>the backtrace(s), if any&lt;/li>
&lt;/ul>
&lt;p>The log entry will be persisted in datadog/jaeger so it&amp;rsquo;s probably good enough at first.&lt;/p>
&lt;p>It&amp;rsquo;s useful in development to have the real error shown in the interface instead of just &amp;ldquo;Internal error&amp;rdquo;. We can set an environment variable &lt;code>OSRD_DEV=1&lt;/code> to avoid replacing the error in the &lt;code>axum&lt;/code> handler.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Core errors will likely never be recoverable from either editoast or the frontend. For the latter, such errors are likely to be displayed as a generic &amp;ldquo;Internal error&amp;rdquo; message. So no translation is needed. For these reasons, we don&amp;rsquo;t need to pass them in the OpenAPI. However, if in the future, we want editoast to actually parse Core errors, ensuring a proper mapping will still be possible.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Provided we start this migration before the rewrite of the search engine.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>This work has already started at the time of writing.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Docs: Scalable async RPC</title><link>https://osrd.fr/en/docs/reference/design-docs/scalable-async-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/scalable-async-rpc/</guid><description>
&lt;p>TODO: create another document describing RPC interactions between core and editoast&lt;/p>
&lt;h2 id="context-and-requirements">Context and requirements&lt;/h2>
&lt;p>Without this proposal, editoast directly makes calls to core using http.
Using k8s, if multiple core workers are started, requests are randomly
distributed to core workers.&lt;/p>
&lt;p>This architecture brings a number of issues:&lt;/p>
&lt;ul>
&lt;li>To respond to a request, the core worker need to hold the request&amp;rsquo;s full infrastructure in memory.
Workers do not have enough memory to hold all infrastructures in memory.
Requests thus need to be routed to core workers specialized by infrastructure, which cannot be easily done using http.&lt;/li>
&lt;li>If too many requests are dispatched to a busy core worker, they will just time out.&lt;/li>
&lt;li>There is no easy way to scale up the number of workers to react to increased load.&lt;/li>
&lt;li>Because calls need to complete within the timeout of the client&amp;rsquo;s http requests,
the system falls apart when latency increases due to load.&lt;/li>
&lt;/ul>
&lt;p>This proposal intends to address these issues by introducing an RPC system which:&lt;/p>
&lt;ul>
&lt;li>manages &lt;a href="#worker-key">specialized&lt;/a> workers&lt;/li>
&lt;li>automatically scales specialized workers&lt;/li>
&lt;/ul>
&lt;h3 id="goals">Goals&lt;/h3>
&lt;ul>
&lt;li>&lt;code>high priority&lt;/code> the RPC protocol between editoast and core should be the same for development and production setups&lt;/li>
&lt;li>&lt;code>high priority&lt;/code> requests are dispatched to specialized workers&lt;/li>
&lt;li>&lt;code>high priority&lt;/code> the RPC system should be stateless and failure-resilient&lt;/li>
&lt;li>&lt;code>low priority&lt;/code> the complexity of the local development setup should not increase&lt;/li>
&lt;/ul>
&lt;h3 id="non-goals">Non-goals&lt;/h3>
&lt;ul>
&lt;li>&lt;code>not a goal&lt;/code> streaming events to the front-end&lt;/li>
&lt;li>&lt;code>not a goal&lt;/code> reliable response processing&lt;/li>
&lt;li>&lt;code>not a goal&lt;/code> caching&lt;/li>
&lt;/ul>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;pre class="mermaid">flowchart TD
client
osrdyne
worker-pool
worker-group
worker-group-queue
worker
worker-pool -- contains --&amp;gt; worker-group
worker-group -- contains and manages --&amp;gt; worker
client -- pub --&amp;gt; worker-group-queue
worker-group -- has a --&amp;gt; worker-group-queue
worker -- sub --&amp;gt; worker-group-queue
osrdyne -- manages --&amp;gt; worker-pool
osrdyne -- manages --&amp;gt; worker-group
osrdyne -- manages --&amp;gt; worker-group-queue&lt;/pre>
&lt;h3 id="client">Client&lt;/h3>
&lt;p>Clients submit RPC &lt;a href="#client-protocol">requests&lt;/a> to the message queue. RPC requests are published using AMQP 0.9.1.&lt;/p>
&lt;p>For example, &lt;code>editoast&lt;/code> would be a client.&lt;/p>
&lt;h3 id="worker-key">Worker key&lt;/h3>
&lt;p>Every submitted request includes a requested &lt;code>worker-key&lt;/code>, as the message&amp;rsquo;s &lt;code>routing-key&lt;/code>.&lt;/p>
&lt;p>&lt;strong>The key is what identifies which worker group will process the request&lt;/strong>.&lt;/p>
&lt;p>Workers known their worker key at startup. All workers in a worker group have the same worker key.
It is an arbitrary utf-8 string set by the client, whose meaning is not defined by the RPC protocol:&lt;/p>
&lt;ul>
&lt;li>It could just be a way to have separate processing queues. In this case, workers may not care about what their is.&lt;/li>
&lt;li>There could be an extra layer of protocol between client and worker about how the key is meant to be interpreted&lt;/li>
&lt;/ul>
&lt;p>Here are some &lt;strong>examples&lt;/strong> of how such protocols may work:&lt;/p>
&lt;ul>
&lt;li>it could be the identifier of a resource to act upon: &lt;code>42&lt;/code>&lt;/li>
&lt;li>it could be the identifiers of multiple resources: &lt;code>infra=42,timetable=24&lt;/code>&lt;/li>
&lt;li>it could even be, even though that&amp;rsquo;s probably &lt;strong>not a good idea&lt;/strong>, random worker settings:
&lt;code>log_level=debug&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="worker-pools">Worker pools&lt;/h3>
&lt;p>Worker pools are collections of workers of the same type, which can be specialized by key.
osrdyne creates an exchange for each worker pool, where clients can submit requests.&lt;/p>
&lt;p>For example, &lt;code>core&lt;/code> would be a worker pool.&lt;/p>
&lt;h3 id="worker-group">Worker group&lt;/h3>
&lt;p>Worker groups are collections of workers of the same pool and key, processing messages from the same queue.
&lt;strong>Worker groups are responsible for scaling the number of workers depending on queue length and processing rate.&lt;/strong>&lt;/p>
&lt;p>Worker groups are managed by osrdyne. osrdyne should support multiple worker group drivers:&lt;/p>
&lt;ul>
&lt;li>a &lt;a href="https://keda.sh">keda&lt;/a> k8s driver&lt;/li>
&lt;li>a k8s autoscaler driver&lt;/li>
&lt;li>a docker driver&lt;/li>
&lt;li>a subprocess driver, where a single worker is started as a subprocess for each worker group&lt;/li>
&lt;li>a systemd template unit driver&lt;/li>
&lt;li>a noop driver, where workers have to be started manually&lt;/li>
&lt;/ul>
&lt;p>For example, each &lt;code>core&lt;/code> worker group handles a given infrastructure.&lt;/p>
&lt;h3 id="worker">Worker&lt;/h3>
&lt;p>A worker is a server processing requests from its worker group queue. Worker have a key.
For example, &lt;code>core&lt;/code> workers are keyed by infrastructure.&lt;/p>
&lt;h3 id="osrdyne">osrdyne&lt;/h3>
&lt;ul>
&lt;li>manages all exchanges, policies, queues and bindings&lt;/li>
&lt;li>starts and stops worker groups as needed&lt;/li>
&lt;li>generates error responses if the worker group fails to respond&lt;/li>
&lt;/ul>
&lt;p>Each osrdyne instance manages a worker pool. See the &lt;a href="#osrdyne-architecture">dedicated section&lt;/a>.&lt;/p>
&lt;h2 id="rpc-protocol">RPC protocol&lt;/h2>
&lt;h3 id="client-protocol">Client protocol&lt;/h3>
&lt;p>Requests are submitted using AMQP 0.9.1&amp;rsquo;s &lt;code>basic.publish&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exchange&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-pools">worker pool&lt;/a> identifier&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>routing-key&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-key">requested key&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>correlation-id&lt;/code>&lt;/td>
&lt;td>an optional request id. The response will copy this field.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reply-to&lt;/code> property&lt;/td>
&lt;td>optional response queue&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mandatory&lt;/code>&lt;/td>
&lt;td>&lt;code>true&lt;/code> to ensure an error is returned if the message cannot be routed&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The body of the request will be dispatched to a worker of the requested pool and key.
The request is guaranteed to be dispatched &lt;strong>at least once&lt;/strong>&lt;/p>
&lt;p>The response format is as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>correlation-id&lt;/code>&lt;/td>
&lt;td>the correlation ID from the request&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x-status&lt;/code> property&lt;/td>
&lt;td>either &lt;code>ok&lt;/code>, &lt;a href="https://www.rabbitmq.com/docs/dlx#effects">or the reason for dead lettering&lt;/a>, taken from the request&amp;rsquo;s &lt;code>x-first-death-reason&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>body&lt;/td>
&lt;td>optional response data&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="worker-protocol">Worker protocol&lt;/h3>
&lt;p>When starting workers, the worker group driver provides:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Variable name&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>WORKER_ID&lt;/code>&lt;/td>
&lt;td>a unique identifier for this worker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_KEY&lt;/code>&lt;/td>
&lt;td>the &lt;a href="#worker-key">worker key&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_POOL&lt;/code>&lt;/td>
&lt;td>the name of the worker pool&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_REQUESTS_QUEUE&lt;/code>&lt;/td>
&lt;td>the queue to consume work from&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_ACTIVITY_EXCHANGE&lt;/code>&lt;/td>
&lt;td>the exchange to publish events to&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Workers then have to:&lt;/p>
&lt;ul>
&lt;li>publish a &lt;code>started&lt;/code> &lt;a href="#worker-activity-reports">activity report message&lt;/a>&lt;/li>
&lt;li>subscribe to &lt;code>WORKER_REQUESTS_QUEUE&lt;/code> using &lt;code>basic.consume&lt;/code>&lt;/li>
&lt;li>for each request message:
&lt;ul>
&lt;li>publish a &lt;code>request-received&lt;/code> &lt;a href="#worker-activity-reports">activity report message&lt;/a>&lt;/li>
&lt;li>if the worker cannot process the request, it can request a requeue using &lt;code>basic.reject&lt;/code> with &lt;code>requeue=true&lt;/code>&lt;/li>
&lt;li>build and publish a response to the &lt;a href="https://www.rabbitmq.com/tutorials/amqp-concepts#exchange-default">default exchange&lt;/a>&lt;/li>
&lt;li>&lt;code>basic.ack&lt;/code> the request&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="worker-response-protocol">Worker response protocol&lt;/h4>
&lt;p>Responses are submitted using AMQP 0.9.1&amp;rsquo;s &lt;code>basic.publish&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exchange&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-pools">worker pool&lt;/a> identifier&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>routing-key&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-key">requested key&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reply-to&lt;/code> property&lt;/td>
&lt;td>optional response queue&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="worker-activity-reports">Worker activity reports&lt;/h4>
&lt;p>Workers report the following activity events:&lt;/p>
&lt;ul>
&lt;li>&lt;code>started&lt;/code>: the worker is about to start processing requests&lt;/li>
&lt;li>&lt;code>request-received&lt;/code>: a request was received&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exchange&lt;/code>&lt;/td>
&lt;td>&lt;code>WORKER_ACTIVITY_EXCHANGE&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>routing-key&lt;/code>&lt;/td>
&lt;td>&lt;code>WORKER_KEY&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x-event&lt;/code> property&lt;/td>
&lt;td>the event type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="message-passing-architecture">Message passing architecture&lt;/h2>
&lt;p>&lt;img src="message-passing-architecture.svg" alt="Message passing architecture">&lt;/p>
&lt;p>For a full reference of all exchanges and queues, see the &lt;a href="#exchange-and-queues">exchanges and queues&lt;/a> section&lt;/p>
&lt;h2 id="message-lifetime">Message lifetime&lt;/h2>
&lt;pre class="mermaid">flowchart TD
received
processed
received --&amp;gt; requests
received -- alternate exchange --&amp;gt; orphans
orphans -- controller starts worker group --&amp;gt; requests
requests -- dead letter --&amp;gt; dlx
dlx -- controller generates error --&amp;gt; processed
requests -- worker responds --&amp;gt; processed&lt;/pre>
&lt;h2 id="service-architecture">Service architecture&lt;/h2>
&lt;pre class="mermaid">flowchart TD
client
subgraph RPC layer
rabbitmq[RabbitMQ]
osrdyne[osrdyne]
end
subgraph worker-group[worker group]
worker
end
client -- enqueues --&amp;gt; rabbitmq
osrdyne -- sub orphan messages --&amp;gt; rabbitmq
osrdyne -- manages queues --&amp;gt; rabbitmq
osrdyne -- starts and stops --&amp;gt; worker-group
osrdyne -- sub activity events --&amp;gt; rabbitmq
worker -- sub requests --&amp;gt; rabbitmq
worker -- pub responses --&amp;gt; rabbitmq
worker -- pub activity events --&amp;gt; rabbitmq&lt;/pre>
&lt;ul>
&lt;li>&lt;code>osrdyne&lt;/code> stops and starts worker groups following demand&lt;/li>
&lt;li>&lt;code>worker&lt;/code> processes requests dequeued from rabbitmq&lt;/li>
&lt;/ul>
&lt;h2 id="life-of-an-rpc-call">Life of an RPC call&lt;/h2>
&lt;p>In this example:&lt;/p>
&lt;ul>
&lt;li>&lt;code>editoast&lt;/code> is the client&lt;/li>
&lt;li>it makes a request to the &lt;code>core&lt;/code> worker pool&lt;/li>
&lt;li>the &lt;code>core&lt;/code> worker pool is keyed on infrastructures&lt;/li>
&lt;/ul>
&lt;h3 id="fast-path">Fast path&lt;/h3>
&lt;ul>
&lt;li>Editoast publishes a request message to &lt;code>exchange=core&lt;/code> with &lt;code>routing_key=42&lt;/code>. If the message expects a reply, &lt;code>reply-to&lt;/code> is set.&lt;/li>
&lt;li>If the &lt;code>core&lt;/code> exchange already has binding for worker group &lt;code>42&lt;/code>, a worker picks up the request&lt;/li>
&lt;li>The worker processes the request, and uses the &lt;code>reply-to&lt;/code> field to submit a response.&lt;/li>
&lt;li>The worker ACKs the request.&lt;/li>
&lt;/ul>
&lt;h3 id="worker-group-startup">Worker group startup&lt;/h3>
&lt;p>These steps only occur if the worker group / queue has not yet started:&lt;/p>
&lt;ul>
&lt;li>If there is no queue bound to routing key &lt;code>42&lt;/code>, the message is routed to the &lt;code>core-orphan-xchg&lt;/code> exchange.
This exchange is a fanout exchange with a single queue, where &lt;code>osrdyne&lt;/code> processes messages.&lt;/li>
&lt;li>&lt;code>osrdyne&lt;/code> processes the message:
&lt;ul>
&lt;li>creates queue &lt;code>core-req-42&lt;/code>, binds it to the &lt;code>core&lt;/code> exchange on routing key &lt;code>42&lt;/code>&lt;/li>
&lt;li>forward the message to exchange &lt;code>core&lt;/code>&lt;/li>
&lt;li>ACK the original message once the original is forwarded&lt;/li>
&lt;li>start worker group &lt;code>core&lt;/code> key &lt;code>42&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>the worker group starts up and processes the request&lt;/li>
&lt;/ul>
&lt;h2 id="osrdyne-architecture">osrdyne architecture&lt;/h2>
&lt;pre class="mermaid">flowchart TD
%% inputs
activity-queue([activity queue])
orphan-queue([orphan queue])
dead-letter-queue([dead letter queue])
rabbitmq-api[RabbitMQ HTTP API]
%% components
orphan-processor[orphan processor]
dead-letter-responder[dead letter responder]
subgraph pool manager
pool-state-tracker[pool state tracker]
wgs-control-loop[worker groups control loop]
req-queues-control-loop[request queues control loop]
end
wg-driver[worker group driver]
%% outputs
request-xchg([request exchange])
poison-inventory([poison request inventory])
response([response queue])
%% relations
dead-letter-queue -- sub --&amp;gt; dead-letter-responder --&amp;gt; response &amp;amp; poison-inventory
orphan-queue -- sub --&amp;gt; orphan-processor -- forward --&amp;gt; request-xchg
orphan-processor -- request worker group start --&amp;gt; pool-state-tracker
orphan-processor -- wait for execution --&amp;gt; req-queues-control-loop
rabbitmq-api -- initial queue list --&amp;gt; pool-state-tracker
activity-queue -- worker activity --&amp;gt; pool-state-tracker
pool-state-tracker -- expected state --&amp;gt; wgs-control-loop &amp;amp; req-queues-control-loop
wgs-control-loop -- start / stop --&amp;gt; wg-driver&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>the &lt;strong>pool manager&lt;/strong> is the most complex component of osrdyne. It is in charge of creating,
deleting request queues, and deciding which worker groups should be running at any given time. To make such decisions, it needs:&lt;/p>
&lt;ul>
&lt;li>the ability to list existing queues at startup, which is done using the RabbitMQ HTTP API&lt;/li>
&lt;li>worker activity events, to know which queues are active&lt;/li>
&lt;li>queue creation commands from the orphan processor&lt;/li>
&lt;/ul>
&lt;p>The pool manager runs two control loops:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>worker groups control loop&lt;/strong> starts and stops worker groups using the &lt;strong>worker group driver&lt;/strong>&lt;/li>
&lt;li>the &lt;strong>request queues control loop&lt;/strong> creates and deletes request queues&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>the &lt;strong>orphan processor&lt;/strong> reacts to orphan messages by sending worker group start commands to the worker group manager&lt;/p>
&lt;/li>
&lt;li>
&lt;p>the &lt;strong>dead letter responder&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>responds errors to dead lettered messages following the &lt;a href="#worker-protocol">worker protocol&lt;/a>&lt;/li>
&lt;li>if a message is deemed to have caused repeated worker crashes, publish to the poison inventory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>On worker pool startup:&lt;/p>
&lt;ul>
&lt;li>create and bind all &lt;a href="#exchanges-and-queues">exchanges and queues&lt;/a>&lt;/li>
&lt;li>configure the TTL, delivery timeout and delivery limit policies using the HTTP API&lt;/li>
&lt;li>start the &lt;strong>orphan processor&lt;/strong>, &lt;strong>dead letter responder&lt;/strong> and &lt;strong>worker group manager&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="exchanges-and-queues">Exchanges and queues&lt;/h3>
&lt;p>osrdyne creates a number of exchanges and queues. Most of the setup is done
per worker pool, except for worker group request queues.&lt;/p>
&lt;p>Worker pool exchanges:&lt;/p>
&lt;ul>
&lt;li>pool requests exchange &lt;code>{pool}-req-xchg&lt;/code>, type &lt;code>direct&lt;/code>:
&lt;ul>
&lt;li>alternate exchange is &lt;code>{pool}-orphan-xchg&lt;/code>&lt;/li>
&lt;li>dead letter exchange is &lt;code>{pool}-dl-xchg&lt;/code>&lt;/li>
&lt;li>worker group request queues are bound to this exchange&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>orphan exchange &lt;code>{pool}-orphan-xchg&lt;/code>, type &lt;code>fanout&lt;/code>&lt;/li>
&lt;li>dead letter exchange &lt;code>{pool}-dl-xchg&lt;/code>, type &lt;code>fanout&lt;/code>&lt;/li>
&lt;li>activity queue &lt;code>{pool}-activity-xchg&lt;/code>, type &lt;code>fanout&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Worker pool queues:&lt;/p>
&lt;ul>
&lt;li>dead letter queue &lt;code>{pool}-dl&lt;/code>, bound to &lt;code>{pool}-dl-xchg&lt;/code> (&lt;strong>exclusive&lt;/strong>)&lt;/li>
&lt;li>orphan queue &lt;code>{pool}-orphan&lt;/code>, bound to &lt;code>{pool}-orphan-xchg&lt;/code> (&lt;strong>exclusive&lt;/strong>)&lt;/li>
&lt;li>worker activity queue &lt;code>{pool}-activity&lt;/code>, bound to &lt;code>{pool}-activity-xchg&lt;/code>&lt;/li>
&lt;li>poison queue &lt;code>{pool}-poison&lt;/code>. Used to collect messages which could not be processed, supposedly due to worker crash&lt;/li>
&lt;/ul>
&lt;p>Worker group queues:&lt;/p>
&lt;ul>
&lt;li>request queue &lt;code>{pool}-req-{key}&lt;/code>, bound by key to &lt;code>{pool}-req-xchg&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="worker-group-manager">Worker group manager&lt;/h3>
&lt;p>The worker group manager has three internal components:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>pool state tracker&lt;/strong> tracks the expected status of worker groups&lt;/li>
&lt;li>the &lt;strong>request queues control loop&lt;/strong> applies changes to worker group request queues&lt;/li>
&lt;li>the &lt;strong>worker groups control loop&lt;/strong> applies changes to worker groups&lt;/li>
&lt;/ul>
&lt;p>The state tracker assigns a 64 bit generation identifier to each expected state.
The two control loops report the last synchronized state.&lt;/p>
&lt;p>When the orphan processor wants to start a worker group, it has to:&lt;/p>
&lt;ul>
&lt;li>tell the &lt;strong>state tracker&lt;/strong>, which gives a generation identifier for the new expected state&lt;/li>
&lt;li>wait until the &lt;strong>request queue control loop&lt;/strong> has caught up to this generation &lt;strong>and&lt;/strong> has
created the queue (which may be delayed due to networking issues)&lt;/li>
&lt;/ul>
&lt;h4 id="pool-state-tracker">Pool state tracker&lt;/h4>
&lt;pre class="mermaid">stateDiagram-v2
Inactive --&amp;gt; Active: received request
Active --&amp;gt; Unbound: unbind delay elapsed
Unbound --&amp;gt; Inactive: stop delay elapsed
Unbound --&amp;gt; Active: received request&lt;/pre>
&lt;p>Two time constants govern how the expected state of worker groups evolves:&lt;/p>
&lt;ul>
&lt;li>&lt;code>UNBIND_DELAY&lt;/code> delay until the queue transitions from &lt;code>Active&lt;/code> to &lt;code>Unbound&lt;/code>&lt;/li>
&lt;li>&lt;code>STOP_DELAY&lt;/code> delay until the worker group is stopped&lt;/li>
&lt;/ul>
&lt;p>The state tracker has the following API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Active&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Unbound&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">PoolState&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">generation&lt;/span>: &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">wgs&lt;/span>: &lt;span style="color:#000">im&lt;/span>::&lt;span style="color:#000">OrdMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PoolStateTracker&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">initial_worker_groups&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Require some worker group to be active. The extra lifetime adds active duration compared to the configured spool down schedule.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// This allows the worker activity processor to debounce activity events without lowering the active time of worker groups.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Returns the state generation where this worker group starts being active.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">require_worker_group&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">key&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">str&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">extra_lifetime&lt;/span>: &lt;span style="color:#000">Duration&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Subscribe to a stream of target pool state updates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">tokio&lt;/span>::&lt;span style="color:#000">sync&lt;/span>::&lt;span style="color:#000">watch&lt;/span>::&lt;span style="color:#000">Receiver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PoolState&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="request-queues-control-loop">Request queues control loop&lt;/h3>
&lt;p>The request queue control loop takes care of creating, binding, unbinding and stopping request queues.
It subscribes to the pool state tracker, and reacts to state changes.&lt;/p>
&lt;p>It exposes the following API, which is used by the orphan processor to wait for updates to propagate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">ReqQueueStatus&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">expected&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">actual&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">ReqQueuesState&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">generation&lt;/span>: &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">queues&lt;/span>: &lt;span style="color:#000">im&lt;/span>::&lt;span style="color:#000">OrdMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ReqQueueStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RequestQueueControlLoop&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">target&lt;/span>: &lt;span style="color:#000">tokio&lt;/span>::&lt;span style="color:#000">sync&lt;/span>::&lt;span style="color:#000">watch&lt;/span>::&lt;span style="color:#000">Receiver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PoolState&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">tokio&lt;/span>::&lt;span style="color:#000">sync&lt;/span>::&lt;span style="color:#000">watch&lt;/span>::&lt;span style="color:#000">Receiver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ReqQueuesState&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>it runs the following control loop:&lt;/p>
&lt;ul>
&lt;li>fetch the set of &lt;code>current&lt;/code>ly active request queues&lt;/li>
&lt;li>control loop:
&lt;ul>
&lt;li>for each queue in &lt;code>expected&lt;/code> and not in &lt;code>current&lt;/code>:
&lt;ul>
&lt;li>attempt to create the queue&lt;/li>
&lt;li>if successful, update the current set&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for each queue in &lt;code>current&lt;/code> and not in &lt;code>expected&lt;/code>:
&lt;ul>
&lt;li>attempt to remove the queue, if empty and unused&lt;/li>
&lt;li>if successful, update the current set&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for each waiting orphan processor, release if the condition is met&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The control loop runs when &lt;code>current&lt;/code> != &lt;code>expected&lt;/code>, or when &lt;code>expected&lt;/code> changes.&lt;/p>
&lt;h3 id="worker-groups-control-loop">Worker groups control loop&lt;/h3>
&lt;p>osrdyne is responsible for starting and stopping worker groups following demand.
&lt;strong>It it NOT responsible for scaling the number of workers per worker group&lt;/strong>.&lt;/p>
&lt;p>osrdyne runs the following control loop:&lt;/p>
&lt;ul>
&lt;li>receive the set of &lt;code>expected&lt;/code> worker groups from the &lt;strong>pool state tracker&lt;/strong>&lt;/li>
&lt;li>build the set of &lt;code>running&lt;/code> worker groups: query running worker groups from the &lt;strong>worker group driver&lt;/strong>. If this fails, log and continue to the next iteration of the control loop.&lt;/li>
&lt;li>make both sets converge:
&lt;ul>
&lt;li>for each worker group in &lt;code>expected&lt;/code> and not in &lt;code>running&lt;/code>:
&lt;ul>
&lt;li>use the docker / kubernetes API to start the worker group. This must be idempotent. &lt;strong>do not retry&lt;/strong> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for each worker group in &lt;code>running&lt;/code> and not in &lt;code>expected&lt;/code>:
&lt;ul>
&lt;li>use the docker / kubernetes API to attempts to stop the worker group. This must be idempotent. &lt;strong>do not retry&lt;/strong> &lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="worker-activity-processor">Worker activity processor&lt;/h3>
&lt;p>As the number of worker activity events could be very high, we may not want to forward all of these to the pool state tracker:
if multiple messages are received within a short time span, only the first one is relevant. A separate actor can be used to receive
and dedup activity messages, and forward a low bandwidth summary to the pool state tracker.&lt;/p>
&lt;h2 id="failure-mode-analysis">Failure mode analysis&lt;/h2>
&lt;h3 id="the-worker-fails-to-parse-a-message">The worker fails to parse a message&lt;/h3>
&lt;p>This is an application layer error:
the worker must respond, and indicate that something went wrong&lt;/p>
&lt;h3 id="the-worker-dies-or-stalls-when-processing-a-message">The worker dies or stalls when processing a message&lt;/h3>
&lt;p>RabbitMQ will wait until the message TTL expires, and re-queues it.
A limit must be set on the number of times a message can be re-queued using a &lt;a href="https://www.rabbitmq.com/docs/quorum-queues#poison-message-handling">&lt;code>delivery-limit&lt;/code>&lt;/a>.
When this limit is reached, the poison message is sent to the dead letter exchange, and the client times out.&lt;/p>
&lt;h3 id="osrdyne-fails-to-start">osrdyne fails to start&lt;/h3>
&lt;ul>
&lt;li>If exchanges are not setup, the client cannot publish messages&lt;/li>
&lt;li>If the appropriate work group is operational, the &lt;a href="#fast-path">fast path&lt;/a> can proceed&lt;/li>
&lt;li>Otherwise, requests pile up in the orphan queue, and the client ends up timing out&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-worker-key">Invalid worker key&lt;/h3>
&lt;p>Because the key is an arbitrary string set by the client, it has to be processed carefully:&lt;/p>
&lt;ul>
&lt;li>the format is defined as a convention between the client and workers. If the format isn&amp;rsquo;t right,
it is up to the worker to publish a response to the client.&lt;/li>
&lt;li>key validity conditions is also up to the worker: if the key is supposed to be some
object ID, but the object does not exist, the worker needs to start up and respond&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Even if the key does not conform to the convention established between the client and the
worker, the worker needs to start and respond to all requests.&lt;/strong>&lt;/p>
&lt;h3 id="workers-fails-to-start">Workers fails to start&lt;/h3>
&lt;p>&lt;strong>A &lt;a href="https://www.rabbitmq.com/blog/2014/01/23/preventing-unbounded-buffers-with-rabbitmq#per-queue-message-ttl">per-queue message TTL&lt;/a>
should be set to avoid requests accumulating indefinitely.&lt;/strong>&lt;/p>
&lt;p>Workers failing to start will cause:&lt;/p>
&lt;ul>
&lt;li>messages to accumulate in the queue.&lt;/li>
&lt;li>when message TTL is reached, it will get transferred to the dead letter queue&lt;/li>
&lt;li>the client will time out awaiting a response&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-osrdyne-daemons-are-started-on-the-same-pool">Multiple osrdyne daemons are started on the same pool&lt;/h3>
&lt;p>It shouldn&amp;rsquo;t be an issue, as:&lt;/p>
&lt;ul>
&lt;li>all operations done on startup are idempotent&lt;/li>
&lt;li>before doing anything, the daemon has to start listening as an &lt;strong>exclusive consumer of the dead letter and orphan queues&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="known-limitations">Known limitations&lt;/h2>
&lt;h3 id="latency-publisher-confirms-and-reliability">Latency, publisher confirms and reliability&lt;/h3>
&lt;p>Without publisher confirms, networker or broken failure can result in message loss.
However, publisher confirms add quite a bit of latency (about 200ms), as it ensures messages are persisted to disk if the queue is durable.&lt;/p>
&lt;p>&lt;strong>We should use publisher confirms for responses and orphan transfers, and leave the decision of whether to do it for requests to the client.&lt;/strong>&lt;/p>
&lt;h3 id="at-least-once-semantics">At least once semantics&lt;/h3>
&lt;p>Most things in this protocol have at least once semantics if publisher confirms are used:&lt;/p>
&lt;ul>
&lt;li>&lt;code>request delivery to workers&lt;/code>: if osrdyne is restarted while transferring an orphan to its destination, the orphan may be transferred twice&lt;/li>
&lt;li>&lt;code>response delivery to clients&lt;/code>: if a worker takes slightly too long to ACK a message, but still responds, it may be requeued and re-processed, and thus responded to twice&lt;/li>
&lt;/ul>
&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;h3 id="using-rabbitmq">Using RabbitMQ&lt;/h3>
&lt;p>To implement this solution, we rely on a combination of &lt;a href="https://www.rabbitmq.com/docs/extensions">features unique to RabbitMQ&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>each worker type needs a separate &lt;strong>exchange&lt;/strong> and configuration&lt;/li>
&lt;li>when a message cannot be routed within a worker type&amp;rsquo;s exchange, it is redirected to an &lt;strong>alternate exchange&lt;/strong> managed by the worker manager&lt;/li>
&lt;li>&lt;strong>dead lettering&lt;/strong> is leveraged to generate protocol errors&lt;/li>
&lt;li>the worker manager uses the &lt;strong>RabbitMQ HTTP API&lt;/strong> to list queues&lt;/li>
&lt;/ul>
&lt;p>In addition to its attractive feature set, RabbitMQ has:&lt;/p>
&lt;ul>
&lt;li>various useful quality of life features, such as direct reply and per-message TTL&lt;/li>
&lt;li>long demonstrated its &lt;strong>reliability&lt;/strong>&lt;/li>
&lt;li>multiple engineers on staff &lt;strong>experience&lt;/strong>d with the tool&lt;/li>
&lt;/ul>
&lt;h3 id="queues-are-created-by-osrdyne">Queues are created by osrdyne&lt;/h3>
&lt;p>At some point, we explored the possibility of RPC clients creating queues.
osrdyne would react to queue creation by starting workers. If the
queue were to be unused for a while, osrdyne would stop workers and
delete the queue.&lt;/p>
&lt;p>This creates a race condition on queue deletion:&lt;/p>
&lt;ul>
&lt;li>osrdyne sees that the queue is empty&lt;/li>
&lt;li>the client ensures the queue is created&lt;/li>
&lt;li>osrdyne deletes the queue&lt;/li>
&lt;li>the client attempts to publish a message to the now deleted queue&lt;/li>
&lt;/ul>
&lt;p>We thus decided to move the responsibility of queue management to the
osrdyne, and implement a mechanism to ensure messages cannot be
dropped due to a missing queue.&lt;/p>
&lt;h3 id="osrdyne-republishes-orphan-messages">osrdyne republishes orphan messages&lt;/h3>
&lt;p>Initially, we though of a solution whereby osrdyne&amp;rsquo;s orphan processor uses &lt;a href="https://www.rabbitmq.com/docs/dlx">dead lettering&lt;/a>
to send messages back to their original exchange. This is in fact a bad idea, as dead lettering &lt;a href="https://www.rabbitmq.com/docs/dlx#effects">inhibits per message TTL&lt;/a>.&lt;/p>
&lt;p>Instead, the orphan processor has to proxy messages back to their original exchange.
&lt;strong>This proxying process can cause requests to get delivered multiple times to the target queue&lt;/strong>.&lt;/p>
&lt;h3 id="osrdyne-responds-to-dead-lettered-messages">osrdyne responds to dead lettered messages&lt;/h3>
&lt;p>If a message is dead lettered for some reason (expired TTL, delivery limit, max queue length),
we figured it would be best to give the client some idea that something went wrong.&lt;/p>
&lt;p>The &lt;a href="#worker-protocol">worker protocol&lt;/a> thus has to allow the client to distinguish protocol errors from worker responses.&lt;/p>
&lt;h3 id="messages-are-only-acked-by-workers-once-processed">Messages are only ACKed by workers once processed&lt;/h3>
&lt;p>If messages are ACKed on reception:&lt;/p>
&lt;ul>
&lt;li>processing time is not limited by message timeout (which is arguably not a feature)&lt;/li>
&lt;li>the broker does not attempt re-delivery if the worker were to stop and not respond for some reason&lt;/li>
&lt;/ul>
&lt;p>If messages are ACKed once processed:&lt;/p>
&lt;ul>
&lt;li>messages whose processing time exceeds TTL will be re-queued, even if the worker is still processing the message. &lt;strong>This can result in multiple responses being delivered&lt;/strong>.&lt;/li>
&lt;li>if the worker crashes or is stopped, the message will be re-queued&lt;/li>
&lt;/ul>
&lt;p>We decided to rely on a &lt;a href="https://www.rabbitmq.com/docs/quorum-queues#poison-message-handling">&lt;code>delivery-limit&lt;/code> policy&lt;/a> to handle poison messages, and ACK messages once processed.&lt;/p>
&lt;h3 id="report-worker-activity-using-amqp">Report worker activity using AMQP&lt;/h3>
&lt;p>osrdyne needs to maintain queue usage statistics in order to know when worker groups can be stopped.
At first, we considered having workers use valkey to store the timestamp of the last processed message for the queue.
We decided against it as:&lt;/p>
&lt;ul>
&lt;li>it would mean the workers store a timestamp directly in database, read by a supervisor process. it&amp;rsquo;s a pretty bad design&lt;/li>
&lt;li>it adds an additional database to the RPC architecture, for little to no benefit compared to just using rabbitmq&lt;/li>
&lt;li>if one of the workers has its clock drift by more than the worker group expiration time compared to osrdyne, the worker group will get stopped&lt;/li>
&lt;li>any worker can get the pool deleted by forcing the timestamp to an old value&lt;/li>
&lt;li>it adds a failure mode: if osrdyne / workers are unable to reach valkey, weird bugs may ensue&lt;/li>
&lt;/ul>
&lt;p>Instead, we decided to require worker to publish activity updates to a dedicated queue.
This queue can be watched by osrdyne, which can use these events to know when to stop a worker group.&lt;/p>
&lt;h3 id="make-worker-group-lifetime-decisions-in-a-separate-actor">Make worker group lifetime decisions in a separate actor&lt;/h3>
&lt;p>The lifetime of worker groups is influenced by three types of asynchronous events:&lt;/p>
&lt;ul>
&lt;li>worker activity&lt;/li>
&lt;li>orphan requests&lt;/li>
&lt;li>worker group spool down deadlines&lt;/li>
&lt;/ul>
&lt;p>When the orphan processor gets a request, it needs to create the worker group&amp;rsquo;s request
queue before it can proceed to forward the message.&lt;/p>
&lt;p>If queues were created and deleted asynchronously when these events are received, it would introduce a race condition:&lt;/p>
&lt;ul>
&lt;li>the orphan processor creates the queue&lt;/li>
&lt;li>the queue gets deleted because it expired at the same time&lt;/li>
&lt;li>the orphan processor forwards the message, which gets lost&lt;/li>
&lt;/ul>
&lt;p>We found multiple solutions for this issue:&lt;/p>
&lt;ul>
&lt;li>process all asynchronous events in a single actor. This was not deemed viable because worker activity processing is work intensive, and orphan request processing is latency sensitive.&lt;/li>
&lt;li>having a single actor create and delete queues (the &lt;a href="#request-queues-control-loop">&lt;strong>request queues control loop&lt;/strong>&lt;/a>) and making the orphan processor wait until the control loop creates the queue&lt;/li>
&lt;/ul>
&lt;h3 id="unbind-the-queue-and-wait-before-stopping-workers">Unbind the queue and wait before stopping workers&lt;/h3>
&lt;p>In a previous design, we tried to delete work queue in one go. It created a race condition issue on queue deletion,
caused by the fact osrdyne does not get direct notifications of when messages are received on a work queue:&lt;/p>
&lt;ul>
&lt;li>we decide to stop the worker group&lt;/li>
&lt;li>work is received on the queue, but we aren&amp;rsquo;t made aware as no worker is up&lt;/li>
&lt;li>we try to delete the queue, but cannot do so without loosing messages&lt;/li>
&lt;/ul>
&lt;p>We could think of two fixes for this issue:&lt;/p>
&lt;ul>
&lt;li>implement a two stage shutdown, where no work can get to the queue for a while before workers are stopped&lt;/li>
&lt;li>detect that the queue still has messages after workers have stopped, and start workers back up&lt;/li>
&lt;/ul>
&lt;p>We decided to implement two stage worker group shutdown:&lt;/p>
&lt;ul>
&lt;li>if no activity is register for &lt;code>UNBIND_DELAY&lt;/code>, unbind the work queue&lt;/li>
&lt;li>wait for a while to see if any worker picks up work from the queue and notifies osrdyne, which would rebind the queue&lt;/li>
&lt;li>if no orphan nor worker activity is registered for &lt;code>STOP_DELAY&lt;/code>, stop workers and delete the queue&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The control loop is designed to make the state of all worker groups converge at once.
Retrying convergence for one worker group adds latency to convergence for all worker groups.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>