<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSRD – Documentation</title><link>https://osrd.fr/en/docs/</link><description>Recent content in Documentation on OSRD</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://osrd.fr/en/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: General principles</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/general-principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/general-principles/</guid><description>
&lt;ul>
&lt;li>Explain what you&amp;rsquo;re doing and why.&lt;/li>
&lt;li>Document new code with doc comments.&lt;/li>
&lt;li>Include clear, simple tests.&lt;/li>
&lt;li>Break work into digestible chunks.&lt;/li>
&lt;li>Take the time to pick good names.&lt;/li>
&lt;li>Avoid non well-known abbreviations.&lt;/li>
&lt;li>&lt;strong>Control and consistency over 3rd party code reuse&lt;/strong>: Only add a dependency if it is absolutely necessary.&lt;/li>
&lt;li>Every dependency we add decreases our autonomy and consistency.&lt;/li>
&lt;li>We try to keep PRs bumping dependencies to a low number each week in each component, so grouping
dependency bumps in a batch PR is a valid option (see component&amp;rsquo;s &lt;code>README.md&lt;/code>).&lt;/li>
&lt;li>&lt;strong>Don&amp;rsquo;t reinvent every wheel&lt;/strong>: as a counter to the previous point, don&amp;rsquo;t reinvent everything at all costs.&lt;/li>
&lt;li>If there is a dependency in the ecosystem that is the &amp;ldquo;de facto&amp;rdquo; standard, we should heavily consider using it.&lt;/li>
&lt;li>More code general recommendations in main repository &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/CONTRIBUTING.md">CONTRIBUTING.md&lt;/a>.&lt;/li>
&lt;li>Ask for any help that you need!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/backend-conventions/">Consult back-end conventions ‣&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/frontend-conventions/">Consult front-end conventions ‣&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/write-code/">Continue towards write code ‣&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/tests/">Continue towards tests ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Preamble</title><link>https://osrd.fr/en/docs/guides/contribute/preamble/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/preamble/</guid><description>
&lt;p>First off, thanks for taking the time to contribute!&lt;/p>
&lt;p>The following chapters are a set of guidelines for contributing to OSRD. These guidelines are mostly not strict rules, it&amp;rsquo;s probably fine to do things slightly differently. If you have already contributed to open source projects before, you probably won&amp;rsquo;t be surprised. If you have not, it will probably help a lot!&lt;/p>
&lt;h3 id="communicate">Communicate&lt;/h3>
&lt;p>Chatting with other contributors is a great way to speed things up:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenRailAssociation/osrd/issues/new/choose">&lt;strong>Create an issue&lt;/strong>&lt;/a> to discuss your contribution project.&lt;/li>
&lt;/ul>
&lt;h3 id="inquire">Inquire&lt;/h3>
&lt;p>Just like with any project, changes rely on past work.
Before making changes, it is best to learn about what&amp;rsquo;s already there:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://osrd.fr/en/docs/">read technical documentation&lt;/a>&lt;/li>
&lt;li>read the existing source code related to your project&lt;/li>
&lt;li>chat with developers who last worked on areas you are interested in&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/license-and-set-up/">Continue towards initial set-up ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Release process</title><link>https://osrd.fr/en/docs/guides/release/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/release/process/</guid><description>
&lt;p>OSRD has three versions: development (dev), staging, and release.&lt;/p>
&lt;p>The development version is the most recent and unstable version of the application, containing the latest features and bug fixes in active development.&lt;/p>
&lt;p>Staging versions are created every Thursday at 12pm by tagging the current development state.&lt;/p>
&lt;p>If a staging version passes validation testing, it is promoted to become the latest release version. This ensures that only stable, tested code makes it into production releases.&lt;/p>
&lt;p>The release process follows this workflow:&lt;/p>
&lt;ol>
&lt;li>Ongoing development in the dev branch&lt;/li>
&lt;li>Weekly staging tags on Thursdays at 12pm&lt;/li>
&lt;li>Validation testing of staging version&lt;/li>
&lt;li>Promotion of validated staging builds to release status&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-ascii" data-lang="ascii"> Development Staging Release
(unstable) (testing) (stable)
[Dev Branch] |
| |
|---&amp;gt; Thursday 12pm |
| [Staging Tag] |
| | |
| Validation |
| Testing |
| | |
| o---&amp;gt; If Passes --&amp;gt; [New Release]
| Tests |
[Continue Dev] |
| |
V V
&lt;/code>&lt;/pre></description></item><item><title>Docs: Back-end conventions</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/backend-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/backend-conventions/</guid><description>
&lt;h1 id="python">Python&lt;/h1>
&lt;p>Python code is used for some packages and integration testing.&lt;/p>
&lt;ul>
&lt;li>Follow &lt;a href="https://www.python.org/dev/peps/pep-0020/">the Zen of Python&lt;/a>.&lt;/li>
&lt;li>Code is linted with &lt;a href="https://github.com/csachs/pyproject-flake8">flake8&lt;/a>.&lt;/li>
&lt;li>Code is formatted with &lt;a href="https://github.com/psf/black">Black&lt;/a>.&lt;/li>
&lt;li>Imports are sorted with &lt;a href="https://github.com/PyCQA/isort">Isort&lt;/a>.&lt;/li>
&lt;li>Python tests are written using &lt;a href="https://docs.pytest.org/">pytest&lt;/a>.&lt;/li>
&lt;li>Typing is checked using &lt;a href="https://google.github.io/pytype/">pytype&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="rust">Rust&lt;/h1>
&lt;ul>
&lt;li>As a reference for our API development we are using the &lt;a href="https://rust-lang.github.io/api-guidelines/about.html">Rust API guidelines&lt;/a>.
Generally, these should be followed.&lt;/li>
&lt;li>Prefer granular imports over glob imports like &lt;code>diesel::*&lt;/code>.&lt;/li>
&lt;li>Tests are written with the &lt;a href="https://doc.rust-lang.org/book/ch11-01-writing-tests.html">built-in testing framework&lt;/a>.&lt;/li>
&lt;li>Use the &lt;a href="https://doc.rust-lang.org/rust-by-example/meta/doc.html">documentation example&lt;/a> to know how to phrase and format your documentation.&lt;/li>
&lt;li>Use consistent comment style:
&lt;ul>
&lt;li>&lt;code>///&lt;/code> doc comments belong above &lt;code>#[derive(Trait)]&lt;/code> invocations.&lt;/li>
&lt;li>&lt;code>//&lt;/code> comments should generally go above the line in question, rather than in-line.&lt;/li>
&lt;li>Start comments with capital letters. End them with a period if they are sentence-like.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use comments to organize long and complex stretches of code that can&amp;rsquo;t sensibly be refactored into separate functions.&lt;/li>
&lt;li>Code is linted with &lt;a href="https://github.com/rust-lang/rust-clippy">clippy&lt;/a>.&lt;/li>
&lt;li>Code is formatted with &lt;a href="https://github.com/rust-lang/rustfmt">fmt&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="java">Java&lt;/h1>
&lt;ul>
&lt;li>Code is formatted with &lt;a href="https://checkstyle.sourceforge.io/">checkstyle&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Front-end conventions</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/frontend-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/frontend-conventions/</guid><description>
&lt;p>We use &lt;strong>ReactJS&lt;/strong> and all files must be written in &lt;strong>Typescript&lt;/strong>.&lt;/p>
&lt;p>The code is &lt;strong>linted&lt;/strong> with &lt;a href="https://eslint.org/">eslint&lt;/a>, and &lt;strong>formatted&lt;/strong> with &lt;a href="https://prettier.io/">prettier&lt;/a>.&lt;/p>
&lt;h2 id="nomenclature">Nomenclature&lt;/h2>
&lt;p>&lt;img src="https://osrd.fr/images/docs/contribute/nomenclature-front-end.svg" alt="Infrastructure diagram">&lt;/p>
&lt;p>The &lt;strong>applications&lt;/strong> (osrd eex, osrd stdcm, infra editor, rolling-stock editor) offer &lt;strong>views&lt;/strong> (project management, study management, etc.) linked to &lt;strong>modules&lt;/strong> (project, study, etc.) which contain the components.&lt;/p>
&lt;p>These &lt;strong>views&lt;/strong> are made up of &lt;strong>components&lt;/strong> and sub-components &lt;u>all derived from the modules&lt;/u>.
In addition to containing the &lt;strong>views&lt;/strong> files for the applications, they may also contain a &lt;strong>scripts&lt;/strong> directory which offers scripts related to these views. The &lt;strong>views&lt;/strong> determine the logic and &lt;u>access to the store&lt;/u>.&lt;/p>
&lt;p>&lt;strong>Modules&lt;/strong> are collections of &lt;strong>components&lt;/strong> attached to an &lt;strong>object&lt;/strong> (a scenario, a rolling stock, a TrainSchedule). They contain :&lt;/p>
&lt;ul>
&lt;li>a &lt;em>components&lt;/em> directory hosting &lt;u>all&lt;/u> components&lt;/li>
&lt;li>an optional &lt;em>styles&lt;/em> directory &lt;u>per module&lt;/u> for styling components in scss&lt;/li>
&lt;li>an optional &lt;em>assets&lt;/em> directory &lt;u>per module&lt;/u> (which contains assets, e.g. default datasets, specific to the module)&lt;/li>
&lt;li>an optional &lt;em>reducers&lt;/em> file &lt;u>per module&lt;/u>&lt;/li>
&lt;li>an optional &lt;em>types&lt;/em> file &lt;u>per module&lt;/u>&lt;/li>
&lt;li>an optional &lt;em>consts&lt;/em> file &lt;u>per module&lt;/u>&lt;/li>
&lt;/ul>
&lt;p>An &lt;strong>assets&lt;/strong> directory (containing images and other files).&lt;/p>
&lt;p>Last but not least, a &lt;strong>common&lt;/strong> directory offering :&lt;/p>
&lt;ul>
&lt;li>a &lt;em>utils&lt;/em> directory for utility functions common to the entire project&lt;/li>
&lt;li>a &lt;em>types&lt;/em> file for types common to the entire project&lt;/li>
&lt;li>a &lt;em>consts&lt;/em> file for constants common to the entire project&lt;/li>
&lt;/ul>
&lt;h2 id="implementation-principles">Implementation principles&lt;/h2>
&lt;h3 id="routing--slug">Routing &amp;amp; SLUG&lt;/h3>
&lt;p>&lt;em>In progress&lt;/em>&lt;/p>
&lt;p>&lt;code>projects/{project's name}/studies/{study's name}/scenarios/{scenario's name}&lt;/code>&lt;/p>
&lt;h3 id="styles--scss">Styles &amp;amp; SCSS&lt;/h3>
&lt;blockquote>
&lt;p>WARNING: in CSS/React, the scope of a class does not depend on where the file is imported, but is valid for the entire application. If you import an &lt;code>scss&lt;/code> file in the depths of a component (which we strongly advise against), its classes will be available to the whole application and may therefore cause side effects.&lt;/p>
&lt;/blockquote>
&lt;p>It is therefore highly recommended to be able to easily follow the tree structure of applications, views, modules and components also within the SCSS code, and in particular to nest class names to avoid edge effects, as the compiler will take care of making the necessary hierarchy.&lt;/p>
&lt;p>If, for example, we have a &lt;code>rollingStockSelector&lt;/code> component which proposes a list of rolling stock &lt;code>rollingStockList&lt;/code> represented by &lt;code>rollingStockCard&lt;/code> containing an image representing the rolling stock &lt;code>rollingStockImg&lt;/code> we should have the following SCSS structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scss" data-lang="scss">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">.rollinStockSelector&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">.rollingStockList&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">.rollingStockCard&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">.rollingStockImg&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c4a000">width&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#204a87;font-weight:bold">rem&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c4a000">height&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00">auto&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This ensures that the image contained in the rolling stock card inherits the correct css properties &lt;code>.rollinStockSelector.rollingStockList.rollingStockCard.rollingStockImg&lt;/code>.&lt;/p>
&lt;h4 id="css-modules">CSS Modules&lt;/h4>
&lt;p>CSS modules allow scoping CSS styles to a specific component, thereby avoiding conflicts with global class names.&lt;/p>
&lt;p>Vite natively supports CSS modules. Ensure that your CSS file has the &lt;code>.module.css&lt;/code> extension, for example, &lt;code>styles.module.css&lt;/code>.&lt;/p>
&lt;h5 id="using-css-modules-in-components">Using CSS Modules in Components&lt;/h5>
&lt;ol>
&lt;li>&lt;strong>Create an SCSS file with the &lt;code>.module.scss&lt;/code> extension&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/* MyComponent.module.scss */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">container&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">background-color&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">white&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">font-size&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#204a87;font-weight:bold">px&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">color&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">#333&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>&lt;strong>Use the classes in your React component&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;p>Vite transforms classes into objects that contain hashed classes (e.g., &lt;code>_container_h3d8bg&lt;/code>) and uses them during bundle generation, making the classes unique.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">React&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;react&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">styles&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./MyComponent.module.scss&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">export&lt;/span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">MyComponent() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span> &lt;span style="color:#c4a000">className&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">styles&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">container&lt;/span>&lt;span style="color:#000;font-weight:bold">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">h1&lt;/span> &lt;span style="color:#c4a000">className&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">styles&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;title&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&amp;gt;&lt;/span>&lt;span style="color:#000">My&lt;/span> &lt;span style="color:#000">Title&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">h1&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more information, you can refer to the &lt;a href="https://vitejs.dev/guide/features.html#css-modules">Vite.js documentation&lt;/a>.&lt;/p>
&lt;h4 id="class-names-using-cx">Class names, using &lt;code>cx()&lt;/code>.&lt;/h4>
&lt;p>Classes are normally added one after the other, in the &lt;code>className=&amp;quot;&amp;quot;&lt;/code> property.&lt;/p>
&lt;p>However, when necessary - class usage tests, concatenation, etc. - we use the &lt;a href="https://github.com/JedWatson/classnames">classnames library&lt;/a>, which recommends the following usage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span> &lt;span style="color:#c4a000">className&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rollingStockSelector&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span> &lt;span style="color:#c4a000">className&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rollingStockList&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span> &lt;span style="color:#c4a000">className&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rollingStockCard w-100 my-2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">img&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c4a000">className&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">cx&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rollingStockImg&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;m-2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;p-1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bg-white&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">valid&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">isValid&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">selected&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">rollingStockID&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">===&lt;/span> &lt;span style="color:#000">selectedRollingStockID&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">})}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Classes are &lt;strong>separated&lt;/strong> each in a &lt;code>string&lt;/code> and Boolean or other operations are performed in an object that will return - or not - the property name as the class name to be used in CSS.&lt;/p>
&lt;h3 id="storeredux">Store/Redux&lt;/h3>
&lt;p>Everything that is &lt;em>selector&lt;/em> is managed by the &lt;strong>view&lt;/strong> and passed as props to components and sub-components.&lt;/p>
&lt;p>Consequently, read and write calls to the store must be made at view level, irrigating the components proposed by the view with &lt;em>props&lt;/em> and &lt;em>states&lt;/em>.&lt;/p>
&lt;h3 id="rtk">RTK&lt;/h3>
&lt;p>Use generated endpoints from &lt;code>openapi.yaml&lt;/code> files to consume the backend.&lt;/p>
&lt;h4 id="operation-of-rtk-query-cache">Operation of RTK Query cache&lt;/h4>
&lt;p>When the data is retrieved from the back, RTK is caching it into the store. If the same endpoint is called again with same parameters, RTK will use the cache data instead of making a new call to the back.&lt;/p>
&lt;p>In the store, you will see the &lt;code>editoastApi&lt;/code> key containing the cached data of all editoast endpoints:&lt;/p>
&lt;p>&lt;img src="https://osrd.fr/images/docs/contribute/store-redux-main.png" alt="store Redux">&lt;/p>
&lt;p>Here for example, the &lt;code>getProjects&lt;/code> endpoint is called.&lt;/p>
&lt;p>RTK stores the endpoint&amp;rsquo;s name, as well as the call&amp;rsquo;s parameters, to form an unique key &lt;code>nomDuEndpoint({ parameter })&lt;/code>. (here &lt;code>getProjects({&amp;quot;ordering&amp;quot;:&amp;quot;LastModifiedDesc&amp;quot;,&amp;quot;pageSize&amp;quot;:1000})&lt;/code>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;getProjectsByProjectIdStudiesAndStudyId({&amp;#34;projectId&amp;#34;:13,&amp;#34;studyId&amp;#34;:16})&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;fulfilled&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">etc&lt;/span>&lt;span style="color:#a40000">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;getProjectsByProjectIdStudiesAndStudyId({&amp;#34;projectId&amp;#34;:13,&amp;#34;studyId&amp;#34;:14})&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this second example, the same endpoint has been called with the same &lt;code>projectId&lt;/code> parameter, but a different &lt;code>studyId&lt;/code> parameter.&lt;/p>
&lt;h5 id="serialization-of-keys-in-the-cache">Serialization of keys in the cache&lt;/h5>
&lt;p>The strings used as keys in the cache are essentially the parameter object passed through the &lt;code>JSON.stringify&lt;/code> function, which converts a JS object into a string (thus serialized).&lt;/p>
&lt;p>Normally, serialization does not preserve the order of object keys. For example, &lt;code>JSON.stringify&lt;/code> will not produce the same string with these two objects: &lt;code>{ a: 1, b: 2 }&lt;/code> and &lt;code>{ b: 2, a: 1 }&lt;/code>.&lt;/p>
&lt;p>RTK will optimize caching by ensuring that the result of a call with &lt;code>{&amp;quot;projectId&amp;quot;:13,&amp;quot;studyId&amp;quot;:16}&lt;/code> or &lt;code>{&amp;quot;studyId&amp;quot;:16, &amp;quot;projectId&amp;quot;:13}&lt;/code> is stored under the same key in the cache.&lt;/p>
&lt;p>To see the detailed operation, here is the code for this serialization function:&lt;/p>
&lt;details>
&lt;summary>RTK Serialization Function&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">defaultSerializeQueryArgs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">SerializeQueryArgs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">any&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">endpointName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">queryArgs&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">let&lt;/span> &lt;span style="color:#000">serialized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">cached&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">queryArgs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">typeof&lt;/span> &lt;span style="color:#000">cached&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">===&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;string&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">serialized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">cached&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">stringified&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">JSON&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stringify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">queryArgs&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">isPlainObject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#204a87">Object&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sort&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// keys are reordered here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reduce&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">any&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">acc&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">acc&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#000">as&lt;/span> &lt;span style="color:#000">any&lt;/span>&lt;span style="color:#000;font-weight:bold">)[&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">acc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#000;font-weight:bold">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isPlainObject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">queryArgs&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">queryArgs&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stringified&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">serialized&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">stringified&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Sort the object keys before stringifying, to prevent useQuery({ a: 1, b: 2 }) having a different cache key than useQuery({ b: 2, a: 1 })
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">`&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">endpointName&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">serialized&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">)`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h5 id="data-subscription">Data subscription&lt;/h5>
&lt;p>In RTK Query terminology, when a React component calls an endpoint defined in RTK Query, it &lt;em>subscribes&lt;/em> to the data.&lt;/p>
&lt;p>RTK counts the number of references to the same pair (endpoint, {parameters}). When two components subscribe to the same data, they share the same key in the cache.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">osrdEditoastApi&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;./api.ts&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">Component1() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// component subscribes to the data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">osrdEditoastApi&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">useGetXQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;...&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">Component2() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// component subscribes to the data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">osrdEditoastApi&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">useGetXQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;...&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">Component3() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// component subscribes to the data
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">osrdEditoastApi&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">useGetXQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;...&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">Component4() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// component subscribes to the *same* data as ComponentThree,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// as it has the same query parameters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">osrdEditoastApi&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">useGetXQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;...&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">div&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, &lt;code>Component3&lt;/code> and &lt;code>Component4&lt;/code> will generate only one call to the backend. They subscribe to the same data (same endpoint and same parameter &lt;code>3&lt;/code>). They will share the same key in the cache.&lt;/p>
&lt;p>In total, there will be three calls to the backend here, with parameters &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, and &lt;code>3&lt;/code>.&lt;/p>
&lt;p>As long as at least one mounted React component calls the &lt;code>osrdEditoastApi.endpoints.getProjectsByProjectId.useQuery&lt;/code> hook, for example, the data will be retained in the cache.&lt;/p>
&lt;p>Once the last component is unmounted, the data is removed from the cache after 60 seconds (default value).&lt;/p>
&lt;h3 id="translation">Translation&lt;/h3>
&lt;p>Application translation is performed on &lt;a href="https://explore.transifex.com/osrd/osrd/">Transifex&lt;/a>. The default language is French.
If you add a new translation key, it can be added directly to the code, in all available languages. Please note that if you need to correct a translation, we recommend that you use Transifex, to avoid any conflict.&lt;/p>
&lt;h2 id="rules-and-important-elements">Rules and important elements&lt;/h2>
&lt;h4 id="no-component-should-be-responsible-for-updating-the-data-it-uses">No component should be responsible for updating the data it uses&lt;/h4>
&lt;p>Only &lt;u>views&lt;/u> contain the store selectors, which are then given as props to the components of the module linked to the view.&lt;/p>
&lt;h4 id="scss-is-not-scoped">SCSS is not scoped&lt;/h4>
&lt;p>A &lt;code>.scss&lt;/code> file buried in the tree structure doesn&amp;rsquo;t guarantee that the classes it contains can only be accessed there, even by importing react (formally forbidden by the way: you must use SCSS import), all declared classes are accessible everywhere.&lt;/p>
&lt;p>Prefer a judicious choice of root class name for a given module, and use the tree structure available in the SCSS file.&lt;/p>
&lt;h4 id="imports-must-follow-a-specific-order">Imports must follow a specific order&lt;/h4>
&lt;p>ESLint is setup to automatically sort imports in four import groups, each of them sorted in alphabetical order :&lt;/p>
&lt;ul>
&lt;li>React&lt;/li>
&lt;li>External libraries&lt;/li>
&lt;li>Internal absolute path files&lt;/li>
&lt;li>Internal relative path files&lt;/li>
&lt;/ul>
&lt;p>Each of these groups will be separated by an empty line.&lt;/p>
&lt;p>ESLint will trigger a warning if you don&amp;rsquo;t follow these guidelines.&lt;/p>
&lt;h4 id="import-links-must-be-absolute">Import links must be absolute&lt;/h4>
&lt;p>You must use the &lt;u>full path&lt;/u> for all your imports.&lt;/p>
&lt;blockquote>
&lt;p>Import links can be relative only if the file to be imported is in the same directory.&lt;/p>
&lt;/blockquote>
&lt;h2 id="typescript">TypeScript&lt;/h2>
&lt;h3 id="import--export">import &amp;amp; export&lt;/h3>
&lt;p>ESLint and Typescript are setup to enforce typed imports for an exported type.&lt;/p>
&lt;p>This current setup allows to :&lt;/p>
&lt;ul>
&lt;li>Auto typing the import when using a type in a file with autocompletion.&lt;/li>
&lt;li>Getting 2 errors from each package asking to use type import if you didn&amp;rsquo;t.&lt;/li>
&lt;/ul>
&lt;p>When an &lt;code>import&lt;/code> or &lt;code>export&lt;/code> contains only types, indicate it with the &lt;code>type&lt;/code> keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">export&lt;/span> &lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">Direction&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">DirectionalTrackRange&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">TrackRange&lt;/span> &lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">typedEntries&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ValueOf&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;utils/types&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When an &lt;code>import&lt;/code> contains not only types, it will be structured like below, in alphabetical order.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">osrdEditoastApi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ScenarioCreateForm&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;common/api/osrdEditoastApi&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This allows to:&lt;/p>
&lt;ul>
&lt;li>Improve the performance and analysis process of the compiler and the linter.&lt;/li>
&lt;li>Make these declarations more readable; we can clearly see what we are importing.&lt;/li>
&lt;li>Avoid dependency cycles:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://osrd.fr/images/docs/contribute/dependency-cycle.png" alt="dependency cycle">&lt;/p>
&lt;p>The error disappears with the &lt;code>type&lt;/code> keyword&lt;/p>
&lt;p>&lt;img src="https://osrd.fr/images/docs/contribute/dependency-cycle-gone.png" alt="dependency cycle">&lt;/p>
&lt;ul>
&lt;li>Make final bundle lighter (all types disappear at compilation)&lt;/li>
&lt;/ul></description></item><item><title>Docs: License and set-up</title><link>https://osrd.fr/en/docs/guides/contribute/license-and-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/license-and-set-up/</guid><description>
&lt;h2 id="license-of-code-contributions">License of code contributions&lt;/h2>
&lt;p>The source code of OSRD is available under &lt;a href="https://choosealicense.com/licenses/lgpl-3.0/">the LGPLv3 license&lt;/a>.
By contributing to the codebase, you consent to the distribution of your changes under the project&amp;rsquo;s license.&lt;/p>
&lt;p>LGPLv3 forbids modifying source code without sharing the changes under the same license: use other people&amp;rsquo;s work, and share yours!&lt;/p>
&lt;p>This constraint does not propagate through APIs: You can use OSRD as a library, framework or API server to interface with proprietary software. Please suggest changes if you need new interfaces.&lt;/p>
&lt;h2 id="set-things-up">Set things up&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Most OSRD developers use Linux (incl. &lt;a href="https://learn.microsoft.com/en-us/windows/wsl/">WSL&lt;/a>). Windows and MacOS should work too, but you may run into some issues.
&lt;/div>
&lt;h3 id="get-the-source-code">Get the source code&lt;/h3>
&lt;ul>
&lt;li>Install &lt;a href="https://git-scm.com/">&lt;code>git&lt;/code>&lt;/a>.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Open a terminal&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> in the folder where the source code of OSRD will be located&lt;/li>
&lt;li>Run &lt;code>git clone https://github.com/OpenRailAssociation/osrd.git&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="launch-the-application">Launch the application&lt;/h3>
&lt;p>Docker is a tool which greatly reduces the amount of setup required to work on OSRD:&lt;/p>
&lt;ul>
&lt;li>download the latest development build: &lt;code>docker compose pull&lt;/code>&lt;/li>
&lt;li>start OSRD: &lt;code>docker compose up&lt;/code>&lt;/li>
&lt;li>build and start OSRD: &lt;code>docker compose up --build&lt;/code>&lt;/li>
&lt;li>review a PR using CI built images: &lt;code>TAG=pr-XXXXX docker compose up --no-build --pull always&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To get started:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://osrd.fr/en/docs/guides/contribute/install-docker/">Install &lt;code>docker&lt;/code>&lt;/a>&lt;/li>
&lt;li>Follow &lt;a href="https://github.com/OpenRailAssociation/osrd#getting-started">OSRD&amp;rsquo;s README&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/">Continue towards code contribution ‣&lt;/a>&lt;/em>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Under Linux, use the package manager (such as &lt;code>apt&lt;/code>)&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Under Windows, open &lt;code>Git Bash&lt;/code>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Docs: Publish a new release</title><link>https://osrd.fr/en/docs/guides/release/publish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/release/publish/</guid><description>
&lt;p>All OSRD releases are accessible &lt;a href="https://github.com/OpenRailAssociation/osrd/releases">here&lt;/a>&lt;/p>
&lt;p>The process for creating a new release is as follows:&lt;/p>
&lt;ol>
&lt;li>We always release on a tested version of the application (staging branch)
&lt;ul>
&lt;li>&lt;code>git switch staging &amp;amp;&amp;amp; git pull&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Create a git &lt;strong>annotated&lt;/strong> tag
&lt;ul>
&lt;li>We are using the &lt;a href="https://semver.org/">semantic versioning&lt;/a>&lt;/li>
&lt;li>&lt;code>git tag -a vx.y.z&lt;/code> with the message &lt;code>Release x.y.z&lt;/code> (most of the time use the latest version and increment the patch version)&lt;/li>
&lt;li>&lt;code>git push --tags&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Create a github release
&lt;ul>
&lt;li>Draft a new github release &lt;a href="https://github.com/OpenRailAssociation/osrd/releases/new">here&lt;/a>&lt;/li>
&lt;li>Select the created tag&lt;/li>
&lt;li>Generate the releases notes&lt;/li>
&lt;li>Rename the release like so: &amp;ldquo;Version x.y.z&amp;rdquo;&lt;/li>
&lt;li>Check the &amp;ldquo;Set as a pre-release&amp;rdquo; box&lt;/li>
&lt;li>Apply the &lt;a href="#Changelog format">changelog format&lt;/a>&lt;/li>
&lt;li>Then you can &lt;strong>publish&lt;/strong> the release or &lt;strong>save&lt;/strong> the draft if you want to come back later&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A &lt;a href="https://github.com/OpenRailAssociation/osrd/actions/workflows/release.yml">github action&lt;/a> should be triggered automatically.&lt;/li>
&lt;li>Post the link of the created release on matrix. Suggest that the developers review the release.&lt;/li>
&lt;/ol>
&lt;h3 id="changelog-format">Changelog format&lt;/h3>
&lt;ol>
&lt;li>Use the following structure:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-md" data-lang="md">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">## What&amp;#39;s Changed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Features :tada:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Code refactoring :recycle:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">### Bug fixes :bug:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">## New Contributors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&amp;lt;!-- Copy from the generated release notes --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&amp;lt;!-- Copy from the generated release notes --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">**Full Changelog**&lt;/span>: ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Partition the different pull requests&lt;/li>
&lt;li>Merge or group PR when it make sense. Examples:
&lt;ul>
&lt;li>Bump of dependencies PR (merge)&lt;/li>
&lt;li>Multi part PR (merge)&lt;/li>
&lt;li>One big feature implemented by multiple PR (group)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reword PR title. &lt;strong>It should be comprehensible to an external collaborator&lt;/strong>&lt;/li>
&lt;/ol></description></item><item><title>Docs: Write code</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/write-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/write-code/</guid><description>
&lt;ol>
&lt;li>
&lt;p>If you are not used to Git, &lt;a href="https://learngitbranching.js.org/">follow this tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a branch&lt;/strong>&lt;br>
If you intend to contribute regularly, you can request access to the &lt;a href="https://github.com/OpenRailAssociation/osrd">main repository&lt;/a>. Otherwise, &lt;a href="https://github.com/OpenRailAssociation/osrd/fork">create a fork&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Add changes to your branch&lt;/strong>&lt;br>
Before you start working, try to split your work into macroscopic steps.
At the end of each stop, save your changes into a commit.
Try to make commits of logical and atomic units.
Try to follow &lt;a href="../conventions/">style conventions&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Keep your branch up-to-date&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>git switch &amp;lt;your_branch&amp;gt;
git fetch
git rebase origin/dev
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/commit-conventions/">Continue towards commit style ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Commit conventions</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/commit-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/commit-conventions/</guid><description>
&lt;h2 id="commit-style">Commit style&lt;/h2>
&lt;p>The overall format for git commits is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>component1, component2: imperative description of the change
Detailed or technical description of the change and what motivates it,
if it is not entirely obvious from the title.
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>the commit message, just like the code, must be in english&lt;/strong> (only ASCII characters for the title)&lt;/li>
&lt;li>there can be multiple components separated by &lt;code>:&lt;/code> in case of hierarchical relationships, with &lt;code>,&lt;/code> otherwise&lt;/li>
&lt;li>components are lower-case, using &lt;code>-&lt;/code>, &lt;code>_&lt;/code> or &lt;code>.&lt;/code> if necessary&lt;/li>
&lt;li>the imperative description of the change begins with a lower-case verb&lt;/li>
&lt;li>the title must not contain any link (&lt;code>#&lt;/code> is forbidden)&lt;/li>
&lt;/ul>
&lt;p>Ideally:&lt;/p>
&lt;ul>
&lt;li>the title should be self-explanatory: no need to read anything else to understand it&lt;/li>
&lt;li>the commit title is all lower-case&lt;/li>
&lt;li>the title is clear to a reader not familiar with the code&lt;/li>
&lt;li>the body of the commit contains a detailed description of the change&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
An automated check is performed to enforce as much as possible this formatting.
&lt;/div>
&lt;h3 id="counter-examples-of-commit-titles">Counter-examples of commit titles&lt;/h3>
&lt;p>To be avoided entirely:&lt;/p>
&lt;ul>
&lt;li>&lt;code>component: update ./some/file.ext&lt;/code>: specify the update itself rather than the file, the files
are technical elements welcome in the &lt;em>body&lt;/em> of the commit&lt;/li>
&lt;li>&lt;code>component: fix #42&lt;/code>: specify the problem fixed in the title, links (to issue, etc.) are very
welcome in commit&amp;rsquo;s &lt;em>body&lt;/em>&lt;/li>
&lt;li>&lt;code>wip&lt;/code>: describe the work (and finish it)&lt;/li>
&lt;/ul>
&lt;p>Welcome to ease review, but do not merge:&lt;/p>
&lt;ul>
&lt;li>&lt;code>fixup! previous commit&lt;/code>: an &lt;a href="../share-changes">autosquash&lt;/a> must be run before the merge&lt;/li>
&lt;li>&lt;code>Revert &amp;quot;previous commit of the same PR&amp;quot;&lt;/code>: both commits must be dropped before merging&lt;/li>
&lt;/ul>
&lt;h2 id="the-developer-certificate-of-origin-dco">The Developer Certificate of Origin (DCO)&lt;/h2>
&lt;p>All of OSRD&amp;rsquo;s projects use the DCO (Developer Certificate of Origin) to address
legal matters. The DCO helps confirm that you have the rights to the code you
contribute. For more on the history and purpose of the DCO, you can read &lt;a href="https://bssw.io/blog_posts/the-developer-certificate-of-origin">The
Developer Certificate of Origin&lt;/a>
by Roscoe A. Bartlett.&lt;/p>
&lt;p>To comply with the DCO, &lt;strong>all commits must include a Signed-off-by line&lt;/strong>.&lt;/p>
&lt;h3 id="how-to-sign-a-commit-using-git-in-a-shell-">How to sign a commit using git in a shell ?&lt;/h3>
&lt;p>To sign off a commit, simply add the &lt;code>-s&lt;/code> flags to your &lt;code>git commit&lt;/code> command,
like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git commit -s -m &lt;span style="color:#4e9a06">&amp;#34;Your commit message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This also applies when using the &lt;code>git revert&lt;/code> command.&lt;/p>
&lt;h3 id="how-to-do-sign-a-commit-using-git-in-visual-studio-code-vs-code-">How to do sign a commit using git in Visual Studio Code (VS Code) ?&lt;/h3>
&lt;p>Now, go in &lt;code>Files&lt;/code> -&amp;gt; &lt;code>Preferences&lt;/code> -&amp;gt; &lt;code>Settings&lt;/code>, search for and activate
the &lt;strong>Always Sign Off&lt;/strong> setting.&lt;/p>
&lt;p>Finally, when you&amp;rsquo;ll commit your changes via the VS Code interface, your commits
will automatically be signed-off.&lt;/p>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/share-changes/">Continue towards sharing your changes ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Review process</title><link>https://osrd.fr/en/docs/guides/contribute/code-review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/code-review/</guid><description>
&lt;p>The reviewer/maintainer undertakes to carry out the review quickly, and is also responsible for closing &lt;em>request changes&lt;/em>, check commit history and quickly merge the &lt;em>pull request&lt;/em> if allowed.&lt;/p>
&lt;p>We propose you a few tips and recommendations that we think are relevant to a human, relevant and rewarding code review for all contributors:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mtlynch.io/code-review-love/">How to Make Your Code Reviewer Fall in Love with You?&lt;/a> by Michael Lynch.&lt;/li>
&lt;li>&lt;a href="https://mtlynch.io/human-code-reviews-1/">How to Do Code Reviews Like a Human? &lt;/a> by Michael Lynch.&lt;/li>
&lt;/ul>
&lt;h2 id="review-cycle">Review cycle&lt;/h2>
&lt;p>A code review is an iterative process.
For a smooth review, it is imperative to &lt;a href="https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications">correctly configure your github notifications&lt;/a>.&lt;/p>
&lt;p>It is advisable to configure OSRD repositories as &lt;em>&amp;ldquo;Participating and @mentions&amp;rdquo;&lt;/em>. This allows you to be notified of activities only on issues and PRs in which you participate.&lt;/p>
&lt;blockquote>
&lt;p>Maintainers are automatically notified by the &lt;code>CODEOWNERS&lt;/code> system. The author of a PR is responsible for advancing their PR through the review process and manually requesting maintainer feedback if necessary.&lt;/p>
&lt;/blockquote>
&lt;pre class="mermaid">sequenceDiagram
actor A as PR author
actor R as Reviewer/Maintainer
A-&amp;gt;&amp;gt;R: Asks for a review, notifying some people
R-&amp;gt;&amp;gt;A: Answers yes or no
loop Loop between author and reviewer
R--&amp;gt;&amp;gt;A: Comments, asks for changes
A--&amp;gt;&amp;gt;R: Answers to comments or requested changes
A--&amp;gt;&amp;gt;R: Makes necessary changes in dedicated &amp;#34;fixups&amp;#34;
R--&amp;gt;&amp;gt;A: Reviews, tests changes, and comments again
R--&amp;gt;&amp;gt;A: Resolves requested changes/conversations if ok
end
A-&amp;gt;&amp;gt;R: Rebase and apply fixups
R-&amp;gt;&amp;gt;A: Checks commits history
R-&amp;gt;&amp;gt;A: Approves or closes the PR
Note left of R: &amp;amp; Merges if maintainer&lt;/pre>
&lt;h2 id="the-code-review-pyramid">The code review pyramid&lt;/h2>
&lt;figure>&lt;a href="https://www.morling.dev/blog/the-code-review-pyramid/">
&lt;img src="https://osrd.fr/images/docs/contribute/code_review_pyramid.svg"/> &lt;/a>
&lt;/figure>
&lt;h2 id="script-for-testing-a-pr">Script for testing a PR&lt;/h2>
&lt;p>When reviewing a PR, it is useful to test the changes by starting an instance of the OSRD app based on the PR branch.&lt;/p>
&lt;p>A script is available to spin up a separate and dedicated app instance using the PR number. The script uses the Docker images already built by the CI and launches the app, running in isolation. This allows you to run both instances simultaneously without conflicts (ideal for comparing changes, for example).&lt;/p>
&lt;p>Additionally, you can specify a database backup, which the script will load directly into the app.&lt;/p>
&lt;p>The app will be launched on the 4001 port. You can access it at: http://localhost:4001/&lt;/p>
&lt;h3 id="available-commands">Available Commands:&lt;/h3>
&lt;ul>
&lt;li>&lt;code>./scripts/pr-tests-compose.sh 8914 up&lt;/code>: Downloads the CI-generated images for PR #8914 and launches the application.&lt;/li>
&lt;li>&lt;code>./scripts/pr-tests-compose.sh 8914 up-and-load-backup ./path_to_backup&lt;/code>: Downloads the images for PR #8914, restores data from the provided backup, and starts the application.&lt;/li>
&lt;li>&lt;code>./scripts/pr-tests-compose.sh down&lt;/code>: Shuts down the test application instance for PR #8914.&lt;/li>
&lt;li>&lt;code>./scripts/pr-tests-compose.sh down-and-clean&lt;/code>: Shuts down the test instance and cleans all the instance&amp;rsquo;s docker volumes (PG data, Valkey cache, RabbitMQ) to prevent any side-effects.&lt;/li>
&lt;/ul>
&lt;h3 id="accessing-services">Accessing Services:&lt;/h3>
&lt;p>Apart from the &lt;code>frontend&lt;/code> server, all localhost services are available on localhost, with a minor port adjustment (to avoid conflicts with the dev environment): for a list of common ports, have a look at the &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/docker/docker-compose.pr-test.yml">dedicated docker-compose file&lt;/a>.&lt;/p></description></item><item><title>Docs: Report issues</title><link>https://osrd.fr/en/docs/guides/contribute/bug-reports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/bug-reports/</guid><description>
&lt;p>&lt;strong>Please report anything you deem significant!&lt;/strong>&lt;/p>
&lt;p>Our bug tracking platform is &lt;a href="https://github.com/OpenRailAssociation/osrd/issues">github&lt;/a>, so you have to register to report bugs.&lt;/p>
&lt;p>Follow &lt;a href="https://github.com/OpenRailAssociation/osrd/issues/new/choose">this link&lt;/a> and pick whatever template fits the best.&lt;/p>
&lt;h3 id="bugs">Bugs&lt;/h3>
&lt;ul>
&lt;li>Bug must have a correct description and the bug&amp;rsquo;s issue template must be filled carefully.&lt;/li>
&lt;li>Bug must be tagged with (&lt;em>for team members&lt;/em>):
&lt;ul>
&lt;li>&lt;code>kind:bug&lt;/code>&lt;/li>
&lt;li>one or several &lt;code>area:&amp;lt;affected_area&amp;gt;&lt;/code> if possible, if the affected area is not known leave it blank it will be added later by another team member.&lt;/li>
&lt;li>one &lt;code>severity:&amp;lt;bug_severity&amp;gt;&lt;/code> if possible, if severity is not known leave it blank it will be added later by another team member.
&lt;ul>
&lt;li>&lt;code>severity:minor&lt;/code>: User can still use the feature.&lt;/li>
&lt;li>&lt;code>severity:major&lt;/code>: User sometimes can&amp;rsquo;t use the feature.&lt;/li>
&lt;li>&lt;code>severity:critical&lt;/code>: User can&amp;rsquo;t use the feature.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OSRD team members can change issues&amp;rsquo; tags (severity, area, kind, &amp;hellip;).
You may leave a comment to explain changes.&lt;/li>
&lt;li>If you are working on a bug or plan to work on a bug, assign yourself to the bug.&lt;/li>
&lt;li>PRs solving bugs should add a regression tests to ensure that bug will not be back in the future.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Share your changes</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/share-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/share-changes/</guid><description>
&lt;p>The author of a &lt;em>pull request (PR)&lt;/em> is responsible for its &amp;ldquo;life cycle&amp;rdquo;. He is responsible for contacting the various parties involved, following the review, responding to comments and correcting the code following review (you could also check &lt;a href="https://osrd.fr/en/docs/guides/contribute/code-review/">dedicated page about code review&lt;/a>).&lt;/p>
&lt;blockquote>
&lt;p>In the case of a large PR, don&amp;rsquo;t hesitate to ask several reviewers to organize themselves, or even to carry out the review together, reviewers and author.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Open a &lt;em>pull request&lt;/em>&lt;/strong> &lt;br>
Once your changes are ready, you have to request integration with the &lt;code>dev&lt;/code> branch.&lt;/p>
&lt;p>If possible:&lt;/p>
&lt;ul>
&lt;li>Make PR of logical and atomic units too (avoid mixing refactoring, new features and bug fix at the same time).&lt;/li>
&lt;li>Add a description to PRs to explain what they do and why.&lt;/li>
&lt;li>Help the reviewer by following advice given in &lt;a href="https://mtlynch.io/code-review-love/">mtlynch article&lt;/a>.&lt;/li>
&lt;li>Add tags &lt;code>area:&amp;lt;affected_area&amp;gt;&lt;/code> to show which part of the application have been impacted. It can be done through &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">the web interface&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Take feedback into account&lt;/strong> &lt;br>
Once your PR is open, &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews">other contributors can review your changes&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>Any user can review your changes.&lt;/li>
&lt;li>Your code has to be approved by &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/.github/CODEOWNERS">a contributor familiar with the code&lt;/a>.&lt;/li>
&lt;li>All users are expected to take comments into account.&lt;/li>
&lt;li>Comments tend to be written in an open and direct manner.
The intent is to efficiently collaborate towards a solution we all agree on.&lt;/li>
&lt;li>Once all discussions are resolved, a maintainer integrates the change.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>For large PRs that are bound to evolve over time, keeping &lt;em>corrections&lt;/em> during review in separate
&lt;em>commits&lt;/em> helps reviewers. In the case of multiple reviews by the same person, this can save full
re-review (ask for help if necessary):&lt;/p>
&lt;ul>
&lt;li>&lt;em>Add fixup&lt;/em>, amend, squash or reword commits using the
&lt;a href="https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---fixupamendrewordltcommitgt">git commit documentation&lt;/a>.&lt;/li>
&lt;li>&lt;em>Automatically merge corrections&lt;/em> into the original commits of your PR and check the result, using
&lt;a href="https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---autosquash">&lt;code>git rebase -i --autosquash origin/dev&lt;/code>&lt;/a>
(just before the merge and once review process is complete).&lt;/li>
&lt;li>&lt;em>Push your changes&lt;/em> with
&lt;a href="https://git-scm.com/docs/git-push#Documentation/git-push.txt---no-force-with-lease">&lt;code>git push --force-with-lease&lt;/code>&lt;/a>
because you are not just pushing new commits, you are pushing changes to existing commits.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ol start="3">
&lt;li>&lt;strong>If you believe somebody forgot to review / merge your change, please speak out, multiple times if needs be.&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="review-cycle">Review cycle&lt;/h2>
&lt;p>A code review is an iterative process.
For a smooth review, it is imperative to &lt;a href="https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications">correctly configure your github notifications&lt;/a>.&lt;/p>
&lt;p>It is advisable to configure OSRD repositories as &lt;em>&amp;ldquo;Participating and @mentions&amp;rdquo;&lt;/em>. This allows you to be notified of activities only on issues and PRs in which you participate.&lt;/p>
&lt;blockquote>
&lt;p>Maintainers are automatically notified by the &lt;code>CODEOWNERS&lt;/code> system. The author of a PR is responsible for advancing their PR through the review process and manually requesting maintainer feedback if necessary.&lt;/p>
&lt;/blockquote>
&lt;pre class="mermaid">sequenceDiagram
actor A as PR author
actor R as Reviewer/Maintainer
A-&amp;gt;&amp;gt;R: Asks for a review, notifying some people
R-&amp;gt;&amp;gt;A: Answers yes or no
loop Loop between author and reviewer
R--&amp;gt;&amp;gt;A: Comments, asks for changes
A--&amp;gt;&amp;gt;R: Answers to comments or requested changes
A--&amp;gt;&amp;gt;R: Makes necessary changes in dedicated &amp;#34;fixups&amp;#34;
R--&amp;gt;&amp;gt;A: Reviews, tests changes, and comments again
R--&amp;gt;&amp;gt;A: Resolves requested changes/conversations if ok
end
A-&amp;gt;&amp;gt;R: Rebase and apply fixups
R-&amp;gt;&amp;gt;A: Checks commits history
R-&amp;gt;&amp;gt;A: Approves or closes the PR
Note left of R: &amp;amp; Merges if maintainer&lt;/pre>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/tests/">Finally continue towards tests ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Tests</title><link>https://osrd.fr/en/docs/guides/contribute/contribute-code/tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/contribute-code/tests/</guid><description>
&lt;h2 id="back-end">Back-end&lt;/h2>
&lt;ul>
&lt;li>Integration tests are written with &lt;a href="https://docs.pytest.org/">pytest&lt;/a> in the &lt;code>/tests&lt;/code> folder.&lt;/li>
&lt;li>Each route described in the &lt;code>openapi.yaml&lt;/code> files must have an integration test.&lt;/li>
&lt;li>The test must check both the format and content of valid and invalid responses.&lt;/li>
&lt;/ul>
&lt;h2 id="front-end">Front-end&lt;/h2>
&lt;p>The functional writing of the tests is carried out with the &lt;em>Product Owners&lt;/em>, and the developers choose a technical implementation that precisely meets the needs expressed and fits in with the recommendations presented here.&lt;/p>
&lt;p>We use &lt;a href="https://playwright.dev/">Playwright&lt;/a> to write end-to-end tests, and &lt;a href="https://vitest.dev/">vitest&lt;/a> to write unit tests.&lt;/p>
&lt;p>The browsers tested are currently &lt;a href="https://www.mozilla.org/fr/firefox/switch/">Firefox&lt;/a> and Chromium.&lt;/p>
&lt;h3 id="basic-principles">Basic principles&lt;/h3>
&lt;ul>
&lt;li>Tests must be &lt;strong>short&lt;/strong> (1min max) and go &lt;strong>straight to the point&lt;/strong>.&lt;/li>
&lt;li>Arbitrary timeouts are outlawed; a test must systematically wait for a specific event. It is possible to use &lt;em>polling&lt;/em> (retry an action - a click for example - after a certain time) proposed in the &lt;a href="https://playwright.dev/">Playwright&amp;rsquo;s&lt;/a> API.&lt;/li>
&lt;li>All tests must be parallelizable.&lt;/li>
&lt;li>Tests must not point to or wait for text elements from the translation, prefer the &lt;em>DOM&lt;/em> tree structure or place specific &lt;code>id&lt;/code>.&lt;/li>
&lt;li>We&amp;rsquo;re not testing the data, but the application and its functionality. Data-specific tests should be developed in parallel.&lt;/li>
&lt;/ul>
&lt;h4 id="data">Data&lt;/h4>
&lt;p>&lt;strong>The data tested must be public data&lt;/strong>.
The data required (infrastructure and rolling stock) for the tests are offered in the application&amp;rsquo;s &lt;code>json&lt;/code> files, &lt;em>injected&lt;/em> at the start of each test and deleted at the end, regardless of its result or how it is stopped, including with &lt;code>CTRL+C&lt;/code>.&lt;/p>
&lt;p>This is done by API calls in typescript before launching the actual test.&lt;/p>
&lt;p>The data tested is the same, both locally and via continuous integration.&lt;/p>
&lt;h4 id="atomicity-of-a-test">Atomicity of a test&lt;/h4>
&lt;p>Each test must be &lt;strong>atomic&lt;/strong>: it is self-sufficient and cannot be divided.&lt;/p>
&lt;p>A test will target a single feature or component, provided it is not too large. A test will not test an entire module or application; it will necessarily be a set of tests, in order to preserve test atomicity.&lt;/p>
&lt;p>If a test needs elements to be created or added, these operations must be carried out by API calls in typescript upstream of the test, as is done for adding data. These elements must be deleted at the end of the test, regardless of the result or how it is stopped, including by &lt;code>CTRL+C&lt;/code>.&lt;/p>
&lt;p>This allows tests to be parallelized.&lt;/p>
&lt;p>However, in certain cases where it is relevant, a test may contain several clearly explained and justified test subdivisions (several &lt;code>test()&lt;/code> in a single &lt;code>describe()&lt;/code>).&lt;/p>
&lt;h3 id="example-of-a-test">Example of a test&lt;/h3>
&lt;p>The requirement: &amp;ldquo;We want to test the addition of a train to a timetable&amp;rdquo;.&lt;/p>
&lt;ol>
&lt;li>add the test infrastructure and rolling stock to the database &lt;strong>by API calls&lt;/strong>.&lt;/li>
&lt;li>create project, study and scenario with choice of test infrastructure &lt;strong>by API calls&lt;/strong>.&lt;/li>
&lt;li>start the test, clicking on &amp;ldquo;add one or more trains&amp;rdquo; until the presence of the trains in the timetable is verified&lt;/li>
&lt;li>the test passes, fails or is stopped, the project, study and scenario are deleted, along with the test rolling stock and infrastructure &lt;strong>by API calls&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>NB: the test will not test all the possibilities offered by the addition of trains; this should be a specific test which would test the response of the interface for all scenarios without adding trains.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;a href="https://osrd.fr/en/docs/guides/contribute/contribute-code/write-code/">Continue towards write code ‣&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Docs: Business context</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/domain_context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/domain_context/</guid><description>
&lt;p>Some definitions:&lt;/p>
&lt;h3 id="capacity">Capacity&lt;/h3>
&lt;p>&lt;strong>Capacity&lt;/strong>, in this context, is the ability to
reserve infrastructure elements to allow the passage of a train.&lt;/p>
&lt;p>Capacity is expressed in both space and time:
the reservation of an element can block a specific zone
that becomes inaccessible to other trains, and this reservation
lasts for a given time interval.&lt;/p>
&lt;p>It can be displayed
on a chart, with the time on the horizontal axis
and the distance traveled on the vertical axis.&lt;/p>
&lt;p>&lt;img src="space_time_chart.png" alt="Space-time chart">&lt;/p>
&lt;blockquote>
&lt;p>Example of a space-time chart displaying the passage of a train.&lt;/p>
&lt;p>The colors here represent aspects of the signals, but
display a consumption of the capacity as well:
when these blocks overlap for two trains, they conflict.&lt;/p>
&lt;/blockquote>
&lt;p>There is a &lt;strong>conflict&lt;/strong> between two trains when they reserve
the same object at the same time, in incompatible configurations.&lt;/p>
&lt;p>&lt;img src="conflict.png" alt="Space-time chart with conflict">&lt;/p>
&lt;blockquote>
&lt;p>Example of a space-time graph with a conflict: the second train
is faster than the first one, they are in conflict at the end
of the path, when the rectangles overlap.&lt;/p>
&lt;p>When simulating this timetable, the second train would be
slowed down by the yellow signals, caused by the
presence of the first train.&lt;/p>
&lt;/blockquote>
&lt;h3 id="train-slots">Train slots&lt;/h3>
&lt;p>A &lt;strong>train slot&lt;/strong> corresponds to a capacity reservation
for the passage of a train. It is fixed in space and time:
the departure time and the path taken are known.
On the space-time charts in this page, a train slot corresponds
to the set of blocks displayed for a train.&lt;/p>
&lt;blockquote>
&lt;p>Note: in English-speaking countries, these are often simply called &amp;ldquo;train paths&amp;rdquo;.
But in this context, this name would be ambiguous with the
physical path taken by the train.&lt;/p>
&lt;/blockquote>
&lt;p>The usual procedure is for the infrastructure manager
(e.g. SNCF Réseau) to offers train slots for sale to
railway companies (e.g. SNCF Voyageurs).&lt;/p>
&lt;p>At a given date before the scheduled day of operation,
all the train paths are allocated. But &lt;strong>there may be
enough capacity to fit more trains&lt;/strong>. Trains can fit between
scheduled slots,
when they are sufficiently far apart or have not found a buyer.&lt;/p>
&lt;p>The remaining capacity after the allocation of train paths is called
&lt;strong>residual capacity&lt;/strong>. This section explains how OSRD looks
for train slots in this residual capacity.&lt;/p></description></item><item><title>Docs: Infrastructure exploration</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/infrastructure_exploration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/infrastructure_exploration/</guid><description>
&lt;p>The first thing we need to define is &lt;em>how we move through the infrastructure&lt;/em>,
without dealing with conflicts yet.&lt;/p>
&lt;p>We need a way to define and enumerate the different possible paths and
explore the infrastructure graph, with several constraints:&lt;/p>
&lt;ol>
&lt;li>The path must be compatible with the given rolling stock
(loading gauge / electrification / signaling system)&lt;/li>
&lt;li>At any point, we need to access path properties from its start up to the
considered point. This includes block and route lists.&lt;/li>
&lt;li>We sometimes need to know where the train will go &lt;em>after&lt;/em> the
point currently being evaluated, for proper conflict detection&lt;/li>
&lt;/ol>
&lt;p>To do this, we have defined the class &lt;code>InfraExplorer&lt;/code>. It uses blocks
(sections from signal to signal) as a main subdivision.
It has 3 sections: the current block, predecessors, and a &amp;ldquo;lookahead&amp;rdquo;.&lt;/p>
&lt;p>&lt;img src="infra_explorer.svg" alt="InfraExplorer structure">&lt;/p>
&lt;p>In this example, the green arrows are the predecessor blocks.
What happens there is considered to be immutable.&lt;/p>
&lt;p>The red arrow is the current block. This is where we run
train and signaling simulations, and where we deal with conflicts.&lt;/p>
&lt;p>The blue arrows are part of the lookahead. This section hasn&amp;rsquo;t
been simulated yet, its only purpose is to know in advance
where the train will go next. In this example, it would tell us
that the bottom right signal can be ignored entirely.
The top path is the path being currently evaluated.
&lt;strong>The bottom section of the path will be evaluated in a different
and already instantiated &lt;code>InfraExplorer&lt;/code>&lt;/strong>&lt;/p>
&lt;p>The &lt;code>InfraExplorer&lt;/code> is manipulated with two main functions
(the accessors have been removed here for clarity):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">InfraExplorer&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * Clone the current object and extend the lookahead by one route, for each route starting at
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * the current end of the lookahead section. The current instance is not modified.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fun&lt;/span> &lt;span style="color:#000">cloneAndExtendLookahead&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span> &lt;span style="color:#000">Collection&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">InfraExplorer&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * Move the current block by one, following the lookahead section. Can only be called when the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> * lookahead isn&amp;#39;t empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">fun&lt;/span> &lt;span style="color:#000">moveForward&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span> &lt;span style="color:#000">InfraExplorer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>cloneAndExtendLookahead()&lt;/code> is the method that actually enumerates the
different paths, returning clones for each possibility.
It&amp;rsquo;s called when we need a more precise lookahead to properly identify
conflicts, or when it&amp;rsquo;s empty and we need to move forward.&lt;/p>
&lt;p>A variation of this class can also keep track of the train simulation
and time information (called &lt;code>InfraExplorerWithEnvelope&lt;/code>).
This is the version that is actually used to explore the infrastructure.&lt;/p></description></item><item><title>Docs: Physical modeling</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/physical_modeling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/physical_modeling/</guid><description>
&lt;!-- script to auto-render KaTeX extension $$..$$ for outline formula, \\(...\\) for inline formula -->
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css" integrity="sha384-KiWOvVjnN8qwAZbuQyWDIbfCLFhLXNETzBQjA/92pIowpC0d2O3nppDGQVgwd2nB" crossorigin="anonymous">
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js" integrity="sha384-0fdwu/T/EQMsQlrHCCHoH10pkPLlKA1jL5dFyUOvB3lfeT2540/2g6YgSi2BL14p" crossorigin="anonymous">&lt;/script>
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/contrib/auto-render.min.js" integrity="sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR" crossorigin="anonymous"
onload="renderMathInElement(document.body);">&lt;/script>
&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6">&lt;/script>
&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">&lt;/script>
&lt;p>Physical modelling plays an important role in the OSRD core calculation. It allows us to simulate train traffic, and it must be as realistic as possible train traffic, and it must be as realistic as possible.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="force-review">Force review&lt;/h3>
&lt;/font>
&lt;p>To calculate the displacement of the train over time, we must first calculate its speed at each instant.
A simple way to obtain this speed is to calculate the acceleration.
Thanks to the fundamental principle of dynamics, the acceleration of the train at each instant is directly dependent on the different forces applied to it: $$ \sum \vec{F}=m\vec{a} $$&lt;/p>
&lt;p>&lt;img src="../forces.png" alt="Running time">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Traction&lt;/strong>: The value of the traction force \(F_{mot}\) depends on several factors:&lt;/p>
&lt;ul>
&lt;li>the rolling stock&lt;/li>
&lt;li>the speed of the train, \(v^{\prime}x\) according to the effort-speed curve below:&lt;/li>
&lt;/ul>
&lt;p>$$ {\vec{F_{mot}}(v_{x^{\prime}}, x^{\prime})=F_{mot}(v_{x^{\prime}}, x^{\prime})\vec{e_x^{\prime}}} $$&lt;/p>
&lt;p>&lt;img src="../effort-vitesse.png" alt="Running time" title="Example of a train effort-speed curve">&lt;/p>
&lt;blockquote>
&lt;p>The &lt;strong>x&lt;/strong> axis represents the speed of the train in [km/h], the &lt;strong>y&lt;/strong> axis the value of the traction force in [kN].&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>the action of the driver, who accelerates more or less strongly depending on where he is on his journey&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Braking&lt;/strong> : The value of the braking force \(F_{brk}\) also depends on the rolling stock and the driver&amp;rsquo;s action but has a constant value for a given rolling stock. In the current state of modelling, braking is either zero or at its maximum value.&lt;/li>
&lt;/ul>
&lt;p>$$ \vec{F_{brk}}(x^{\prime})=-F_{brk}(x^{\prime}){\vec{e_{x^{\prime}}}} $$&lt;/p>
&lt;p>A second approach to modelling braking is the so-called hourly approach, as it is used for hourly production at SNCF. In this case, the deceleration is fixed and the braking no longer depends on the different forces applied to the train. Typical deceleration values range from 0.4 to 0.7m/s².&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Forward resistance&lt;/strong>: To model the forward resistance of the train, the Davis formula is used, which takes into account all the friction and aerodynamic resistance of the air. The value of the drag depends on the speed \(v^{\prime}_x\). The coefficients \(A\), \(B\), et \(C\) depend on the rolling stock.&lt;/li>
&lt;/ul>
&lt;p>$$ {\vec{R}(v_{x^{\prime}})}=-(A+Bv_{x^{\prime}}+{Cv_{x^{\prime}}}^2){\vec{e_{x^{\prime}}}} $$&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Weight (slopes + turns)&lt;/strong> : The weight force given by the product between the mass \(m\) of the train and the gravitational constant \(g\) is projected on the axes \(\vec{e_x}^{\prime}\) and \(\vec{e_y}^{\prime}\).For projection, we use the angle \(i(x^{\prime})\), which is calculated from the slope angle \(s(x^{\prime})\) corrected by a factor that takes into account the effect of the turning radius \(r(x^{\prime})\).&lt;/li>
&lt;/ul>
&lt;p>$$
\vec{P(x^{\prime})}=-mg\vec{e_y}(x^{\prime})=
-mg\Big[sin\big(i(x^{\prime})\big){\vec{e_{x^{\prime}}}(x^{\prime})}+cos\big(i(x^{\prime})\big){\vec{e_{{\prime}}}(x^{\prime})}\Big]
$$&lt;/p>
&lt;p>$$ i(x^{\prime})= s(x^{\prime})+\frac{800m}{r(x^{\prime})} $$&lt;/p>
&lt;br>
&lt;ul>
&lt;li>&lt;strong>Ground Reaction&lt;/strong> : The ground reaction force simply compensates for the vertical component of the weight, but has no impact on the dynamics of the train as it has no component along the axis \({\vec{e_x}^{\prime}}\).&lt;/li>
&lt;/ul>
&lt;p>$$ \vec{R_{gnd}}=R_{gnd}{\vec{e_{y^{\prime}}}} $$&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="forces-balance">Forces balance&lt;/h3>
&lt;/font>
&lt;p>The equation of the fundamental principle of dynamics projected onto the axis \({\vec{e_x}^{\prime}}\) (in the train frame of reference) gives the following scalar equation:&lt;/p>
&lt;p>$$
a_{x^{\prime}}(t) = \frac{1}{m}\Big
[F_{mot}(v_{x^{\prime}}, x^{\prime})-F_{brk}(x^{\prime})-(A+Bv_{x^{\prime}}+{Cv_{x^{\prime}}}^2)-mgsin(i(x^{\prime}))\Big]
$$&lt;/p>
&lt;p>This is then simplified by considering that despite the gradient the train moves on a plane and by amalgamating
\(\vec{e_x}\) and \(\vec{e_x}^{\prime}\). The gradient still has an impact on the force balance, but it is assumed that the train is only moving horizontally, which gives the following simplified equation:&lt;/p>
&lt;p>$$ a_{x}(t) = \frac{1}{m}\Big[F_{mot}(v_{x}, x)-F_{brk}(x)-(A+Bv_{x}+{Cv_{x}}^2)-mgsin(i(x))\Big] $$&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="resolution">Resolution&lt;/h3>
&lt;/font>
&lt;p>The driving force and the braking force depend on the driver&amp;rsquo;s action (he decides to accelerate or brake more or less strongly depending on the situation). This dependence is reflected in the dependence of these two forces on the position of the train. The weight component is also dependent on the position of the train, as it comes directly from the slopes and bends below the train.&lt;/p>
&lt;p>In addition, the driving force depends on the speed of the train (according to the speed effort curve) as does the resistance to forward motion.
resistance.&lt;/p>
&lt;p>These different dependencies make it impossible to solve this equation analytically, and the acceleration of the train at each moment must be calculated by numerical integration.&lt;/p></description></item><item><title>Docs: Editoast internal authorization API</title><link>https://osrd.fr/en/docs/reference/design-docs/auth/editoast-internal-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/auth/editoast-internal-api/</guid><description>
&lt;div class="pageinfo pageinfo-warn">
&lt;p>This document is an annex to the &lt;a href="..">main authorization design document&lt;/a>&lt;/p>
&lt;/div>
&lt;div class="pageinfo pageinfo-info">
&lt;p>This design document is not intended to describe the exact editoast authorization API.
The actual implementation may slightly differ. If major limitations were uncovered, please
update this document.&lt;/p>
&lt;/div>
&lt;h2 id="context-and-requirements">Context and requirements&lt;/h2>
&lt;p>The following invariants were deemed worth validating:&lt;/p>
&lt;ul>
&lt;li>(high priority) role and privilege checks were performed&lt;/li>
&lt;li>(low priority) privilege checks are performed before changes are made / data is returned&lt;/li>
&lt;li>(low priority) access patterns match privilege checks&lt;/li>
&lt;/ul>
&lt;p>Other design criteria have an impact:&lt;/p>
&lt;ul>
&lt;li>(high priority) misuse potential&lt;/li>
&lt;li>(high priority) usage complexity and developer experience&lt;/li>
&lt;li>(medium priority) ease of migration&lt;/li>
&lt;li>(low priority) static checks are preferred&lt;/li>
&lt;/ul>
&lt;h2 id="data-model">Data model&lt;/h2>
&lt;h3 id="builtin-roles">Builtin roles&lt;/h3>
&lt;p>First, we define an enum for all our builtin roles:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(Roles, EnumSetType, Copy)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:read&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:write&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">, implies = [InfraRead])]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InfraWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rolling-stock:read&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rolling-stock:write&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">, implies = [RollingStockRead])]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RollingStockWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;timetable:read&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;timetable:write&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">, implies = [TimetableRead])]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;operational-studies:read&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">, implies = [TimetableRead, InfraRead, RollingStockRead])]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">OperationalStudiesRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[role(tag = &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;operational-studies:write&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">, implies = [OperationalStudiesRead, TimetableWrite])]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which could expand to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[derive(EnumSetType, Copy)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">InfraWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RollingStockWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">OperationalStudiesRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ROLES&lt;/span>: &lt;span style="color:#000">phf&lt;/span>::&lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;amp;&lt;/span>&lt;span style="color:#204a87">&amp;#39;static&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">str&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">phf&lt;/span>::&lt;span style="color:#000">phf_map!&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:read&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:write&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rolling-stock:read&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rolling-stock:write&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;timetable:read&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;timetable:write&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;operational-studies:read&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;operational-studies:write&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">parse_tag&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tag&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ROLES&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tag&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">tag&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87">&amp;#39;static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">str&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:read&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;infra:write&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rolling-stock:read&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rolling-stock:write&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;timetable:read&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;timetable:write&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;operational-studies:read&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;operational-studies:write&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">implies&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesRead&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">InfraRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">RollingStockRead&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">OperationalStudiesRead&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">TimetableWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="application-roles">Application roles&lt;/h3>
&lt;p>Application roles are loaded from a yaml file at application startup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">application_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ops&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;DevOps&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">description&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Software engineers in charge of operating and maintaining the app&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">implies&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">admin]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">stdcm-customer&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;STDCM customer&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">implies&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">stdcm]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">operational-studies-customer&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Operational studies customer&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">implies&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">operational-studies:read]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">operational-studies-analyse&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Operational studies analyse&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">implies&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">operational-studies:write]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once loaded into editoast, app roles are resolved to a set of user roles:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">UserRoles&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EnumSet&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">AppRoleResolver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">HashMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">UserRoles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// The API does not allow querying app roles, as it should have no impact on authorization:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/// only the final resolved set of builtin roles matters.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AppRoleResolver&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">load_from_config&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">path&lt;/span>: &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">E&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">resolve&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">app_role_tag&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">UserRoles&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">E&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="resources-and-grants">Resources and grants&lt;/h3>
&lt;p>TODO: decide where to process implicit grants: database or editoast?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Group&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Project&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Timetable&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Infra&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RollingStockCollection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">grant_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">subject&lt;/span>: &lt;span style="color:#000">SubjectId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">privlvl&lt;/span>: &lt;span style="color:#000">GrantPrivLvl&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">granted_by&lt;/span>: &lt;span style="color:#000">UserId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">granted_at&lt;/span>: &lt;span style="color:#000">Timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">all_grants&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_type&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">applicable_grants&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_type&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">subject_ids&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SubjectId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">revoke_grant&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_type&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">grant_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">update_grant&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_type&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">grant_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">privlvl&lt;/span>: &lt;span style="color:#000">GrantPrivLvl&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="low-level-authorization-api">Low level authorization API&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">PrivCheck&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_type&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resource_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">minimum_privlvl&lt;/span>: &lt;span style="color:#000">EffectivePrivLvl&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// The authorizer is injected into each request by a middleware.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/// The middleware finds the user ID associated with the request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/// At the end of each request, it ensures roles and privileges were checked.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">user_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">checked_roles&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">UserRoles&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">checked_privs&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PrivCheck&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">FromRequest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">check_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DatabaseConnection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">required_roles&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">BuiltinRole&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">check_privs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DatabaseConnection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">required_privs&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">PrivCheck&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This API is then used as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[post(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/project/{project_id}/study/{study_id}/scenario&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">create_scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">path&lt;/span>: &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>: &lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DatabasePool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">form&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>: &lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ScenarioCreateForm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">project_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">into_inner&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// validate that study.scenario == scenario
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">check_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">BuiltinRoles&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">]).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">check_privs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Creator&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">into&lt;/span>&lt;span style="color:#000;font-weight:bold">()]).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// create the object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="high-level-authorization-api">High level authorization API&lt;/h2>
&lt;h3 id="-proposal-fully-dynamic-checks">🤔 Proposal: fully dynamic checks&lt;/h3>
&lt;p>This proposal suggests dynamically enforcing all authorization invariants:&lt;/p>
&lt;ul>
&lt;li>&lt;em>role and privilege checks were performed&lt;/em>: The authorizer records all checks, and panics / logs an error if no check is made&lt;/li>
&lt;li>&lt;em>privilege checks are performed before changes are made / data is returned&lt;/em>: checked database accesses
(the default) cannot be made before committing authorization checks. No more authorization check can be made after committing.&lt;/li>
&lt;li>&lt;em>access patterns match privilege checks&lt;/em>: Check database access functions ensure a prior check was
made using the Authorizer&amp;rsquo;s check log.&lt;/li>
&lt;/ul>
&lt;p>Each database access method thus gets two variants:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>a checked variant (the default), which takes the Authorizer as a parameter. This variants panics if:&lt;/p>
&lt;ul>
&lt;li>a resource is accessed before authorization checks are committed&lt;/li>
&lt;li>a resource is accessed without a prior authorizer check.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>an unchecked variant. its use should be limited to:&lt;/p>
&lt;ul>
&lt;li>fetching data for authorization checks&lt;/li>
&lt;li>updating modification dates&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[post(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/project/{project_id}/study/{study_id}/scenario&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">create_scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">path&lt;/span>: &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>: &lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DatabasePool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">form&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>: &lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ScenarioCreateForm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">project_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">into_inner&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// Check if the project and the study exist
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">project&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">check_project_study_conn&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">project_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">check_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">BuiltinRoles&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">check_privs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Creator&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">into&lt;/span>&lt;span style="color:#000;font-weight:bold">()])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// all checks done, checked database accesses allowed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">commit&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// create the scenario
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario&lt;/span>: &lt;span style="color:#000">Scenario&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">into_scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_id&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">create&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">db_pool&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clone&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">authz&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// Update study last_modification field
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">update_last_modified&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// Update project last_modification field
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">project&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">update_last_modified&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bonus-proposal-require-roles-using-macros">Bonus proposal: require roles using macros&lt;/h3>
&lt;p>TODO: check if this is worth keeping&lt;/p>
&lt;p>Then, we annotate each endpoint that require role restrictions with &lt;code>requires_roles&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[post(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/scenario&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[requires_roles(BuiltinRoles::OperationalStudiesWrite)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">create_scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">user&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">GwUserId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DatabasePool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which may expand to something similar to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">create_scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">user&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">GwUserId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DatabasePool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">required_roles&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">BuiltinRoles&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">editoast_models&lt;/span>::&lt;span style="color:#000">check_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">user_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">required_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Err&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">403&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">move&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">todo!&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-proposal-static-access-control">🤔 Proposal: Static access control&lt;/h3>
&lt;div class="pageinfo pageinfo-info">
&lt;p>This proposal aims at improving the &lt;code>Authorizer&lt;/code> described above by building on it a safety layer that encodes granted permissions into the type system.&lt;/p>
&lt;p>This way, if access patterns do not match the privilege checks performed beforehand, the program will fail to compile and precisely pinpoint the privilege override as a type error.&lt;/p>
&lt;/div>
&lt;p>To summarize, the &lt;code>Authorizer&lt;/code> allows us to:&lt;/p>
&lt;ol>
&lt;li>Pre-fetch the user of the request and its characteristics as a middleware&lt;/li>
&lt;li>Check their roles&lt;/li>
&lt;li>Maintain a log of authorization requests on specific resources, and check if they hold&lt;/li>
&lt;li>Guarantees that no authorization will be granted passed a certain point (&lt;code>commit&lt;/code> function)&lt;/li>
&lt;li>At the end of an endpoint, checks that permissions were granted or &lt;code>panic!&lt;/code>s otherwise&lt;/li>
&lt;/ol>
&lt;p>While all these checks are performed at runtime, those can be tested rather trivially in unit tests.&lt;/p>
&lt;p>However, the &lt;code>Authorizer&lt;/code> cannot check that the endpoints actually respect the permission level they asked for when they access the DB. For example, an endpoint might ask for &lt;code>Read&lt;/code> privileges on a &lt;code>Timetable&lt;/code>, only to delete it afterwards. This is trivial to check if the privilege override happens in the same function, but it can be much more vicious if that happens conditionally, in another function, deep down the call stack. For the same reasons, refactoring code subject to authorizations becomes much more risky and error prone.&lt;/p>
&lt;p>Hence, for both development and review experience, to ease writing and refactoring authorizing code, to be confident our system works, and for general peace of mind, we need a way to ensure that an endpoint won&amp;rsquo;t go beyond the privilege level it required for all of its code paths.&lt;/p>
&lt;p>We can do that either statically or dynamically.&lt;/p>
&lt;h4 id="dynamic-access-pattern-checks">Dynamic access pattern checks&lt;/h4>
&lt;p>Let&amp;rsquo;s say we keep the &lt;code>Authorizer&lt;/code> as the high-level API for authorization.
It holds a log of grants. Therefore, any DB operation that needs to be authorized must, in addition to the &lt;code>conn&lt;/code>, take an &lt;code>Arc&amp;lt;Authorizer&amp;gt;&lt;/code> parameter and let the operation check that it&amp;rsquo;s indeed authorized. For example, every &lt;code>retrieve(conn, authorizer, id)&lt;/code> operation would ask the authorizer the permission before querying the DB.&lt;/p>
&lt;p>This approach works and has the benefit of being easy to understand, but does not provide any guarantee that the access patterns match the granted authorizations and that privilege override cannot happen.
A way to ensure that would be to thoroughly test each endpoint and ensure that the DB accesses &lt;code>panic&lt;/code> in expected situations. Doing so manually is extremely tedious and fragile in the long run, so let&amp;rsquo;s focus on automated tests.
To make sure that, at any moment, each endpoint doesn&amp;rsquo;t override its privileges, we&amp;rsquo;d need a test for each relevant privilege level and for each code path accessing resources. Admittedly this would be great, but:&lt;/p>
&lt;ul>
&lt;li>it &lt;strong>heavily depends on test coverage&lt;/strong> (which we don&amp;rsquo;t have) to make sure no code path is left out, i.e. that no test is missing&lt;/li>
&lt;li>it&amp;rsquo;s unrealistic given the current state of things and how fast editoast changes&lt;/li>
&lt;li>tests would be extremely repetitive, and mistakes will happen&lt;/li>
&lt;li>the test suite of an endpoint now not only depends on what it should do, but also on &lt;strong>how&lt;/strong> it should do it: i.e. to know how to test your endpoint, you need to know precisely what DB operations will be performed, under what conditions, on all code paths, and replicate that&lt;/li>
&lt;li>when refactoring code subject to authorization that&amp;rsquo;s shared across several endpoints, the tests of each of these endpoints would need to be examined to ensure no check goes missing&lt;/li>
&lt;li>unless we postpone the creation of these tests and accept a lower level of confidence in our system, even temporarily(TM), the authz migration would be slowed down significantly&lt;/li>
&lt;/ul>
&lt;p>Or we could just accept the risk.&lt;/p>
&lt;p>Or we could statically ensure that no endpoint override its requested privileges, using the typesystem, and be sure that such issues can (almost) never arise.&lt;/p>
&lt;h4 id="static-checks">Static checks&lt;/h4>
&lt;p>The idea is to provide an high-level API for authorization, on top of the &lt;code>Authorizer&lt;/code>. It encodes granted privileges into the typesystem. For example,
for a request &lt;code>GET /timetable/42&lt;/code>, the endpoint will ask from the &lt;code>Authorizer&lt;/code> an &lt;code>Authz&amp;lt;Timetable, Read&amp;gt;&lt;/code> object:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_authz&lt;/span>: &lt;span style="color:#000">Authz&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Timetable&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">authorize&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The authorizer does two things here:&lt;/p>
&lt;ol>
&lt;li>Checks that the privilege level of the user allows them to &lt;code>Read&lt;/code> on the timetable ID#42.&lt;/li>
&lt;li>Builds an &lt;code>Authz&lt;/code> object that stores the ID#42 for later checks, which encodes in the type system that we have a &lt;code>Read&lt;/code> authorization on &lt;em>some&lt;/em> &lt;code>Timetable&lt;/code> resources.&lt;/li>
&lt;/ol>
&lt;p>Then, after we &lt;code>authorizer.commit();&lt;/code>, we can use the &lt;code>Authz&lt;/code> to effectively request the timetable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable&lt;/span>: &lt;span style="color:#000">Timetable&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">retrieve&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Authz&lt;/code> checks that the ID#42 is indeed authorized before forwarding the call the &lt;code>modelv2::Retrieve::retrieve&lt;/code> function that performs the query.
However, if by mistake we wrote:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">delete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>we&amp;rsquo;d get a compilation error such as &lt;code>Trait AuthorizedDelete is not implemented for Authz&amp;lt;Timetable, Read&amp;gt;&lt;/code>, effectively preventing a privilege override statically.&lt;/p>
&lt;p>On a more realistic example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Scenario&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DatabaseConnection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario_authz&lt;/span>: &lt;span style="color:#000">Authz&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_authz&lt;/span>: &lt;span style="color:#000">Authz&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// open transaction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario_authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">delete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cs&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Study&lt;/span>::&lt;span style="color:#000">changeset&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">last_update&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Datetime&lt;/span>::&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">update&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">cs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(())&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach brings several advantages:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>correctness&lt;/strong>: the compiler will prevent any privilege override for us&lt;/li>
&lt;li>&lt;strong>readability&lt;/strong>: if a function requires some form of authorization, it will show in its prototype&lt;/li>
&lt;li>&lt;strong>ease of writing&lt;/strong>: we can&amp;rsquo;t write DB operations that ultimately wouldn&amp;rsquo;t be authorized, avoiding a potential full rewrite once we notice the problem (and linting is on our side to show problems early)&lt;/li>
&lt;li>&lt;strong>more declarative&lt;/strong>: if you want to read an object, you ask for a &lt;code>Read&lt;/code> permission, the system is then responsible for checking the privilege level and map that to a set of allowed permissions. This way we abstract a little over the hierarchy of privileges a resource can have.&lt;/li>
&lt;li>&lt;strong>ease of refactoring&lt;/strong>: thanks rustc ;)&lt;/li>
&lt;li>&lt;strong>flexibility&lt;/strong>: since the &lt;code>Authz&lt;/code> has a reference to the &lt;code>Authorizer&lt;/code>, the API mixes well with more dynamic contexts (should we need that in the future)&lt;/li>
&lt;li>&lt;strong>migration&lt;/strong>
&lt;ul>
&lt;li>shouldn&amp;rsquo;t be too complex or costly since the &lt;code>Authz&lt;/code> wraps the &lt;code>ModelV2&lt;/code> traits&lt;/li>
&lt;li>&lt;em>will require changes in the same areas that would be impacted by a dynamic checker&lt;/em>, no more, no less (even in the dynamic context mentioned above we still need to pass the &lt;code>Arc&amp;lt;Authorizer&amp;gt;&lt;/code> down the call stack)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>contamination&lt;/strong>: admittedly, this API is slightly more contaminating than just passing an &lt;code>Arc&amp;lt;Authorizer&amp;gt;&lt;/code> everywhere. However, this issue is mitigated on several fronts:
&lt;ul>
&lt;li>most endpoints in editoast either access the DB in the endpoint function itself, or in at most one or two function calls deep. So the contamination likely won&amp;rsquo;t spread far and the migration shouldn&amp;rsquo;t take much more time.&lt;/li>
&lt;li>if we notice that a DB call deep down the call stack requires an &lt;code>Authz&amp;lt;T, _&amp;gt;&lt;/code> that we need to forward through many calls, it&amp;rsquo;s probably pathological of a bad architecture&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>The following sections explore how to use this API:&lt;/p>
&lt;ul>
&lt;li>to define authorized resources&lt;/li>
&lt;li>implement the effective privilege level logic&lt;/li>
&lt;li>to deal with complex resources (here &lt;code>Study&lt;/code>) which need custom authorization rules and that are not atomic (the budgets follow different rules than the rest of the metadata)&lt;/li>
&lt;li>to implement an endpoint that require different permissions (&lt;code>create_scenario&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h5 id="actions">Actions&lt;/h5>
&lt;p>We define all actions our &lt;code>Authz&lt;/code> is able to expose at both type-level and at runtime (classic CRUD + Append for exploitation studies).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">mod&lt;/span> &lt;span style="color:#000">action&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Cruda&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthorizedAction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">as_cruda&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Cruda&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthorizedAction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthorizedAction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthorizedAction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthorizedAction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthorizedAction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The motivation behind this is that at usage, we don&amp;rsquo;t usually care about the privilege of a user over a resource. We only care, if we&amp;rsquo;re about to read a resource, whether the user has a privilege level &lt;strong>high enough&lt;/strong> to do so.&lt;/p>
&lt;p>The proposed paradigm here is to ask the permission to to an &lt;strong>action over a resource&lt;/strong>, and let the resource definition module decide (using its own effective privilege hierarchy) whether the action is authorized or not.&lt;/p>
&lt;h5 id="standard-and-custom-effective-privileges">Standard and custom effective privileges&lt;/h5>
&lt;p>We need to define the effective privilege level for each resource. For most
resources, a classic &lt;code>Reader &amp;lt; Writer &amp;lt; Owner&lt;/code> is enough. So we expose that by default, leaving the choice to each resource to provide their own.&lt;/p>
&lt;p>We also define an enum providing the origin of a privilege, which is a useful
information for permission sharing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// built-in the authorization system
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#[derive(PartialOrd, PartialEq)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">StandardPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Own&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">StandardPrivilegeLevelOrigin&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// It&amp;#39;s an explicit privilege
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// The implicit privilege comes from a group the user belongs to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Group&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// The implicit privilege is granted publicly (authz_grant_xyz.subject IS NULL)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Public&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PrivilegeLevel&lt;/span>: &lt;span style="color:#204a87">PartialOrd&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">PartialEq&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Origin&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StandardPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Origin&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StandardPrivilegeLevelOrigin&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="grant-definition">Grant definition&lt;/h5>
&lt;p>Then we need to associate to each grant in DB its effective privilege level and origin.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// struct AuthzGrantInfra is a struct that models the table authz_grant_infra
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EffectiveGrant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthzGrantInfra&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">EffectivePrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StandardPrivilegeLevel&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">fetch_grants&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DbConnection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">subject&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">Subject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">keys&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">GrantMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">EffectivePrivilegeLevel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;?&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">crate&lt;/span>::&lt;span style="color:#000">tables&lt;/span>::&lt;span style="color:#000">authz_grants_infra&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>GrantMap&amp;lt;PrivilegeLevel&amp;gt;&lt;/code> is an internal representation of a collection of grants (implicit and explicit) with some privilege level hierarchy (custom or not).&lt;/p>
&lt;h5 id="resource-definition">Resource definition&lt;/h5>
&lt;p>Each resource is then associated to a model and a grant type. We also declare which actions are allowed based on how we want the model to be used given the effective privilege of the resource in DB.&lt;/p>
&lt;p>The &lt;code>ResourceType&lt;/code> is necessary for the dynamic context of the underlying &lt;code>Authorizer&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Infra&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthzGrantInfra&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TYPE&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ResourceType&lt;/span>::&lt;span style="color:#000">Infra&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Returns None is the action is prohibited
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">minimum_privilege_required&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">action&lt;/span>: &lt;span style="color:#000">Cruda&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">Grant&lt;/span>::&lt;span style="color:#000">EffectivePrivilegeLevel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Cruda&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StandardPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">as&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Some&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Own&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it!&lt;/p>
&lt;p>The rest of the mechanics are located within the authorization system.&lt;/p>
&lt;h5 id="a-more-involved-example-studies">A more involved example: Studies&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">//////// Privilege levels
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ReadMetadata&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// a scenario of the study has been shared
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// can only create scenarios
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Own&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">StudyPrivilegeLevelOrigin&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Group&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Project&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// the implicit privilege comes from the user&amp;#39;s grants on the study&amp;#39;s project
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Public&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Origin&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyPrivilegeLevelOrigin&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">///////// Effective grant retrieval
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EffectiveGrant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthzGrantStudy&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">EffectivePrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">fetch_grants&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DbConnection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">subject&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">Subject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">keys&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">GrantMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#3465a4">Self&lt;/span>::&lt;span style="color:#000">EffectivePrivilegeLevel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;?&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// We implement here the logic of implicit privileges where an owner
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// of a project is also owner of all its studies
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">crate&lt;/span>::&lt;span style="color:#000">tables&lt;/span>::&lt;span style="color:#000">authz_grants_study&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">inner_join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">crate&lt;/span>::&lt;span style="color:#000">tables&lt;/span>::&lt;span style="color:#000">study&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.))&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">inner_join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">crate&lt;/span>::&lt;span style="color:#000">tables&lt;/span>::&lt;span style="color:#000">project&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.))&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">inner_join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">crate&lt;/span>::&lt;span style="color:#000">tables&lt;/span>::&lt;span style="color:#000">authz_grants_project&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">on&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.))&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//////// Authorized resources
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Budgets of the study (can be read and updated by owners)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">StudyBudgets&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyBudgets&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthzGrantStudy&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TYPE&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ResourceType&lt;/span>::&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">minimum_privilege_required&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">action&lt;/span>: &lt;span style="color:#000">Cruda&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Cruda&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">as&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Some&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Own&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">_&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Non-sensitive metadata available to users with privilege level MinimalMetadata (can only be read)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">StudyMetadata&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyMetadata&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthzGrantStudy&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TYPE&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ResourceType&lt;/span>::&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">minimum_privilege_required&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">action&lt;/span>: &lt;span style="color:#000">Cruda&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Cruda&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">as&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Some&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">ReadMetadata&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">_&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// A full study (can be created, read, updated, appended and deleted)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">impl&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Resource&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Grant&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AuthzGrantStudy&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TYPE&lt;/span>: &lt;span style="color:#000">ResourceType&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ResourceType&lt;/span>::&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">minimum_privilege_required&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">action&lt;/span>: &lt;span style="color:#000">Cruda&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Cruda&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">StudyPrivilegeLevel&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">as&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Some&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">action&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">lvl&lt;/span>::&lt;span style="color:#000">Own&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="concrete-endpoint-definition">Concrete endpoint definition&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#[post(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/scenario&amp;#34;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">)]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">create_scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>: &lt;span style="color:#000">Arc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>: &lt;span style="color:#000">DatabaseConnection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>: &lt;span style="color:#000">web&lt;/span>::&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">DatabasePool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">form&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>: &lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ScenarioCreateForm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">path&lt;/span>: &lt;span style="color:#000">Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authz&lt;/span>: &lt;span style="color:#000">Authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#204a87">Result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">db_pool&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">project_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">into_inner&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ScenarioCreateForm&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">infra_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_id&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">..&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">form&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">authorize_roles&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">BuiltinRoles&lt;/span>::&lt;span style="color:#000">OperationalStudiesWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">]).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">_&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">authorize&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Timetable&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">timetable_id&lt;/span>&lt;span style="color:#000;font-weight:bold">]).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">_&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">authorize&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Infra&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">infra_id&lt;/span>&lt;span style="color:#000;font-weight:bold">]).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_authz&lt;/span>: &lt;span style="color:#000">Authz&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Study&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Append&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">authorize&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">study_id&lt;/span>&lt;span style="color:#000;font-weight:bold">]).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">authorizer&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">commit&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">transaction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">move&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario&lt;/span>: &lt;span style="color:#000">Scenario&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">study_authz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mut&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">form&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">into&lt;/span>&lt;span style="color:#000;font-weight:bold">()).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">scenario&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">into_response&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}).&lt;/span>&lt;span style="color:#204a87;font-weight:bold">await&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87">Ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Json&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Logo</title><link>https://osrd.fr/en/docs/guides/logo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/logo/</guid><description>
&lt;p>You can download each logo independently by clicking directly on it, or &lt;a href="pictures/logo-osrd.zip">all the logos compressed into a zip file&lt;/a>.&lt;/p>
&lt;p>It is advisable to carefully choose the logo you want to use, depending on the background on which you want to display it.&lt;/p>
&lt;p>Modification, addition or deletion of the &lt;strong>shading&lt;/strong> other than as presented in the logos &lt;strong>are not authorised&lt;/strong> (this applies more generally throughout the design, the choice to use &lt;em>drop shadows&lt;/em> is part of the design considerations, it is not a variable element).&lt;/p>
&lt;h3 id="official">Official&lt;/h3>
&lt;div style="display:inline-block;padding:16px;background-color:white">
&lt;a target="_blank" href="pictures/logo-osrd-color-black.svg">
&lt;img src="pictures/logo-osrd-color-black.svg" width=256>
&lt;/a>
&lt;/div>
&lt;h3 id="official-for-dark-backgrounds">Official for dark backgrounds&lt;/h3>
&lt;div style="display:inline-block;padding:16px;background-color:#333">
&lt;a target="_blank" href="pictures/logo-osrd-color-white.svg">
&lt;img src="pictures/logo-osrd-color-white.svg" width=256>
&lt;/a>
&lt;/div>
&lt;h3 id="white">White&lt;/h3>
&lt;div style="display:inline-block;padding:16px;background-color:#333">
&lt;a target="_blank" href="pictures/logo-osrd-white.svg">
&lt;img src="pictures/logo-osrd-white.svg" width=256>
&lt;/a>
&lt;/div>
&lt;h3 id="black">Black&lt;/h3>
&lt;div style="display:inline-block;padding:16px;background-color:white">
&lt;a target="_blank" href="pictures/logo-osrd-black.svg">
&lt;img src="pictures/logo-osrd-black.svg" width=256>
&lt;/a>
&lt;/div>
&lt;h3 id="favicons-logo-without-text">Favicons, logo without text&lt;/h3>
&lt;div style="display:inline-block;padding:16px;background-color:white">
&lt;a target="_blank" href="pictures/fav-osrd-color.svg">
&lt;img src="pictures/fav-osrd-color.svg" width=64>
&lt;/a>
&lt;/div>
&lt;div style="display:inline-block;padding:16px;background-color:white;margin-left:16px">
&lt;a target="_blank" href="pictures/fav-osrd-black.svg">
&lt;img src="pictures/fav-osrd-black.svg" width=64>
&lt;/a>
&lt;/div>
&lt;div style="display:inline-block;padding:16px;background-color:#333;margin-left:16px">
&lt;a target="_blank" href="pictures/fav-osrd-white.svg">
&lt;img src="pictures/fav-osrd-white.svg" width=64>
&lt;/a>
&lt;/div>
&lt;h2 id="-what-you-cant-do">🚫 What you can&amp;rsquo;t do&lt;/h2>
&lt;h4 id="too-small--16px-height">Too small (&amp;lt; 16px height)&lt;/h4>
&lt;img src="pictures/dont/dont5.svg" style="height:32px">
&lt;h4 id="disproportion">Disproportion&lt;/h4>
&lt;img src="pictures/dont/dont1.svg" style="margin-left:16px;height:64px">
&lt;h4 id="change-the-text-colour-or-drop-shadow">Change the text colour or drop shadow&lt;/h4>
&lt;img src="pictures/dont/dont2.svg" style="height:64px">
&lt;h4 id="changing-direction">Changing direction&lt;/h4>
&lt;img src="pictures/dont/dont3.svg" style="margin-left:16px;height:64px">
&lt;h4 id="deformation">Deformation&lt;/h4>
&lt;img src="pictures/dont/dont4.svg" style="height:64px">
&lt;h2 id="-what-you-can-do">✅ What you can do&lt;/h2>
&lt;h4 id="changing-the-internal-colour-for-a-specific-event">Changing the internal colour for a specific event&lt;/h4>
&lt;div>
&lt;a style="display:inline-block;padding:8px;background-color:white;" href="pictures/events/xmas-fav-osrd-color.svg" target="_blank">
&lt;img src="pictures/events/xmas-fav-osrd-color.svg" style="height:32px">
&lt;/a>
&lt;a style="display:inline-block;margin-left:8px;padding:8px;background-color:white;" href="pictures/events/xmas-logo-osrd-color-black.svg" target="_blank">
&lt;img src="pictures/events/xmas-logo-osrd-color-black.svg" style="height:32px">
&lt;/a>
&lt;a style="display:inline-block;margin-left:8px;padding:8px;background-color:#333" href="pictures/events/xmas-logo-osrd-color-white.svg">
&lt;img src="pictures/events/xmas-logo-osrd-color-white.svg" style="height:32px">
&lt;/a>
&lt;/div>
&lt;div style="margin-top:8px">
&lt;a style="display:inline-block;padding:8px;background-color:white;" href="pictures/events/proud-fav-osrd-color.svg" target="_blank">
&lt;img src="pictures/events/proud-fav-osrd-color.svg" style="height:32px">
&lt;/a>
&lt;a style="display:inline-block;margin-left:8px;padding:8px;background-color:white;" href="pictures/events/proud-logo-osrd-color-black.svg" target="_blank">
&lt;img src="pictures/events/proud-logo-osrd-color-black.svg" style="height:32px">
&lt;/a>
&lt;a style="display:inline-block;margin-left:8px;padding:8px;background-color:#333" href="pictures/events/proud-logo-osrd-color-white.svg">
&lt;img src="pictures/events/proud-logo-osrd-color-white.svg" style="height:32px">
&lt;/a>
&lt;/div>
&lt;h4 id="use-of-logo-only-without-text">Use of logo only (without text)&lt;/h4>
&lt;div style="display:inline-block">
&lt;img src="pictures/fav-osrd-color.svg" style="height:64px">
&lt;/div>
&lt;h2 id="colors">Colors&lt;/h2>
&lt;blockquote>
&lt;p>These colours are &lt;strong>those of the logo&lt;/strong> and should not be confused with those of the overall design of the OSRD interface.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;span style="display:inline-block;background-color:#786abf;width:128px;height:128px;color:white;font-weight:bold;padding:16px;margin-top:16px">#786ABF&lt;/span>
&lt;span style="display:inline-block;background-color:#c7b2de;width:128px;height:128px;color:white;font-weight:bold;padding:16px;margin-top:16px;margin-left:16px">#C7B2DE&lt;/span>&lt;/p></description></item><item><title>Docs: OSRD's design</title><link>https://osrd.fr/en/docs/guides/design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/design/</guid><description>
&lt;p>Everything is presented on a dedicated website &lt;a href="https://design.osrd.fr">https://design.osrd.fr&lt;/a>&lt;/p>
&lt;p>A &amp;ldquo;design system&amp;rdquo; is being developed.&lt;/p>
&lt;figure>&lt;a href="https://design.osrd.fr">
&lt;img src="https://osrd.fr/en/docs/guides/design/images/design.webp"/> &lt;/a>
&lt;/figure></description></item><item><title>Docs: Overview</title><link>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/overview/</guid><description>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>This work is pending implementation, and has not yet been adjusted to
reflect potential required adjustments.&lt;/p>
&lt;/div>
&lt;p>After two years of extending a fairly simple simulation engine, it appeared that fundamental
changes are required to meet expectations.&lt;/p>
&lt;h2 id="system-requirements">System requirements&lt;/h2>
&lt;p>The new system is expected to:&lt;/p>
&lt;ol>
&lt;li>handle reactions to signaling&lt;/li>
&lt;li>handle rich train state (pantograph position, battery state)&lt;/li>
&lt;li>allow for different margin algorithms&lt;/li>
&lt;li>integrate driver behavior properties&lt;/li>
&lt;li>be easy to integrate with &lt;a href="../timetable/">timetable v2&lt;/a>&lt;/li>
&lt;li>handle both:
&lt;ul>
&lt;li>simulations of a full trip, with a complete known path, possibly following a schedule&lt;/li>
&lt;li>simulations where the path is discovered incrementally&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>provide a low-level API, usable independently&lt;/li>
&lt;/ol>
&lt;p>In the long-term, this system is also expected to:&lt;/p>
&lt;ul>
&lt;li>be used to drive multi-train simulations&lt;/li>
&lt;li>handling switching rolling stock at stops&lt;/li>
&lt;/ul>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;pre class="mermaid">flowchart TD
subgraph Input
InitTrainState[initial train state]
PathPhysicsProps[path physics properties]
AbstractDrivingInstructions[abstract driving instructions]
TargetSchedule[target schedule]
end
DrivingInstructionCompiler([driving instruction compiler])
ConcreteDrivingInstructions[driving instructions &amp;#43; limits]
ScheduleController([schedule controller])
DriverBehaviorModule([driver behavior module])
TargetSchedule --&amp;gt; ScheduleController
ScheduleController -- adjusts slowdown coefficient --&amp;gt; DriverBehaviorModule
AbstractDrivingInstructions --&amp;gt; DrivingInstructionCompiler
PathPhysicsProps --&amp;gt; DrivingInstructionCompiler
ScheduleController -- tracks train state --&amp;gt; TrainSim
DriverBehaviorModule -- makes decisions --&amp;gt; TrainSim
ConcreteDrivingInstructions --&amp;gt; DriverBehaviorModule
DrivingInstructionCompiler --&amp;gt; ConcreteDrivingInstructions
InitTrainState --&amp;gt; ScheduleController
TrainSim --&amp;gt; SimResults
TrainSim([train simulator])
SimResults[simulation result curve]&lt;/pre>
&lt;h3 id="target-schedule">Target schedule&lt;/h3>
&lt;p>The target schedule is a list of target arrival times at points specified along the path.
To respect the schedule, the train may have to not use its maximum traction.&lt;/p>
&lt;h3 id="train-state">Train state&lt;/h3>
&lt;p>The train state is a vector of properties describing the train at a given point in time.&lt;/p>
&lt;ul>
&lt;li>position&lt;/li>
&lt;li>speed&lt;/li>
&lt;li>position of pantographs&lt;/li>
&lt;li>driver reaction times ?&lt;/li>
&lt;li>battery state ?&lt;/li>
&lt;li>time elapsed since the last update&lt;/li>
&lt;/ul>
&lt;h3 id="driving-instructions">Driving instructions&lt;/h3>
&lt;p>Driving instructions model what the train has to do along its path.
They are linked to conditions on their application, and can interact with each other.
They are generated using domain constraints such as speed limits or stops.&lt;/p>
&lt;p>See &lt;a href="https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driving-instruction/">the dedicated page&lt;/a> for more details.&lt;/p>
&lt;h3 id="path-properties">Path properties&lt;/h3>
&lt;p>Path properties are the physical properties of the path, namely elevation, curves and electrification.&lt;/p>
&lt;h3 id="driver-behavior-module">Driver behavior module&lt;/h3>
&lt;p>The driver behavior modules update the train state based on:&lt;/p>
&lt;ul>
&lt;li>the current train state&lt;/li>
&lt;li>the path properties&lt;/li>
&lt;li>the driving instructions&lt;/li>
&lt;li>a slowdown coefficient (1 = no slowdown, 0 = full stop)&lt;/li>
&lt;/ul>
&lt;p>The train state changes should be physically realistic.&lt;/p>
&lt;p>See &lt;a href="https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driver-behavior-modules/">the dedicated page&lt;/a> for more details.&lt;/p>
&lt;h3 id="schedule-controller">Schedule controller&lt;/h3>
&lt;p>The schedule controller manages the slowdown coefficient given to the driver behavior module in order
to respect the target schedule.&lt;/p>
&lt;p>It adjusts the slowdown coefficient iteratively, using a dichotomous search, re-simulating the train behavior
between two time-targeted points.&lt;/p>
&lt;h3 id="simulation-results">Simulation results&lt;/h3>
&lt;p>The output of the simulation is the list of train states at each time step.&lt;/p>
&lt;h2 id="design-overview">Design overview&lt;/h2>
&lt;p>The main idea of the new train simulator is to have a simulation which is computed step by step and not post-processed.
This would ensure the physical consistency of the simulation.&lt;/p>
&lt;p>The challenge is then to add ways to lose some time, in order to respect the target schedule.&lt;br>
This is done by iterating over the sections between two scheduled points, while adjusting a slowdown factor.
This slowdown factor would be used to control how the driver behavior module would lose time while still being
physically realistic.&lt;br>
See &lt;a href="https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driver-behavior-modules/">the driver behavior module dedicated page&lt;/a> for more details.&lt;/p>
&lt;p>In order to accommodate an infrastructure which could change with time (like signals), we introduce driving instructions.
These instructions are generated from the path properties and the target schedule, and are used to update the train state.
Instructions can be conditional, and can interact with each other.&lt;br>
The algorithm is described in detail in the &lt;a href="https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driving-instruction/">dedicated page&lt;/a>.&lt;/p>
&lt;p>&lt;img src="../overview.svg" alt="Algorithm flow chart">&lt;/p>
&lt;h2 id="design-limits">Design limits&lt;/h2>
&lt;ul>
&lt;li>trains do not anticipate margin transitions: only the next target arrival time matters for finding the slowdown factor&lt;/li>
&lt;/ul></description></item><item><title>Docs: Signaling systems</title><link>https://osrd.fr/en/docs/reference/design-docs/signaling/signaling-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/signaling/signaling-systems/</guid><description>
&lt;p>Each signaling system has:&lt;/p>
&lt;ul>
&lt;li>A unique identifier (a string).&lt;/li>
&lt;li>Its signal state type, which enables deducing:
&lt;ul>
&lt;li>The graphical representation of the signal&lt;/li>
&lt;li>How a train would react to the signal&lt;/li>
&lt;li>If the signal state constrains Movement Authority&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The signal parameter types, names and description, which enable front-end edition of signal parameters.&lt;/li>
&lt;li>The block and route conditions, which enable evaluating whether a signal delimits blocks or routes, given its parameters.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># unique identifier for the signaling system&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the schema of the dynamic state of signals of this type&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;signal_state&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;enum&amp;#34;, &amp;#34;field_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;aspect&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">, values&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;VL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;S&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ralen30&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ralen60&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ralen_rappel&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># describes static properties of the signal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;signal_properties&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;Nf&amp;#34;, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Non-permissive&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;has_ralen30&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Ralen 30&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;has_rappel30&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Rappel 30&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;has_ralen60&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Ralen 60&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;has_rappel60&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Rappel 60&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># describes dynamic properties of the signal. These can be set on a per-route basis&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;signal_parameters&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;short_block&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Short block&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;rappel30&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Rappel 30&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#204a87;font-weight:bold">&amp;#34;kind&amp;#34;: &amp;#34;flag&amp;#34;, &amp;#34;field_name&amp;#34;: &amp;#34;rappel60&amp;#34;, &amp;#34;default&amp;#34;: false, &amp;#34;display_name&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Rappel 60&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># these are C-like boolean expressions:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># true, false, &amp;lt;flag&amp;gt;, &amp;lt;enum&amp;gt; == value, &amp;amp;&amp;amp;, || and ! can be used&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># used to evaluate whether a signal is a block boundary. Only properties can be used, not parameters.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;block_boundary_when&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># used to evaluate whether a signal is a route boundary. Only properties can be used, not parameters.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;route_boundary_when&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Nf&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A predicate used evaluate whether a signal state can make a train slow down. Used for naive conflict detection.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;constraining_ma_when&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;aspect != VL&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: STDCM search environment configuration</title><link>https://osrd.fr/en/docs/guides/deploy/stdcm-search-env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/deploy/stdcm-search-env/</guid><description>
&lt;p>In order for the STDCM tool to function, you&amp;rsquo;ll need to setup the STDCM Search Environment, a configuration stored in database.&lt;/p>
&lt;p>The configurable fields are as such:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">StdcmSearchEnvironment&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">infra_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">electrical_profile_set_id&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">work_schedule_group_id&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timetable_id&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">search_window_begin&lt;/span>: &lt;span style="color:#000">NaiveDateTime&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">search_window_end&lt;/span>: &lt;span style="color:#000">NaiveDateTime&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This configuration is queried by the frontend.
That way, the right objects and time bounds are used transparently by the user.&lt;/p>
&lt;p>In order to setup this config, you can either&lt;/p>
&lt;ul>
&lt;li>Use the provided REST API (see &lt;a href="https://osrd.fr/en/docs/reference/apis/editoast/#operations-tag-stdcm_search_environment">the editoast openAPI&lt;/a>
in the stdcm_search_environment section)&lt;/li>
&lt;li>Use the provided editoast cli (run &lt;code>editoast stdcm-search-env help&lt;/code> for more information)&lt;/li>
&lt;/ul></description></item><item><title>Docs: Install docker</title><link>https://osrd.fr/en/docs/guides/contribute/install-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/guides/contribute/install-docker/</guid><description>
&lt;p>Regardless of your operating system, docker requires linux to operate. When used on a different
operating system, docker relies on virtual machines to build and run images.&lt;/p>
&lt;p>There are two main types of docker installations:&lt;/p>
&lt;ul>
&lt;li>docker engine is the usual docker command line application&lt;/li>
&lt;li>docker desktop is a GUI app that also manages virtualization&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s what we suggest:&lt;/p>
&lt;ul>
&lt;li>If you&amp;rsquo;re on linux, install docker engine &lt;a href="https://docs.docker.com/engine/install/#supported-platforms">using your package manager&lt;/a>&lt;/li>
&lt;li>If you&amp;rsquo;re on MacOS / Windows, install &lt;a href="https://www.docker.com/products/docker-desktop/">docker desktop&lt;/a> if you are allowed to&lt;/li>
&lt;li>If you&amp;rsquo;re on windows and want to get docker running within WSL, or can&amp;rsquo;t use docker desktop, follow the &lt;a href="#docker-on-wsl">docker on WSL tutorial&lt;/a>&lt;/li>
&lt;li>If you&amp;rsquo;re on MacOS and can&amp;rsquo;t use docker desktop, follow the &lt;a href="#macos-colima">MacOS colima tutorial&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="docker-on-wsl">Docker on WSL&lt;/h2>
&lt;p>This install option is very useful, as it allows having a perfectly normal linux install of docker engine inside WSL, which can still be reached from windows.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows/wsl/install">Install WSL&lt;/a> (If you had an old version of WSL, run &lt;code>wsl --upgrade&lt;/code>)&lt;/li>
&lt;li>Get an operating system image from the microsoft store (for example, debian or ubuntu)&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/windows/wsl/systemd">Enable systemd support within the WSL VM&lt;/a>&lt;/li>
&lt;li>Follow the regular &lt;a href="https://docs.docker.com/engine/install/#supported-platforms">linux install tutorial for docker&lt;/a>&lt;/li>
&lt;li>If you have docker desktop installed, you can &lt;a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers">configure it to use WSL&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="macos-colima">MacOS colima&lt;/h2>
&lt;p>This procedure allows installing docker without relying on docker desktop.
It uses colima for virtualizing linux.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://brew.sh/">Install homebrew&lt;/a>&lt;/li>
&lt;li>&lt;code>brew install docker docker-compose colima&lt;/code>&lt;/li>
&lt;li>Install the compose plugin: &lt;code>mkdir -p ~/.docker/cli-plugins &amp;amp;&amp;amp; ln -sfn $(brew --prefix)/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/abiosoft/colima?tab=readme-ov-file#customizing-the-vm">Configure colima&lt;/a>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>for apple silicon (M1/M2) macbooks: &lt;code>colima start --cpu 2 --memory 6 --arch aarch64 --vm-type=vz --vz-rosetta --mount-type=virtiofs&lt;/code>&lt;/li>
&lt;li>for small infrastructures: &lt;code>colima start --cpu 2 --memory 4&lt;/code>&lt;/li>
&lt;li>for big infrastructures: &lt;code>colima start --cpu 2 --memory 6&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>&lt;code>brew services start colima&lt;/code> to automatically start colima on startup&lt;/li>
&lt;li>Exit your terminal, open a new one&lt;/li>
&lt;li>You can now use docker CLI&lt;/li>
&lt;/ol>
&lt;div class="alert alert-info" role="alert">
&lt;p>If you&amp;rsquo;re using rancher desktop, please either:&lt;/p>
&lt;ul>
&lt;li>uninstall the application&lt;/li>
&lt;li>select &lt;code>Manual&lt;/code> in &lt;code>Preferences&lt;/code> &amp;gt; &lt;code>Application&lt;/code> &amp;gt; &lt;code>Environment&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="alert alert-info" role="alert">
If you get an error at rosetta startup, run &lt;code>colima delete&lt;/code> and try again (the disk format is not compatible). Settings will be lost.
&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;p>If you get this error: &lt;code>error getting credentials - err: exec: &amp;quot;docker-credential-osxkeychain&amp;quot;: executable file not found in $PATH&lt;/code>&lt;/p>
&lt;p>Open &lt;code>~/.docker/config.json&lt;/code>, and remove &lt;code>&amp;quot;credsStore&amp;quot;: &amp;quot;osxkeychain&amp;quot;&lt;/code>&lt;/p>
&lt;/div></description></item><item><title>Docs: Conflict detection</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/conflict_detection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/conflict_detection/</guid><description>
&lt;p>Once we know what paths we can use, we need to know when they
can actually be used.&lt;/p>
&lt;p>The &lt;a href="https://osrd.fr/en/docs/reference/design-docs/conflict-detection/" title="documentation">documentation&lt;/a>
of the conflict detection module explains how it&amp;rsquo;s done internally.
Generally speaking, a train is in conflict when it has to slow down
because of a signal. In our case, that means the solution would not
be valid, we need to arrive later (or earlier) to see the signal
when it&amp;rsquo;s not restrictive anymore.&lt;/p>
&lt;p>The complex part is that we need to do the conflict detection &lt;em>incrementally&lt;/em>
Which means that:&lt;/p>
&lt;ol>
&lt;li>When running simulations up to t=x, we need to know all of the conflicts
that happen before x, &lt;em>even if they&amp;rsquo;re indirectly caused by a
signal seen at t &amp;gt; x&lt;/em> down the path.&lt;/li>
&lt;li>We need to know the conflicts and resource uses right as they start
even if their end time can&amp;rsquo;t be defined yet.&lt;/li>
&lt;/ol>
&lt;p>For that to be possible, we need to know where the train will go
&lt;em>after&lt;/em> the section that is being simulated (see
&lt;a href="https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/infrastructure_exploration/" title="infra exploration">infra exploration&lt;/a>:
we need some elements in the lookahead section).&lt;/p>
&lt;p>To handle it, the conflict detection module
returns an error when more lookahead is required. When it happens
we extend it by cloning the infra explorer objects.&lt;/p></description></item><item><title>Docs: Encoding the solution space</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/graph_representation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/graph_representation/</guid><description>
&lt;h4 id="general-principle">General principle&lt;/h4>
&lt;p>The problem is still a pathfinding problem in a given graph.
Once the problem is encoded as a graph search, it is possible to reuse
our existing tools for this purpose.&lt;/p>
&lt;p>We consider the &lt;em>product graph&lt;/em> of position, time, and speed.
This means that every graph element contains these 3 variables
(among other things)&lt;/p>
&lt;p>Every graph edge is computed using
&lt;a href="https://osrd.fr/en/docs/explanation/running_time_calculation/" title="running-time calculation">running-time calculation&lt;/a>
to get speed and positions as functions of time.&lt;/p>
&lt;h4 id="graphical-representation">Graphical representation&lt;/h4>
&lt;p>Space is encoded with a graph that contains the physical infrastructure.&lt;/p>
&lt;p>&lt;img src="routes_time_1.png" alt="product graph (1/3)">&lt;/p>
&lt;p>It is then &amp;ldquo;duplicated&amp;rdquo; at different times.&lt;/p>
&lt;p>&lt;img src="routes_time_2.png" alt="product graph (2/3)">&lt;/p>
&lt;p>The nodes are then linked together in a way that reflects travel time.&lt;/p>
&lt;p>&lt;img src="routes_time_3.png" alt="product graph (3/3)">&lt;/p>
&lt;h4 id="notes">Notes&lt;/h4>
&lt;ul>
&lt;li>The graph is constructed on the fly as it is explored.&lt;/li>
&lt;li>It is &lt;em>discretized&lt;/em> in time, to evaluate which nodes have already
been visited. We keep full accuracy of time values, but two nodes
at the same place and close times are considered identical.&lt;/li>
&lt;li>Every edge is computed with a running time computation.&lt;/li>
&lt;li>Speed isn&amp;rsquo;t discretized or considered to check visited nodes,
it&amp;rsquo;s only used to compute time.&lt;/li>
&lt;li>By default, the train always goes as fast as it can
(while still following standard allowances).
It only slows down when necessary.&lt;/li>
&lt;/ul>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>For example, with the following infrastructure, using the track graph:
&lt;img src="example_infra.svg" alt="Example infra">&lt;/p>
&lt;p>Exploring the solution graph can give the following result:
&lt;img src="example_graph.svg" alt="Graph Representation">&lt;/p></description></item><item><title>Docs: Numerical integration</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/numerical_integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/numerical_integration/</guid><description>
&lt;!-- script to auto-render KaTeX extension : $$...$$ for outline formula, \\(...\\) for inline formula -->
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css" integrity="sha384-KiWOvVjnN8qwAZbuQyWDIbfCLFhLXNETzBQjA/92pIowpC0d2O3nppDGQVgwd2nB" crossorigin="anonymous">
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js" integrity="sha384-0fdwu/T/EQMsQlrHCCHoH10pkPLlKA1jL5dFyUOvB3lfeT2540/2g6YgSi2BL14p" crossorigin="anonymous">&lt;/script>
&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/contrib/auto-render.min.js" integrity="sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR" crossorigin="anonymous"
onload="renderMathInElement(document.body);">&lt;/script>
&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6">&lt;/script>
&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">&lt;/script>
&lt;font color=#aa026d>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;/font>
&lt;p>Since physical modelling has shown that the acceleration of the train is influenced by various factors that vary along the route (gradient, curvature, engine traction force, etc.), the calculation must be carried out using a numerical integration method. The path is then separated into sufficiently short steps to consider all these factors as constant, which allows this time to use the equation of motion to calculate the displacement and speed of the train.&lt;/p>
&lt;p>Euler&amp;rsquo;s method of numerical integration is the simplest way of doing this, but it has a number of drawbacks. This article explains the Euler method, why it is not suitable for OSRD purposes and which integration method should be used instead.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="eulers-method">Euler&amp;rsquo;s method&lt;/h3>
&lt;/font>
&lt;p>The Euler method applied to the integration of the equation of motion of a train is:&lt;/p>
&lt;p>$$v(t+dt) = a(v(t), x(t))dt + v(t)$$&lt;/p>
&lt;p>$$x(t+dt) = \frac{1}{2}a(v(t), x(t))dt^2 + v(t)dt + x(t)$$&lt;/p>
&lt;center>
&lt;p>&lt;img src="../euler.png?style=method" alt="Euler&amp;rsquo;s method">&lt;/p>
&lt;/center>
&lt;p>&amp;nbsp;&lt;/p>
&lt;h4 id="advantages-of-eulers-method">&lt;strong>Advantages of Euler&amp;rsquo;s method&lt;/strong>&lt;/h4>
&lt;p>The advantages of the Euler method are that it is very simple to implement and has a rather fast calculation for a given time step, compared to other numerical integration methods (see &lt;a href="#the-choice-of-integration-method-for-osrd">appendix&lt;/a>)&lt;/p>
&lt;h4 id="disadvantages-of-the-eulers-method">&lt;strong>Disadvantages of the Euler&amp;rsquo;s method&lt;/strong>&lt;/h4>
&lt;p>The Euler integration method presents a number of problems for OSRD:&lt;/p>
&lt;ul>
&lt;li>It is relatively imprecise, and therefore requires a small time step, which generates a lot of data.&lt;/li>
&lt;li>With time integration, only the conditions at the starting point of the integration step (gradient, infrastructure parameters, etc.) are known, as one cannot predict precisely where it will end.&lt;/li>
&lt;li>We cannot anticipate future changes in the directive: the train only reacts by comparing its current state with its set point at the same time. To illustrate, it is as if the driver is unable to see ahead, whereas in reality he anticipates according to the signals, slopes and bends he sees ahead.&lt;/li>
&lt;/ul>
&lt;font color=#aa026d>
&lt;h3 id="runge-kuttas-4-method">Runge-Kutta&amp;rsquo;s 4 method&lt;/h3>
&lt;/font>
&lt;p>The Runge-Kutta 4 method applied to the integration of the equation of motion of a train is:&lt;/p>
&lt;p>$$v(t+dt) = v(t) + \frac{1}{6}(k_1 + 2k_2 + 2k_3 + k_4)dt$$&lt;/p>
&lt;p>With:&lt;/p>
&lt;p>$$k_1 = a(v(t), x(t))$$&lt;/p>
&lt;p>$$k_2 = a\Big(v(t+k_1\frac{dt}{2}), x(t) + v(t)\frac{dt}{2} + k_1\frac{dt^2}{8}\Big)$$&lt;/p>
&lt;p>$$k_3 = a\Big(v(t+k_2\frac{dt}{2}), x(t) + v(t)\frac{dt}{2} + k_2\frac{dt^2}{8}\Big)$$&lt;/p>
&lt;p>$$k_4 = a\Big(v(t+k_3dt), x(t) + v(t)dt + k_3\frac{dt^2}{2}\Big)$$&lt;/p>
&lt;center>
&lt;p>&lt;img src="../rk4.png?style=method" alt="Runge-Kutta 4&amp;rsquo;s method">&lt;/p>
&lt;/center>
&lt;p>&amp;nbsp;&lt;/p>
&lt;h4 id="advantages-of-runge-kuttas-4-method">&lt;strong>Advantages of Runge Kutta&amp;rsquo;s 4 method&lt;/strong>&lt;/h4>
&lt;p>Runge Kutta&amp;rsquo;s method of integration 4 addresses the various problems raised by Euler&amp;rsquo;s method:&lt;/p>
&lt;ul>
&lt;li>It allows the anticipation of directive changes within a calculation step, thus representing more accurately the reality of driving a train.&lt;/li>
&lt;li>It is more accurate for the same calculation time (see &lt;a href="#the-choice-of-integration-method-for-osrd">appendix&lt;/a>), allowing for larger integration steps and therefore fewer data points.&lt;/li>
&lt;/ul>
&lt;h4 id="disadvantages-of-runge-kuttas-4-method">&lt;strong>Disadvantages of Runge Kutta&amp;rsquo;s 4 method&lt;/strong>&lt;/h4>
&lt;p>The only notable drawback of the Runge Kutta 4 method encountered so far is its difficulty of implementation.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="the-choice-of-integration-method-for-osrd">The choice of integration method for OSRD&lt;/h3>
&lt;/font>
&lt;h4 id="study-of-accuracy-and-speed-of-calculation">&lt;strong>Study of accuracy and speed of calculation&lt;/strong>&lt;/h4>
&lt;p>Different integration methods could have replaced the basic Euler integration in the OSRD algorithm. In order to decide which method would be most suitable, a study of the accuracy and computational speed of different methods was carried out. This study compared the following methods:&lt;/p>
&lt;ul>
&lt;li>Euler&lt;/li>
&lt;li>Euler-Cauchy&lt;/li>
&lt;li>Runge-Kutta 4&lt;/li>
&lt;li>Adams 2&lt;/li>
&lt;li>Adams 3&lt;/li>
&lt;/ul>
&lt;p>All explanations of these methods can be found (in French) in &lt;a href="https://github.com/OpenRailAssociation/osrd/wiki/documents/integration/MethodesNumeriques_EricGoncalves.pdf">this document&lt;/a>, and the python code used for the simulation is &lt;a href="https://raw.githubusercontent.com/wiki/OpenRailAssociation/osrd/code/integration/Tests_precision.py">here&lt;/a>.&lt;/p>
&lt;p>The simulation calculates the position and speed of a high-speed train accelerating on a flat straight line.&lt;/p>
&lt;h4 id="equivalent-time-step-simulations">&lt;strong>Equivalent time step simulations&lt;/strong>&lt;/h4>
&lt;p>A reference curve was simulated using the Euler method with a time step of 0.1s, then the same path was simulated using the other methods with a time step of 1s. It is then possible to simply compare each curve to the reference curve, by calculating the absolute value of the difference at each calculated point. The resulting absolute error of the train&amp;rsquo;s position over its distance travelled is as follows:&lt;/p>
&lt;p>&lt;img src="../precisions_h_equivalent.png" alt="precisions_h_equivalent">&lt;/p>
&lt;p>It is immediately apparent that the Euler method is less accurate than the other four by about an order of magnitude. Each curve has a peak where the accuracy is extremely high (extremely low error), which is explained by the fact that all curves start slightly above the reference curve, cross it at one point and end slightly below it, or &lt;em>vice versa&lt;/em>.&lt;/p>
&lt;p>As accuracy is not the only important indicator, the calculation time of each method was measured. This is what we get for the same input parameters:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Integration method&lt;/th>
&lt;th style="text-align:right">Calculation time (s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Euler&lt;/td>
&lt;td style="text-align:right">1.86&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Euler-Cauchy&lt;/td>
&lt;td style="text-align:right">3.80&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Runge-Kutta 4&lt;/td>
&lt;td style="text-align:right">7.01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 2&lt;/td>
&lt;td style="text-align:right">3.43&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 3&lt;/td>
&lt;td style="text-align:right">5.27&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Thus, Euler-Cauchy and Adams 2 are about twice as slow as Euler, Adams 3 is about three times as slow, and RK4 is about four times as slow. These results have been verified on much longer simulations, and the different ratios are maintained.&lt;/p>
&lt;h4 id="simulation-with-equivalent-calculation-time">&lt;strong>Simulation with equivalent calculation time&lt;/strong>&lt;/h4>
&lt;p>As the computation times of all methods depend linearly on the time step, it is relatively simple to compare the accuracy for approximately the same computation time. Multiplying the time step of Euler-Cauchy and Adams 2 by 2, the time step of Adams 3 by 3, and the time step of RK4 by 4, here are the resulting absolute error curves:&lt;/p>
&lt;p>&lt;img src="../precisions_time_equivalent.png" alt="precisions_time_equivalent">&lt;/p>
&lt;p>And here are the calculation times:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Integration method&lt;/th>
&lt;th style="text-align:right">Calculation time (s)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Euler&lt;/td>
&lt;td style="text-align:right">1.75&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Euler-Cauchy&lt;/td>
&lt;td style="text-align:right">2.10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Runge-Kutta 4&lt;/td>
&lt;td style="text-align:right">1.95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 2&lt;/td>
&lt;td style="text-align:right">1.91&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Adams 3&lt;/td>
&lt;td style="text-align:right">1.99&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>After some time, RK4 tends to be the most accurate method, slightly more accurate than Euler-Cauchy, and still much more accurate than the Euler method.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="conclusions-of-the-study">Conclusions of the study&lt;/h3>
&lt;/font>
&lt;p>The study of accuracy and computational speed presented above shows that RK4 and Euler-Cauchy would be good candidates to replace the Euler algorithm in OSRD: both are fast, accurate, and could replace the Euler method without requiring large implementation changes because they only compute within the current time step.
&lt;strong>It was decided that OSRD would use the Runge-Kutta 4 method because it is slightly more accurate than Euler-Cauchy and it is a well-known method for this type of calculation, so it is very suitable for an open-source simulator.&lt;/strong>&lt;/p>
&lt;style>
img[src$="method"] {
height: 70%;
width: 70%;
}
&lt;/style></description></item><item><title>Docs: Blocks and signals</title><link>https://osrd.fr/en/docs/reference/design-docs/signaling/blocks-and-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/signaling/blocks-and-signals/</guid><description>
&lt;h1 id="blocks">Blocks&lt;/h1>
&lt;p>The blocks have several attributes:&lt;/p>
&lt;ul>
&lt;li>A signaling system that corresponds to that displayed by its first signal.&lt;/li>
&lt;li>A &lt;strong>path&lt;/strong>, which is a list of direction + detector pairs (just like route paths).&lt;/li>
&lt;li>An &lt;strong>entry signal&lt;/strong>, (optional when the block starts from a buffer stop).&lt;/li>
&lt;li>&lt;strong>Intermediate signals&lt;/strong>, if any (only used by systems with distant signals).&lt;/li>
&lt;li>An &lt;strong>exit signal&lt;/strong>, (optional when the block ends at a buffer stop).&lt;/li>
&lt;/ul>
&lt;p>The path is expressed from detector to detector so that it can be overlaid with the route graph.&lt;/p>
&lt;p>A few remarks:&lt;/p>
&lt;ul>
&lt;li>There can be multiple blocks with the same path, as long as they have different signaling systems. Trains only use a block at a time, and ignore others.&lt;/li>
&lt;li>Blocks do not have a state: one can rely on the dynamic state of the zones that make it up.&lt;/li>
&lt;li>Blocks are used to figure out which signals protect which zones in a given context.&lt;/li>
&lt;/ul>
&lt;h2 id="dependencies">Dependencies&lt;/h2>
&lt;ul>
&lt;li>route graph. For each route:
&lt;ul>
&lt;li>&lt;code>waypoints: List&amp;lt;DiDetector&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>signals: OrderedMap&amp;lt;Position, UnloadedSignal&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>speed_limits: RangeMap&amp;lt;Position, SpeedLimit&amp;gt;&lt;/code>, including the logic for train category limits&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>signaling systems&lt;/li>
&lt;li>drivers&lt;/li>
&lt;/ul>
&lt;h1 id="signals">Signals&lt;/h1>
&lt;p>Physical signal are made up of one or more logical signals, which are displayed as a single unit on the field. During simulation, logical signals are treated as separate signals.&lt;/p>
&lt;p>Each logical signal is associated with a signaling system, which defines if the
signal transmits Movement Authority, speed limits, or both.&lt;/p>
&lt;p>Logical signals have one or more drivers. Signal drivers are responsible for computing
signal state. Any given signal driver only works for a given pair of signaling systems,
where the first one is displayed by the signal, and the second is the one displayed by
the next signal.&lt;/p>
&lt;p>When a logical signal has an empty driver list, its content is deduced from neighboring signals.&lt;/p>
&lt;p>For example, a BAL signal that is both a departure of the TVM block and a
departure of the BAL block, it will have two drivers: &lt;code>BAL-BAL&lt;/code> and &lt;code>BAL-TVM&lt;/code>.&lt;/p>
&lt;h2 id="announcing-speed-limits">Announcing speed limits&lt;/h2>
&lt;p>When a signal announces a speed limit, it needs to be linked with a speed section object.
This is meant to enable smooth transitions between the reaction to the announce signal, and the limit itself.&lt;/p>
&lt;p>If multiple signals are involved in the announce process, only the one closest to the speed limit has to have
this attribute set.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;announce_speed_section&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${SPEED_SECTION_ID}&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conditional-parameters">Conditional parameters&lt;/h2>
&lt;p>Some signal parameters vary depending on which route is set. On each signal, an arbitrary number of rules can be added.
If the signal is last to announce a speed limit, it must be explicitly mentioned in the rule.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;announce_speed_section&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${SPEED_SECTION_ID}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;default_parameters&amp;#34;: {&amp;#34;short_block&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;conditional_parameters&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;on_route&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${ROUTE_ID}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;announce_speed_section&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${SPEED_SECTION_ID}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;parameters&amp;#34;: {&amp;#34;rappel30&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;short_block&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Signal parameter values are looked up in the following order:&lt;/p>
&lt;ol>
&lt;li>per route conditional parameters&lt;/li>
&lt;li>per signal default parameters (&lt;code>default_parameters&lt;/code>)&lt;/li>
&lt;li>parameter default value, from the signaling system&amp;rsquo;s &lt;code>.signal_parameters[].default&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="serialized-format">Serialized format&lt;/h2>
&lt;p>The serialized / raw format is the user-editable description of a physical signal.&lt;/p>
&lt;p>Raw signals have a list of logical signals, which are independently simulated units sharing
a common physical display. Each logical signal has:&lt;/p>
&lt;ul>
&lt;li>a signaling system&lt;/li>
&lt;li>user-editable properties, as specified in the signaling system description&lt;/li>
&lt;li>a list of default parameters, which can get overridden per-route&lt;/li>
&lt;li>an optional announced speed section, which can get overridden per-route&lt;/li>
&lt;li>a list of allowed next signaling systems, which are used to load drivers&lt;/li>
&lt;/ul>
&lt;p>For example, this signal encodes a BAL signal which:&lt;/p>
&lt;ul>
&lt;li>starts both a BAL and a TVM block&lt;/li>
&lt;li>announces speed limit B on all routes except route A, where speed limit C is announced&lt;/li>
&lt;li>on route A, the block is shorter than usual&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># signals must have location data.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># this data is omitted as its format is irrelevant to how signals behave&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;logical_signals&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the signaling system shown by the signal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;signaling_system&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the settings for this signal, as defined in the signaling system manifest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;properties&amp;#34;: {&amp;#34;has_ralen30&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;Nf&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># this signal can react to BAL or TVM signals&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># if the list is empty, the signal is assumed to be compatible with all following signaling systems&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;next_signaling_systems&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;TVM&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;announce_speed_section&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${SPEED_SECTION_B}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;default_parameters&amp;#34;: {&amp;#34;rappel30&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;short_block&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;conditional_parameters&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;on_route&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${ROUTE_A}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;announce_speed_section&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${SPEED_SECTION_C}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;parameters&amp;#34;: {&amp;#34;short_block&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example, this signal encodes a BAL signal which starts a BAL block, and shares its physical display / support with a BAPR signal starting a BAPR block:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># signals must have location data.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># this data is omitted as its format is irrelevant to how signals behave&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;logical_signals&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;signaling_system&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;properties&amp;#34;: {&amp;#34;has_ralen30&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;Nf&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;next_signaling_systems&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAL&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;signaling_system&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAPR&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;properties&amp;#34;: {&amp;#34;Nf&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;distant&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;false&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;next_signaling_systems&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;BAPR&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="signal-description-strings">Signal description strings&lt;/h2>
&lt;p>Signal definitions need to be condensed into a shorter form, just to look up signal icons.
In order to store this into MVT map tiles hassle free, it&amp;rsquo;s condensed down into a single string.&lt;/p>
&lt;p>It looks something like that: &lt;code>BAL[Nf=true,ralen30=true]+BAPR[Nf=true,distant=false]&lt;/code>
It&amp;rsquo;s built as follows:&lt;/p>
&lt;ul>
&lt;li>a list of logical signals, sorted by signaling system name, separated by &lt;code>+&lt;/code>&lt;/li>
&lt;li>inside each logical signal, signal properties are sorted by name, enclosed in square brackets and separated by &lt;code>,&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="dependencies-1">Dependencies&lt;/h2>
&lt;p>For signal state evaluation:&lt;/p>
&lt;ul>
&lt;li>train path in blocks&lt;/li>
&lt;li>portion of the path to evaluate&lt;/li>
&lt;li>drivers&lt;/li>
&lt;li>state of the zones in the section to evaluate&lt;/li>
&lt;/ul></description></item><item><title>Docs: Infrastructure example</title><link>https://osrd.fr/en/docs/explanation/models/data-models-full-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/models/data-models-full-example/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;/font>
&lt;p>This page gives an example of how the data formats are used to describe an infrastructure in &lt;strong>OSRD&lt;/strong>.&lt;/p>
&lt;p>For this purpose, let&amp;rsquo;s take as an example the following toy infrastructure:&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_diagram.drawio.en.svg" alt="Toy infrastructure diagram">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Tip&lt;/h4>
To zoom in on diagrams, click on the edit button that appears when hovering over it.
&lt;/div>
&lt;p>This diagram is an overview of the infrastructure with lines and stations only.&lt;/p>
&lt;p>This infrastructure is not meant to be realistic, but rather meant to help illustrate OSRD&amp;rsquo;s data model.
This example will be created step by step and explained along the way.&lt;/p>
&lt;h4 id="the-infrastructure-generator">The infrastructure generator&lt;/h4>
&lt;p>In the &lt;a href="https://github.com/OpenRailAssociation/osrd">&lt;em>OSRD&lt;/em> repository&lt;/a> is a &lt;a href="https://github.com/OpenRailAssociation/osrd/tree/dev/python/railjson_generator">python library&lt;/a> designed to help generate infrastructures in a format understood by &lt;em>OSRD&lt;/em>.&lt;/p>
&lt;p>The infrastructure discussed in this section can be generated thanks to &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/python/railjson_generator/railjson_generator/scripts/examples/small_infra.py">small_infra.py&lt;/a> file. To learn more about the generation scripts, you can check out the related &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/python/railjson_generator/README.md">README&lt;/a>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="tracks">Tracks&lt;/h3>
&lt;/font>
&lt;h4 id="track-sections">Track sections&lt;/h4>
&lt;p>The first objects we need to define are &lt;code>TrackSections&lt;/code>. Most other objects are positioned relative to track sections.&lt;/p>
&lt;p>A track section is a section of rail (switches not included). One can chose to divide the tracks of their infrastructure in as many track sections as they like. Here we chose to use the longest track sections possible, which means that between two switches there is always a single track section.&lt;/p>
&lt;p>Track sections is what simulated trains roll onto. They are the abstract equivalent to physical rail sections. Track sections are bidirectional.&lt;/p>
&lt;p>In this example, we define two tracks for the line between the West and North-East stations. We also have overpassing tracks at the North and Mid-West stations for added realism. Finally, we have three separate tracks in the West station, since it&amp;rsquo;s a major hub in our imaginary infrastructure.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_rails.drawio.en.svg" alt="Track sections diagram">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Important&lt;/h4>
&lt;p>&lt;code>TrackSections&lt;/code> are represented as arrows in this diagram to stress the fact that they have a &lt;strong>start&lt;/strong> and an &lt;strong>end&lt;/strong>. It matters as objects positioned on track sections are located using their distance from the &lt;strong>start&lt;/strong> of their track section.&lt;/p>
&lt;p>Therefore, to locate an object at the beginning of its track section, set its offset to 0. To move it to the end of its track section, set its offset to the &lt;code>length&lt;/code> of the track section.&lt;/p>
&lt;/div>
&lt;p>These attributes are required for the track section to be complete:&lt;/p>
&lt;ul>
&lt;li>&lt;code>length&lt;/code>: the length of the track section in meters.&lt;/li>
&lt;li>&lt;code>geo&lt;/code>: the coordinates in real life (geo is for geographic), in the &lt;a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON&lt;/a> format.&lt;/li>
&lt;li>cosmetic attributes: &lt;code>line_name&lt;/code>, &lt;code>track_name&lt;/code>, &lt;code>track_number&lt;/code> which are used to indicate the name and labels that were given to the tracks / lines in real life.&lt;/li>
&lt;/ul>
&lt;p>For all track sections in our infrastructure, the &lt;code>geo&lt;/code> attributes very much resemble the given diagram.&lt;/p>
&lt;p>For most track sections, their &lt;code>length&lt;/code> is proportional to what can be seen in the diagram. To preserve readability, exceptions were made for &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TD0&lt;/em> and &lt;em>TD1&lt;/em> (which are 10km and 25km).&lt;/p>
&lt;h4 id="node">Node&lt;/h4>
&lt;p>A &lt;code>Node&lt;/code> represents a node in the infrastructure. In an OSRD simulation, a train can only move from one section of track to another if they are linked by a node.&lt;/p>
&lt;h5 id="node-types">Node Types&lt;/h5>
&lt;p>&lt;code>NodeTypes&lt;/code> have two mandatory attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ports&lt;/code>: A list of port names. A port is an endpoint connected to a track section.&lt;/li>
&lt;li>&lt;code>groups&lt;/code>: A mapping between group names and lists of branch (connection between 2 ports) that characterises the different possible positions of the node type&lt;/li>
&lt;/ul>
&lt;p>At any time, all nodes have an active group, and may have an active branch, which always belongs to the active group. During a simulation, changing the active branch inside a group is instantaneous, but changing the active branch across groups (changing the active group) takes configurable time.
This is because a node is a physical object, and changing active branch can involve moving parts of it. &lt;code>Groups&lt;/code> are designed to represent the different positions that a node can have. Each &lt;code>group&lt;/code> contains the branches that can be used in the associated node position.&lt;/p>
&lt;p>The duration needed to change group is stored inside the &lt;code>Node&lt;/code>, since it can vary depending on the physical implementation of the node.&lt;/p>
&lt;p>Our examples currently use five node types. Node types are just like other objects, and can easily be added as needed using &lt;code>extended_switch_type&lt;/code>.&lt;/p>
&lt;p>&lt;strong>1) Link&lt;/strong>&lt;/p>
&lt;p>This one represents the link between two sections of track. It has two ports: &lt;em>A&lt;/em> and &lt;em>B&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/link.svg" alt="Link diagram">&lt;/p>
&lt;p>It is used in the OSRD model to create a link between two track sections. This is not a physical object.&lt;/p>
&lt;p>&lt;strong>2) The Point Switch&lt;/strong>&lt;/p>
&lt;p>The ubiquitous Y switch, which can be thought of as either two tracks merging, or one track splitting.&lt;/p>
&lt;p>This node type has three ports: &lt;em>A&lt;/em>, &lt;em>B1&lt;/em> and &lt;em>B2&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/point_switch.svg" alt="Point switch diagram">&lt;/p>
&lt;p>There are two groups, each with one connection in their list: &lt;code>A_B1&lt;/code>, which connects &lt;em>A&lt;/em> to &lt;em>B1&lt;/em>, and &lt;code>A_B2&lt;/code> which connects &lt;em>A&lt;/em> to &lt;em>B2&lt;/em>.&lt;/p>
&lt;p>Thus, at any given moment (except when the switch moves from one group to another), a train can go from &lt;em>A&lt;/em> to &lt;em>B1&lt;/em> or from &lt;em>A&lt;/em> to &lt;em>B2&lt;/em> but never to both at the same time. A train cannot go from &lt;em>B1&lt;/em> to &lt;em>B2&lt;/em>.&lt;/p>
&lt;p>A Point Switch only has two positions:&lt;/p>
&lt;ul>
&lt;li>&lt;em>A&lt;/em> to &lt;em>B1&lt;/em>&lt;/li>
&lt;li>&lt;em>A&lt;/em> to &lt;em>B2&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="svg_diagrams/PointSwitch_AtoB1.svg" alt="point switch position diagram"> &lt;img src="svg_diagrams/PointSwitch_AtoB2.svg" alt="point switch position diagram">&lt;/p>
&lt;p>&lt;strong>3) The Crossing&lt;/strong>&lt;/p>
&lt;p>This is simply two tracks crossing each other.&lt;/p>
&lt;p>This type has four ports: &lt;em>A1&lt;/em>, &lt;em>B1&lt;/em>, &lt;em>A2&lt;/em> et &lt;em>B2&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/crossing.svg" alt="Cross Switch Diagram">&lt;/p>
&lt;p>It has only one group containing two connections: &lt;em>A1&lt;/em> to &lt;em>B1&lt;/em> and &lt;em>A2&lt;/em> to &lt;em>B2&lt;/em>. Indeed this kind of switch is &lt;em>passive&lt;/em>: it has no moving parts. Despite having a single group, it is still used by the simulation to enforce route reservations.&lt;/p>
&lt;p>Here are the two different connections this switch type has:&lt;/p>
&lt;ul>
&lt;li>&lt;em>A1&lt;/em> to &lt;em>B1&lt;/em>&lt;/li>
&lt;li>&lt;em>A2&lt;/em> to &lt;em>B2&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="svg_diagrams/Crossing_A1toB1.svg" alt="Cross Switch Diagram positions"> &lt;img src="svg_diagrams/Crossing_A2toB2.svg" alt="Cross Switch Diagram positions">&lt;/p>
&lt;p>&lt;strong>4) The Double slip switch&lt;/strong>&lt;/p>
&lt;p>This one is more like two point switches back to back. It has four ports: &lt;em>A1&lt;/em>, &lt;em>A2&lt;/em>, &lt;em>B1&lt;/em> and &lt;em>B2&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/double_slip_crossing.svg" alt="Double cross switch diagram">&lt;/p>
&lt;p>However, it has four groups, each with one connection. The four groups are represented in the following diagram:&lt;/p>
&lt;ul>
&lt;li>&lt;em>A1&lt;/em> to &lt;em>B1&lt;/em>&lt;/li>
&lt;li>&lt;em>A1&lt;/em> to &lt;em>B2&lt;/em>&lt;/li>
&lt;li>&lt;em>A2&lt;/em> to &lt;em>B1&lt;/em>&lt;/li>
&lt;li>&lt;em>A2&lt;/em> to &lt;em>B2&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="svg_diagrams/DoubleSlipCrossing_A1toB1.svg" alt="Diagram of double crossing switch positions"> &lt;img src="svg_diagrams/DoubleSlipCrossing_A1toB2.svg" alt="Diagram of double crossing switch positions">&lt;/p>
&lt;p>&lt;img src="svg_diagrams/DoubleSlipCrossing_A2toB1.svg" alt="Diagram of double crossing switch positions"> &lt;img src="svg_diagrams/DoubleSlipCrossing_A2toB2.svg" alt="Diagram of double crossing switch positions">&lt;/p>
&lt;p>&lt;strong>5) The Single slip switch&lt;/strong>&lt;/p>
&lt;p>This one looks more like a cross between a single needle and a crossover. It has four ports: &lt;em>A1&lt;/em>, &lt;em>A2&lt;/em>, &lt;em>B1&lt;/em> and &lt;em>B2&lt;/em>.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/single_slip_crossing.svg" alt="Single slip switch diagram">&lt;/p>
&lt;p>Here are the three connections that can be made by this switch:&lt;/p>
&lt;ul>
&lt;li>&lt;em>A1&lt;/em> to &lt;em>B1&lt;/em>&lt;/li>
&lt;li>&lt;em>A1&lt;/em> to &lt;em>B2&lt;/em>&lt;/li>
&lt;li>&lt;em>A2&lt;/em> to &lt;em>B2&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="svg_diagrams/SingleSlipCrossing_A1toB1.svg" alt="Diagram of the positions of the single crossing points"> &lt;img src="svg_diagrams/SingleSlipCrossing_A1toB2.svg" alt="Diagram of the positions of the single crossing points">
&lt;img src="svg_diagrams/SingleSlipCrossing_A2toB2.svg" alt="Diagram of the positions of the single crossing points">&lt;/p>
&lt;h5 id="back-to-nodes">Back to nodes&lt;/h5>
&lt;p>A &lt;code>Node&lt;/code> has three attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>node_type&lt;/code>: the identifier of the &lt;a href="#node-types">&lt;code>NodeType&lt;/code>&lt;/a> of this node.&lt;/li>
&lt;li>&lt;code>ports&lt;/code>: a mapping from port names to track sections extremities.&lt;/li>
&lt;li>&lt;code>group_change_delay&lt;/code>: the time it takes to change which group of the node is activated.&lt;/li>
&lt;/ul>
&lt;p>The port names must match the ports of the node type chosen. The track section endpoints can be start or end, be careful to chose the appropriate ones.&lt;/p>
&lt;p>Most of our example&amp;rsquo;s nodes are regular point switches. The path from North station to South station has two cross switches. Finally, there is a double cross switch right before the main line splits into the North-East and South-East lines.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_rails_n_points.drawio.en.svg" alt="Track sections and points diagram">&lt;/p>
&lt;p>It is important to note that these node types are hard-coded into the project code. Only the &lt;code>extended_node_type&lt;/code> added by the user will appear in the railjson.&lt;/p>
&lt;h4 id="curves-and-slopes">Curves and slopes&lt;/h4>
&lt;p>&lt;code>Curves&lt;/code> and &lt;code>Slopes&lt;/code> are instrumental to realistic simulations. These objects are defined as a range between a &lt;code>begin&lt;/code> and &lt;code>end&lt;/code> offsets of one track section. If a curve / slope spans more than one track section, it has to be added to all of them.&lt;/p>
&lt;p>The slope / curve values are constant on their entire range. For varying curves / slopes, one needs to create several objects.&lt;/p>
&lt;p>Slope values are measured in &lt;em>meters per kilometers&lt;/em>, and the curve values are measured in &lt;em>meters&lt;/em> (the radius of the curve).&lt;/p>
&lt;div class="alert alert-primary" role="alert">
Mind that the &lt;code>begin&lt;/code> value should always be smaller than the &lt;code>end&lt;/code> value. That is why the curve / slope values can be negative: an uphill slope of 1 going from offset 10 to 0 is the same as a downhill slope of -1 going from offsets 0 to 10.
&lt;/div>
&lt;p>In the &lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/python/railjson_generator/railjson_generator/scripts/examples/small_infra.py">small_infra.py&lt;/a> file, we have slopes on the track sections &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TD0&lt;/em> and &lt;em>TD1&lt;/em>.&lt;/p>
&lt;p>There are curves as well, on the track sections &lt;em>TE0&lt;/em>, &lt;em>TE1&lt;/em>, &lt;em>TE3&lt;/em> and &lt;em>TF1&lt;/em>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="interlocking">Interlocking&lt;/h3>
&lt;/font>
&lt;p>All objects so far contributed to track topology (shape). Topology would be enough for trains to navigate the network, but not enough to do so safely. to ensure safety, two systems collaborate:&lt;/p>
&lt;ul>
&lt;li>Interlocking ensures trains are allowed to move forward&lt;/li>
&lt;li>Signaling is the mean by which interlocking communicates with the train&lt;/li>
&lt;/ul>
&lt;h4 id="detectors">Detectors&lt;/h4>
&lt;p>These objects are used to create &lt;a href="https://ressources.data.sncf.com/explore/dataset/lexique-des-acronymes-sncf/table/?sort=abreviation&amp;amp;q=TVD">TVD&lt;/a> sections (Track Vacancy Detection section): the track area in between detectors is a TVD section. When a train runs into a detector, the section it is entering becomes occupied. The only function of TVD sections is to locate trains.&lt;/p>
&lt;p>In real life, detectors can be &lt;a href="https://en.wikipedia.org/wiki/Axle_counter">axle counters&lt;/a> or &lt;a href="https://en.wikipedia.org/wiki/Track_circuit">track circuits&lt;/a> for example.&lt;/p>
&lt;p>For this mean of location to be efficient, detectors need to be placed regularly along your tracks, not too many because of cost, but not too few, because then TVD sections would be very large and trains would need to be very far apart to be told apart, which reduces capacity.&lt;/p>
&lt;p>There often are detectors close to all sides of switches. This way, interlocking is made aware pretty much immediately when a switch is cleared, which is then free to be used again.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Let&amp;rsquo;s take a cross switch as an example: if train A is crossing it &lt;em>north&lt;/em> to &lt;em>south&lt;/em> and train B is coming to cross &lt;em>west&lt;/em> to &lt;em>east&lt;/em>, then as soon as train A&amp;rsquo;s last car has passed the crossing, B should be able to go, since A is now on a completely unrelated track section.
&lt;/div>
&lt;p>In &lt;em>OSRD&lt;/em>, detectors are point objects, so all the attributes it needs are its &lt;code>id&lt;/code>, and track location (&lt;code>track&lt;/code> and &lt;code>offset&lt;/code>).&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_detectors.drawio.en.svg" alt="Infra diagram with all detectors">&lt;/p>
&lt;div class="alert alert-info" role="alert">
The clumped up squares represent many detectors at once. Indeed, because some track sections are not represented with their full length, we could not represent all the detectors on the corresponding track section.
&lt;/div>
&lt;p>Some notes:&lt;/p>
&lt;ul>
&lt;li>Between some points, we added only one detector (and not two), because they were really close together, and it would have made no sense to create a tiny TVDS between the two. This situation happened on track sections (&lt;em>TA3&lt;/em>, &lt;em>TA4&lt;/em>, &lt;em>TA5&lt;/em>, &lt;em>TF0&lt;/em> and &lt;em>TG3&lt;/em>).&lt;/li>
&lt;li>In our infrastructure, there is relatively few track sections which are long enough to require more detectors than just those related to switches. Namely, &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TDO&lt;/em>, &lt;em>TD1&lt;/em>, &lt;em>TF1&lt;/em>, &lt;em>TG1&lt;/em> and &lt;em>TH1&lt;/em>. For example &lt;em>TD0&lt;/em>, which measures 25km, has in fact 17 detectors in total.&lt;/li>
&lt;/ul>
&lt;h4 id="buffer-stops">Buffer stops&lt;/h4>
&lt;p>&lt;code>BufferStops&lt;/code> are obstacles designed to prevent trains from sliding off dead ends.&lt;/p>
&lt;p>In our infrastructure, there is a buffer stop on each track section which has a loose end. There are therefore 8 buffer stops in total.&lt;/p>
&lt;p>Together with detectors, they set the boundaries of TVD sections (see &lt;a href="#detectors">Detectors&lt;/a>)&lt;/p>
&lt;h4 id="routes">Routes&lt;/h4>
&lt;!-- TODO: translate and update link below -->
&lt;p>A &lt;code>Route&lt;/code> is an itinerary in the infrastructure. A train path is a sequence of routes. Routes are used to reserve section of path with the interlocking. See the &lt;a href="https://osrd.fr/fr/docs/reference/design-docs/interlocking/">dedicated documentation&lt;/a>.&lt;/p>
&lt;p>It is represented with the following attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>entry_point&lt;/code> and &lt;code>exit_point&lt;/code>: references detectors or buffer stops which mark the beginning and the end of the Route.&lt;/li>
&lt;li>&lt;code>entry_point_direction&lt;/code> : Direction on a track section to start the route from the &lt;code>entry_point&lt;/code>.&lt;/li>
&lt;li>&lt;code>switches_direction&lt;/code> : A set of directions to follow when we encounter a switch on our Route, to build this Route from &lt;code>entry_point&lt;/code> to &lt;code>exit_point&lt;/code>.&lt;/li>
&lt;li>&lt;code>release_detectors&lt;/code>: When a train clears a release detector, resources reserved from the beginning of the route until this detector are released.&lt;/li>
&lt;/ul>
&lt;font color=#aa026d>
&lt;h3 id="signaling">Signaling&lt;/h3>
&lt;/font>
&lt;p>Thanks to interlocking, trains are located and allowed to move. It&amp;rsquo;s a good start, but meaningless until trains are made aware of it. This is where &lt;code>Signal&lt;/code>s come into play: signals react to interlocking, and can be seen by trains.&lt;/p>
&lt;p>How trains react to signals depends on the aspect, kind of signal, and signaling system.&lt;/p>
&lt;p>Here are the most important attributes for signals:&lt;/p>
&lt;ul>
&lt;li>&lt;code>linked_detector&lt;/code>: The linked &lt;a href="#detectors">detector&lt;/a>.&lt;/li>
&lt;li>&lt;code>type_code&lt;/code>: The type of signal.&lt;/li>
&lt;li>&lt;code>direction&lt;/code>: The direction it protects, which can simply be interpreted as the way in which it can be seen by an incoming train (since there are lights only on one side&amp;hellip;). Direction is relative to track section orientation.&lt;/li>
&lt;li>Cosmetic attributes like &lt;code>angle_geo&lt;/code> or &lt;code>side&lt;/code> which control the way in which the signals are displayed in the front-end.&lt;/li>
&lt;/ul>
&lt;p>Here is a visualization of how one can represent a signal, and which direction it protects.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/signal_dir.en.svg" alt="Signal direction example">&lt;/p>
&lt;br/>
&lt;p>The way the signals are arranged is highly dependent on both signaling system and infrastructure manager.&lt;/p>
&lt;p>Here are the basic rules used for this example infrastructure:&lt;/p>
&lt;ul>
&lt;li>We add two spacing signals (one per direction) for each detector that is cutting a long TVD section into smaller ones.&lt;/li>
&lt;li>Switch entries where a train might have to stop are protected by a signal (which is located outside of the switch TVD section). It must be visible from the direction used to approach the switch. When there are multiple switches in a row, only the first one usually needs protection, as interlocking is usually designed as not to encourage trains stopping in the middle of intersections.&lt;/li>
&lt;/ul>
&lt;p>Note that detectors linked to at least one signal are not represented, as there are not signals without associated detectors in this example.&lt;/p>
&lt;p>To get the &lt;code>id&lt;/code> of a detector linked to a signal, take the signal&amp;rsquo;s &lt;code>id&lt;/code> and replace &lt;em>S&lt;/em> by &lt;em>D&lt;/em> (e.g. SA0 -&amp;gt; DA0).&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_signals.drawio.en.svg" alt="Infra diagram with all signals">&lt;/p>
&lt;div class="alert alert-info" role="alert">
On &lt;em>TA6&lt;/em>, &lt;em>TA7&lt;/em>, &lt;em>TD0&lt;/em> and &lt;em>TD1&lt;/em> we could not represent all signals because these track sections are very long and have many detectors, hence many signals.
&lt;/div>
&lt;font color=#aa026d>
&lt;h3 id="electrification">Electrification&lt;/h3>
&lt;/font>
&lt;p>To allow electric trains to run on our infrastructure, we need to specify which parts of the infrastructure is electrified.&lt;/p>
&lt;h4 id="catenaries">Catenaries&lt;/h4>
&lt;p>&lt;code>Catenaries&lt;/code> are objects that represent the overhead wires that power electric trains. They are represented with the following attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>voltage&lt;/code>: A string representing the type of power supply used for electrification&lt;/li>
&lt;li>&lt;code>track_ranges&lt;/code>: A list of range of track sections (&lt;code>TrackRanges&lt;/code>) covered by this catenary. A &lt;code>TrackRange&lt;/code> is composed of a track section id, a &lt;code>begin&lt;/code> offset and an &lt;code>end&lt;/code> offset.&lt;/li>
&lt;/ul>
&lt;p>In our example infrastructure, we have two &lt;code>Catenaries&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>One with &lt;code>voltage&lt;/code> set to &lt;code>&amp;quot;1500&amp;quot;&lt;/code>, which covers only &lt;em>TA0&lt;/em>.&lt;/li>
&lt;li>One with &lt;code>voltage&lt;/code> set to &lt;code>&amp;quot;25000&amp;quot;&lt;/code>, which covers all others except &lt;em>TD1&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>This means that only thermal trains can cross the &lt;em>TD1&lt;/em> track section.&lt;/p>
&lt;p>Our example also outlines that, unlike its real life counterpart, a single &lt;code>Catenary&lt;/code> may cover the whole infrastructure.&lt;/p>
&lt;h4 id="neutral-sections">Neutral Sections&lt;/h4>
&lt;p>In some parts of an infrastructure, the train drivers may be instructed - mainly for safety reasons - to cut the power supply to the train.&lt;/p>
&lt;p>To represent such parts, we use &lt;code>NeutralSections&lt;/code>. They are represented mainly with the following attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>track_ranges&lt;/code>: A list of &lt;code>DirectedTrackRanges&lt;/code> (track ranges associated to a direction) which are covered by this neutral section.&lt;/li>
&lt;li>&lt;code>lower_pantograph&lt;/code>: A boolean indicating whether the train&amp;rsquo;s pantograph should be lowered while in this section.&lt;/li>
&lt;/ul>
&lt;p>In our example infrastructure, we have three &lt;code>NeutralSections&lt;/code>: one at the junction of the &lt;code>&amp;quot;1500&amp;quot;&lt;/code> and &lt;code>&amp;quot;25000&amp;quot;&lt;/code> catenaries, one on &lt;em>TA6&lt;/em> and one on &lt;em>TG1&lt;/em> and &lt;em>TG4&lt;/em>.&lt;/p>
&lt;p>For more details about the model see the &lt;a href="../neutral_sections">dedicated page&lt;/a>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="miscellaneous">Miscellaneous&lt;/h3>
&lt;/font>
&lt;h4 id="operational-points">Operational points&lt;/h4>
&lt;p>Operational point is also known in French as &amp;ldquo;Point Remarquable&amp;rdquo; (PR).
One &lt;code>OperationalPoint&lt;/code> is a &lt;strong>collection&lt;/strong> of points (&lt;code>OperationalPointParts&lt;/code>) of interest.&lt;/p>
&lt;p>For example, it may be convenient (reference point for train operation) to store the location of platforms as parts and group them by station in operational points.
In the same way, a bridge over tracks will be &lt;strong>one&lt;/strong> OperationalPoint, but it will have &lt;strong>several&lt;/strong> OperationPointParts, one at the intersection of each track.&lt;/p>
&lt;p>In the example infrastructure, we only used operational points to represent stations. Operational point parts are displayed as purple diamonds. Keep in mind a single operational point may contain multiple parts.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/small_infra_op_points.drawio.en.svg" alt="Operational points examples">&lt;/p>
&lt;h4 id="loading-gauge-limits">Loading Gauge Limits&lt;/h4>
&lt;p>These objects are akin to &lt;code>Slopes&lt;/code> and &lt;code>Curves&lt;/code>: it covers a range of track section, with a &lt;code>begin&lt;/code> and an &lt;code>end&lt;/code> offset. It represents a restriction on the trains that can travel on the given range, by weight or by train type (freight or passenger).&lt;/p>
&lt;p>We did not put any in our examples.&lt;/p>
&lt;h4 id="speed-sections">Speed Sections&lt;/h4>
&lt;p>The &lt;code>SpeedSections&lt;/code> represent speed limits (in meters per second) that are applied on some parts of the tracks. One &lt;code>SpeedSection&lt;/code> can span on several track sections, and do not necessarily cover the whole track sections. Speed sections can overlap.&lt;/p>
&lt;p>In our example infrastructure, we have a speed section covering the whole infrastructure, limiting the speed to 300 km/h. On a smaller part of the infrastructure, we applied more restrictive speed sections.&lt;/p>
&lt;p>&lt;img src="svg_diagrams/speed_sections.en.svg" alt="Speed section examples">&lt;/p></description></item><item><title>Docs: Neutral Sections</title><link>https://osrd.fr/en/docs/explanation/models/neutral_sections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/models/neutral_sections/</guid><description>
&lt;h2 id="physical-object-to-model">Physical object to model&lt;/h2>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>For a train to be able to run, it must either have an energy source on board (fuel, battery, hydrogen, &amp;hellip;) or be supplied with energy throughout its journey.&lt;/p>
&lt;p>To supply this energy, electrical cables are suspended above the tracks: the &lt;em>catenaries&lt;/em>. The train then makes contact with these cables thanks to a conducting piece mounted on a mechanical arm: the &lt;em>pantograph&lt;/em>.&lt;/p>
&lt;h3 id="neutral-sections">Neutral sections&lt;/h3>
&lt;p>With this system it is difficult to ensure the electrical supply of a train continuously over the entire length of a line. On certain sections of track, it is necessary to cut the electrical supply of the train. These portions are called &lt;strong>neutral sections&lt;/strong>.&lt;/p>
&lt;p>Indeed, in order to avoid energy losses along the catenaries, the current is supplied by several substations distributed along the tracks. Two portions of catenaries supplied by different substations must be electrically isolated to avoid short circuits.&lt;/p>
&lt;p>Moreover, the way the tracks are electrified (DC or not for example) can change according to the local uses and the time of installation. It is again necessary to electrically isolate the portions of tracks which are electrified differently. The train must also (except in particular cases) change its pantograph when the type of electrification changes.&lt;/p>
&lt;p>In both cases, the driver is instructed to cut the train&amp;rsquo;s traction, and sometimes even to lower the pantograph.&lt;br>
In the French infrastructure, these zones are indicated by announcement, execution and end signs. They also carry the indication to lower the pantograph or not. The portions of track between the execution and end may not be electrified entirely, and may not even have a catenary (in this case the zone necessarily requires lowering the pantograph).&lt;br>
&lt;em>REV&lt;/em> (for reversible) signs are sometimes placed downstream of the end of zone signs. They are intended for trains that run with a pantograph at the rear of the train. These signs indicate that the driver can resume traction safely.&lt;/p>
&lt;p>Additionally, it may sometimes be impossible on a short section of track to place a catenary or to raise the train&amp;rsquo;s pantograph. In this case the line is still considered electrified, and the area without electrification (passage under a bridge for example) is considered as a neutral section.&lt;/p>
&lt;h3 id="rolling-stock">Rolling stock&lt;/h3>
&lt;p>After passing through a neutral section, a train must resume traction. This is not immediate (a few seconds), and the necessary duration depends on the rolling stock.&lt;/p>
&lt;p>In addition, the driver must, if necessary, lower his pantograph, which also takes time (a few tens of seconds) and also depends on the rolling stock.&lt;/p>
&lt;p>Thus, the coasting imposed on the train extends outside the neutral section, since these system times are to be counted from the end of the neutral section.&lt;/p>
&lt;h2 id="data-model">Data model&lt;/h2>
&lt;p>We have chosen to model the neutral sections as the space between the signs linked to it (and not as the precise zone where there is no catenary or where the catenary is not electrified).&lt;/p>
&lt;p>This zone is directional, &lt;em>i.e.&lt;/em> associated with a direction of travel, in order to be able to take into account different placements of signs according to the direction. The execution sign of a given direction is not necessarily placed at the same position as the end of zone sign of the opposite direction.&lt;/p>
&lt;p>For a two-way track, a neutral section is therefore represented by two objects.&lt;/p>
&lt;p>The schema is the following&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;lower_pantograph&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">boolean&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;track_ranges&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;track&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;end&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;direction&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">enum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;announcement_track_ranges&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;track&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;end&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">number&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;direction&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">enum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>lower_pantograph&lt;/code>: indicates whether the pantograph should be lowered in this section&lt;/li>
&lt;li>&lt;code>track_ranges&lt;/code>: list of track sections ranges where the train must not traction&lt;/li>
&lt;li>&lt;code>announcement_track_ranges&lt;/code>: list of track sections ranges between the announcement sign and the execution sign&lt;/li>
&lt;/ul>
&lt;h2 id="display">Display&lt;/h2>
&lt;h3 id="map">Map&lt;/h3>
&lt;p>The zones displayed in the map correspond to the &lt;code>track_ranges&lt;/code> of neutral sections, thus are between the execution and end signs of the zone. The color of the zone indicates whether the train must lower its pantograph in the zone or not.&lt;/p>
&lt;p>The direction in which the zone applies is not represented.&lt;/p>
&lt;h3 id="simulation-results">Simulation results&lt;/h3>
&lt;p>In the linear display, it is always the area between EXE and FIN that is displayed.&lt;/p>
&lt;h2 id="pathfinding">Pathfinding&lt;/h2>
&lt;p>Neutral sections are therefore portions of &amp;ldquo;non-electrified&amp;rdquo; track where an electric train can still run (but where it cannot traction).&lt;/p>
&lt;p>When searching for a path in the infrastructure, an electric train can travel through a track section that is not covered by the &lt;code>track_ranges&lt;/code> of a catenary object (documentation to be written) only if it is covered by the &lt;code>track_ranges&lt;/code> of a neutral section.&lt;/p>
&lt;h2 id="simulation">Simulation&lt;/h2>
&lt;p>In our simulation, we approximate the driver&amp;rsquo;s behavior as follows:&lt;/p>
&lt;ul>
&lt;li>The coasting is started as soon as the train&amp;rsquo;s head passes the announcement sign&lt;/li>
&lt;li>The system times (pantograph reading and traction resumption) start as soon as the train&amp;rsquo;s head passes the end sign.&lt;/li>
&lt;/ul>
&lt;p>In the current simulation, it is easier to use spatial integration bounds rather than temporal ones. We make the following approximation: when leaving the neutral section, we multiply the system times by the speed at the exit of the zone. The coasting is then extended over the obtained distance. This approximation is reasonable because the train&amp;rsquo;s inertia and the almost absence of friction guarantee that the speed varies little over this time interval.&lt;/p>
&lt;h2 id="improvements-to-be-made">Improvements to be made&lt;/h2>
&lt;p>Several aspects could be improved:&lt;/p>
&lt;ul>
&lt;li>We do not model the &lt;em>REV&lt;/em> signs, all trains therefore only have one pantograph at the front in our simulations.&lt;/li>
&lt;li>System times are approximated.&lt;/li>
&lt;li>The driver&amp;rsquo;s behavior is rather restrictive (coasting could start after the announcement sign).&lt;/li>
&lt;li>The display of the zones is limited: no representation of the direction or the announcement zones.&lt;/li>
&lt;li>These zones are not editable.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Prior art</title><link>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/prior-art/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/prior-art/</guid><description>
&lt;p>The current implementation has a number of shortcomings making it pretty much impossible to evolve to
meet current system requirements. It also has a number of less severe flaws, such as the over-reliance
on floating point, especially for input and output.&lt;/p>
&lt;p>The previous implementation cannot be changed to:&lt;/p>
&lt;ul>
&lt;li>react to signaling, as constraints stay the same as the simulation evolves&lt;/li>
&lt;li>handle rich train state vectors, due to the way margins are implemented&lt;/li>
&lt;li>be usable for both incremental simulation and batch&lt;/li>
&lt;/ul>
&lt;p>These limitations are the primary reasons for this redesign.&lt;/p>
&lt;h2 id="margins">Margins&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>are defined as post-processing filter passes on simulation results. This has a number of undesirable side effects:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>margin algorithms produce the final simulation results. They may produce physically unrealistic simulations results&lt;/p>
&lt;/li>
&lt;li>
&lt;p>because margins are applied after the simulation, the simulation can&amp;rsquo;t adjust to impossible margin values. Thus the simulation fails instead of giving a &amp;ldquo;best effort&amp;rdquo; result.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>margin algorithms have no choice but to piece together results of different simulations:&lt;/p>
&lt;ul>
&lt;li>engineering margins are defined such that their effect has to be entirely contained within their bounds.
even though it&amp;rsquo;s a desirable property, it means that simulations become a multi-pass affair, with no obvious
way of keeping train behavior consistent across passes and boundaries.&lt;/li>
&lt;li>this can only be done if the train state is entirely described by its location and speed,
otherwise simulation results cannot be pieced together.&lt;/li>
&lt;li>piecing together simulation results is very hard to execute reliably, as there are many corner cases to be considered.
the algorithm is quite brittle.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>how much time should be lost and where isn&amp;rsquo;t defined in a way that makes scheduled points implementation easy&lt;/p>
&lt;/li>
&lt;li>
&lt;p>when a transition between two margin values occurs, slow downs occur before value changes, and speed ups
after value changes. This is nice in theory, because it makes the graphs look nicer. The downside is that it
makes margin values interdependent at each slow-down, as how much speed needs to be lost affects the time lost
in the section.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="input-modeling">Input modeling&lt;/h2>
&lt;p>With the previous implementation, the simulation takes sequence of constraint position and speed curves as an input
(continuous in position, can be discontinuous in speed), and produces a continuous curve.&lt;/p>
&lt;p>The output is fine, but the input is troublesome:&lt;/p>
&lt;ul>
&lt;li>braking curves have to be part of constraint curves&lt;/li>
&lt;li>these constraint curves don&amp;rsquo;t have a direct match with actual constraints, such as speed limits, stops, or reaction to signal&lt;/li>
&lt;li>constraints cannot evolve over time, and cannot be interpreted differently depending on when the train reached these constraints&lt;/li>
&lt;li>constraints cannot overlap. the input is pre-processed to filter out obscured constraints&lt;/li>
&lt;/ul></description></item><item><title>Docs: Discontinuities and backtracking</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/backtracking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/backtracking/</guid><description>
&lt;h4 id="the-discontinuity-problem">The discontinuity problem&lt;/h4>
&lt;p>When a new graph edge is visited, a simulation is run to evaluate
its speed. But it is not possible to see beyond the current edge.
This makes it difficult to compute braking curves, because
they can span over several edges.&lt;/p>
&lt;p>&lt;img src="discontinuity.png" alt="Discontinuity">&lt;/p>
&lt;blockquote>
&lt;p>This example illustrates the problem: by default
the first edge is explored by going at maximum speed.
The destination is only visible once the second edge is visited,
which doesn&amp;rsquo;t leave enough distance to stop.&lt;/p>
&lt;/blockquote>
&lt;h4 id="solution--backtracking">Solution : backtracking&lt;/h4>
&lt;p>To solve this problem, when an edge is generated with a
discontinuity in the speed envelopes, the algorithm goes back
over the previous edges to create new ones that include the
decelerations.&lt;/p>
&lt;p>To give a simplified example, on a path of 4 edges
where the train can accelerate or decelerate by 10km/h per edge:&lt;/p>
&lt;p>&lt;img src="backtracking_1.png" alt="Discontinuity (edge version, 1/2)">&lt;/p>
&lt;p>For the train to stop at the end of route 4, it must be at most
at 10km/h at the end of edge 3. A new edge is then created on
edge 3, which ends at 10km/h. A deceleration is computed
backwards from the end of the edge back to the start,
until the original curve is met (or the start of the edge).&lt;/p>
&lt;p>In this example, the discontinuity has only been moved to the
transition between edges 2 and 3. The process is then repeated
on edge 2, which gives the following result:&lt;/p>
&lt;p>&lt;img src="backtracking_2.png" alt="Discontinuity (edge version, 2/2)">&lt;/p>
&lt;p>Old edges are still present in the graph as they can lead to other solutions.&lt;/p></description></item><item><title>Docs: Envelopes system</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/envelopes_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/envelopes_system/</guid><description>
&lt;p>The envelope system is an interface created specifically for the OSRD gait calculation. It allows you to manipulate different space/velocity curves, to slice them, to end them, to interpolate specific points, and to address many other needs necessary for the gait calculation.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="a-specific-interface-in-the-osrd-core-service">A specific interface in the OSRD Core service&lt;/h3>
&lt;/font>
&lt;p>The envelope system is part of the core service of OSRD (see &lt;a href="../architecture/_index.md">software architecture&lt;/a>).&lt;/p>
&lt;p>Its main components are :&lt;/p>
&lt;p>&lt;strong>1 - EnvelopePart:&lt;/strong> space/speed curve, defined as a sequence of points and having metadata indicating for example if it is an acceleration curve, a braking curve, a speed hold curve, etc.&lt;/p>
&lt;p>&lt;strong>2 - Envelope:&lt;/strong> a list of end-to-end EnvelopeParts on which it is possible to perform certain operations:&lt;/p>
&lt;ul>
&lt;li>check for continuity in space (mandatory) and speed (optional)&lt;/li>
&lt;li>look for the minimum and/or maximum speed of the envelope&lt;/li>
&lt;li>cut a part of the envelope between two points in space&lt;/li>
&lt;li>perform a velocity interpolation at a certain position&lt;/li>
&lt;li>calculate the elapsed time between two positions in the envelope&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../envelopes_scheme.png" alt="envelope_scheme">&lt;/p>
&lt;p>&lt;strong>3 - Overlays :&lt;/strong> system for adding more constrained (i.e. lower speed) EnvelopeParts to an existing envelope.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="given-envelopes-vs-calculated-envelopes">Given envelopes vs. calculated envelopes&lt;/h3>
&lt;/font>
&lt;p>During the simulation, the train is supposed to follow certain speed instructions. These are modelled in OSRD by envelopes in the form of space/speed curves. Two types can be distinguished:&lt;/p>
&lt;ul>
&lt;li>Envelopes from &lt;strong>infrastructure and rolling stock data&lt;/strong>, such as maximum line speed and maximum train speed. Being input data for our calculation, they do not correspond to curves with a physical meaning, as they are not derived from the results of a real integration of the physical equations of motion.&lt;/li>
&lt;li>The envelopes result from &lt;strong>real integration&lt;/strong> of the physical equations of motion. They correspond to a curve that is physically tenable by the train and also contain time information.&lt;/li>
&lt;/ul>
&lt;p>A simple example to illustrate this difference: if we simulate a TER journey on a mountain line, one of the input data will be a maximum speed envelope of 160km/h, corresponding to the maximum speed of our TER. However, this envelope does not correspond to a physical reality, as it is possible that on certain sections the gradient is too steep for the train to be able to maintain this maximum speed of 160km/h. The calculated envelope will therefore show in this example a speed drop in the steepest areas, where the envelope given was perfectly flat.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="simulation-of-several-trains">Simulation of several trains&lt;/h3>
&lt;/font>
&lt;p>In the case of the simulation of many trains, the signalling system must ensure &lt;strong>safety&lt;/strong>. The effect of signalling on the running calculation of a train is reproduced by superimposing dynamic envelopes on the static envelope. A new dynamic envelope is introduced for example when a signal closes. The train follows the static economic envelope superimposed on the dynamic envelopes, if any. In this simulation mode, a time check is performed against a theoretical time from the time information of the static economic envelope. If the train is late with respect to the scheduled time, it stops following the economic envelope and tries to go faster. Its space/speed curve will therefore be limited by the maximum effort envelope.&lt;/p></description></item><item><title>Docs: Driving instructions</title><link>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driving-instruction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driving-instruction/</guid><description>
&lt;p>Driving instructions model what the train has to do, and under what conditions.
Driving instructions are generated using domain constraints such as:&lt;/p>
&lt;ul>
&lt;li>unsignaled line speed limits&lt;/li>
&lt;li>permanent signaled speed limits&lt;/li>
&lt;li>temporary speed limits&lt;/li>
&lt;li>dynamic signaling:
&lt;ul>
&lt;li>block / moving block&lt;/li>
&lt;li>dynamically signaled speed restrictions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>neutral zones&lt;/li>
&lt;li>stops&lt;/li>
&lt;li>margins&lt;/li>
&lt;/ul>
&lt;p>There are two types of driving instructions:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Abstract driving instructions&lt;/strong> model the high-level, rolling stock independent
range of acceptable behavior: reach 30km/h at this location&lt;/li>
&lt;li>&lt;strong>Concrete driving instructions&lt;/strong> model the specific range of acceptable behavior
for a specific rolling stock, using limit curves: don&amp;rsquo;t go faster than this curve&lt;/li>
&lt;/ul>
&lt;pre class="mermaid">flowchart TD
Constraint[constraint]
AbstractDrivingInstruction[abstract driving instruction]
ConcreteDrivingInstruction[concrete driving instruction]
RollingStockIntegrator[rolling stock integrator]
Compiler([compiler])
Constraint -- generates one or more --&amp;gt; AbstractDrivingInstruction
AbstractDrivingInstruction --&amp;gt; Compiler
RollingStockIntegrator --&amp;gt; Compiler
Compiler --&amp;gt; ConcreteDrivingInstruction&lt;/pre>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>After reviewing the design document, the necessity to distinguish between abstract and concrete driving instructions was questioned.&lt;/p>
&lt;p>Indeed, it isn&amp;rsquo;t clear whether the limit curves are used for the driving instructions interpretation algorithm.
If it isn&amp;rsquo;t, the computation of limit curves could be moved inside the &lt;a href="https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driver-behavior-modules/">driver behavior module&lt;/a>.&lt;/p>
&lt;p>TODO: remove this message or fix the design document after implementation.&lt;/p>
&lt;/div>
&lt;h2 id="interpreting-driving-instructions">Interpreting driving instructions&lt;/h2>
&lt;p>During the simulation, driving instructions are partitioned into 4 sets:&lt;/p>
&lt;ul>
&lt;li>&lt;code>PENDING&lt;/code> instructions may apply at some point in the future&lt;/li>
&lt;li>&lt;code>RECEIVED&lt;/code> instructions aren&amp;rsquo;t enforced yet, but will be unless overridden&lt;/li>
&lt;li>&lt;code>ENFORCED&lt;/code> instructions influence train behavior&lt;/li>
&lt;li>&lt;code>DISABLED&lt;/code> instructions don&amp;rsquo;t ever have to be considered anymore. There are multiple ways instructions can be disabled:
&lt;ul>
&lt;li>&lt;code>SKIPPED&lt;/code> instructions were not received&lt;/li>
&lt;li>&lt;code>RETIRED&lt;/code> instructions expired by themselves&lt;/li>
&lt;li>&lt;code>OVERRIDDEN&lt;/code> instructions were removed by another instruction&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre class="mermaid">flowchart TD
subgraph disabled
skipped
retired
overridden
end
subgraph active
received
enforced
end
pending --&amp;gt; received
pending --&amp;gt; skipped
received --&amp;gt; enforced
received --&amp;gt; overridden
enforced --&amp;gt; retired
enforced --&amp;gt; overridden&lt;/pre>
&lt;p>These sets evolve as follows:&lt;/p>
&lt;ul>
&lt;li>when an integration steps overlaps a &lt;code>PENDING&lt;/code> instruction&amp;rsquo;s received condition, it is &lt;code>RECEIVED&lt;/code> and becomes a candidate to execution
&lt;ul>
&lt;li>existing instructions may be &lt;code>OVERRIDDEN&lt;/code> due to an &lt;code>override_on_received&lt;/code> operation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>if an instruction cannot ever be received at any future simulation state, it transitions to the &lt;code>SKIPPED&lt;/code> state&lt;/li>
&lt;li>when simulation state exceeds an instruction&amp;rsquo;s enforcement position, it becomes &lt;code>ENFORCED&lt;/code>. Only enforced instructions influence train behavior.
&lt;ul>
&lt;li>existing instructions may be &lt;code>OVERRIDDEN&lt;/code> due to an &lt;code>override_on_enforced&lt;/code> operation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>when simulation state exceeds an instruction&amp;rsquo;s retirement position, it becomes &lt;code>RETIRED&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="overrides">Overrides&lt;/h3>
&lt;p>When an instruction transitions to the &lt;code>RECEIVED&lt;/code> or &lt;code>ENFORCED&lt;/code> state, it can disable active instructions
which match some metadata predicate. There are two metadata attributes which can be relied on for overrides:&lt;/p>
&lt;ul>
&lt;li>the &lt;code>kind&lt;/code> allows overriding previous instructions for a given domain, such as spacing or block signaled speed limits&lt;/li>
&lt;li>the &lt;code>rank&lt;/code> can be used as a &amp;ldquo;freshness&amp;rdquo; or &amp;ldquo;priority&amp;rdquo; field. If two instructions overriding each other are received
(such as when a train sees two signals), the rank allows deciding which instruction should be prioritized.&lt;/li>
&lt;/ul>
&lt;p>This is required to implement a number of signaling features, as well as stops, where the stop instruction is overridden
by the restart instruction.&lt;/p>
&lt;h3 id="data-model">Data model&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">ReceivedCond&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">position_in&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PosRange&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">time_in&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">TimeRange&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">InstructionMetadata&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// state transitions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">received_when&lt;/span>: &lt;span style="color:#000">ReceivedCond&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">enforced_at&lt;/span>: &lt;span style="color:#000">Position&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">retired_at&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Position&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// instruction metadata, used by override filters. if an instruction
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// has no metadata nor retiring condition, it cannot be overridden.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kind&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">InstructionKindId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// could be SPACING, SPEED_LIMIT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rank&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">usize&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// when the instruction transitions to a given state,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// instructions matching any filter are overridden
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">override_on_received&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">OverrideFilter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">override_on_enforced&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">OverrideFilter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">AbstractInstruction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NeutralZone&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SpeedTarget&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">at&lt;/span>: &lt;span style="color:#000">Position&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">speed&lt;/span>: &lt;span style="color:#000">Speed&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">ConcreteInstruction&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">NeutralZone&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SpeedTarget&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">braking_curve&lt;/span>: &lt;span style="color:#000">SpeedPosCurve&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">OverrideFilter&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">kind&lt;/span>: &lt;span style="color:#000">InstructionKindId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">rank&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">RankRelation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">usize&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">RankRelation&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">LT&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">LE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EQ&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GT&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;h3 id="lowering-constraints-to-an-intermediate-representation">Lowering constraints to an intermediate representation&lt;/h3>
&lt;p>Early on, we started making lists of what domain constraints can have an impact on train behavior.
Meanwhile, to simulate train behavior, we figured out that we need to know which constraints apply at any given time.&lt;/p>
&lt;p>There&amp;rsquo;s a fundamental tension between these two design constraints, which can be resolved in one of two ways:&lt;/p>
&lt;ul>
&lt;li>either treat each type of constraint as its own thing during the simulation&lt;/li>
&lt;li>abstract away constraints into a common representation, and then simulate that&lt;/li>
&lt;/ul>
&lt;h4 id="hahahugoshortcode183s1hbhb-distinct-constraint-types">❌
Distinct constraint types&lt;/h4>
&lt;p>When we first started drafting architecture diagrams, the train simulation API directly took
a bunch of constraint types as an input. It brought up a number of issues:&lt;/p>
&lt;ul>
&lt;li>the high diversity of constraint types makes it almost impossible to describe all interactions between all constraint types&lt;/li>
&lt;li>the domain of some of these interactions is very complex (block signaling)&lt;/li>
&lt;li>when simulating, it does not seem to matter why a constraint is there, only what to do about it&lt;/li>
&lt;/ul>
&lt;p>We couldn&amp;rsquo;t find clear benefits to dragging distinctions between constraint types deep into the implementation.&lt;/p>
&lt;h4 id="hahahugoshortcode183s2hbhb-internal-constraint-types-abstraction">❌
Internal constraint types abstraction&lt;/h4>
&lt;p>We then realized that abstracting over constraint types during simulation had immense benefits:&lt;/p>
&lt;ul>
&lt;li>it allows expressing requirements on what constraints need to be enforceable&lt;/li>
&lt;li>it greatly simplifies the process of validating constraint semantics: instead of having to validate interactions between
every possible type of constraints, we only have to validate that the semantics of each constraint type can be transferred
to the abstract constraint type&lt;/li>
&lt;/ul>
&lt;p>We decided to explore the possibility of keeping constraint types distinct in the external API,
but lowering these constraints into an intermediary representation internally. We found a number of downsides:&lt;/p>
&lt;ul>
&lt;li>the public simulation API would still bear the complexity of dealing with many constraint types&lt;/li>
&lt;li>there would be a need to incrementally generate internal abstracted constraints to support the incremental API&lt;/li>
&lt;/ul>
&lt;h4 id="hahahugoshortcode183s3hbhb-external-constraint-types-abstraction">✅
External constraint types abstraction&lt;/h4>
&lt;p>We tried to improve over the previous proposal by moving the burden of converting many constraints into a common abstraction out of the simulation API.&lt;/p>
&lt;p>Instead of having many constraint types as an input, the simulation API takes a collection of a single abstract constraint type. The task of converting
domain constraints to abstract driving instructions is left to the API user.&lt;/p>
&lt;p>We found that doing so:&lt;/p>
&lt;ul>
&lt;li>reduces the API surface of the train simulation module&lt;/li>
&lt;li>decouples behavior from constraint types: if a new constraint type needs to be added, the simulation
API only needs expansion if the expected behavior expected for this constraint isn&amp;rsquo;t part of the API.&lt;/li>
&lt;/ul>
&lt;h3 id="interpreting-driving-instructions-1">Interpreting driving instructions&lt;/h3>
&lt;p>As the train progresses through the simulation, it reacts according to driving instructions
which depend on more than the bare train physics state (position, time, and speed):&lt;/p>
&lt;ul>
&lt;li>the behavior of a train on each block depends on the state of the last passed block signal&lt;/li>
&lt;li>if a train encounters a yellow light, then a red light, stops before the red light, and the
red light turns green, the train may have to keep applying the driving instruction from the
yellow signal until the green light is passed&lt;/li>
&lt;/ul>
&lt;p>Thus, given:&lt;/p>
&lt;ul>
&lt;li>set of all possible driving instructions (alongside applicability metadata)&lt;/li>
&lt;li>the result of previous integration steps (which may be extended to hold metadata)&lt;/li>
&lt;/ul>
&lt;p>There is a need to know what driving instructions are applicable to the current integration step.&lt;/p>
&lt;p>Overrides are a way of modeling instructions which disable previous ones. Here are some examples:&lt;/p>
&lt;ul>
&lt;li>if a driver watches a signal change state, its new aspect&amp;rsquo;s instruction might take precedence over the previous one&lt;/li>
&lt;li>as block signaling slows a train down, new signals can override instructions from previous signals, as they encode information that is more up to date&lt;/li>
&lt;/ul>
&lt;p>We identified multiple filtering needs:&lt;/p>
&lt;ul>
&lt;li>overrides happen as a given kind of restriction is updated: SPACING instructions might override other SPACING instructions,
but wish to leave other speed restrictions unaffected&lt;/li>
&lt;li>as multiple block signals can be visible at once, there&amp;rsquo;s a need to avoid overriding instructions of downstream signals with updates to upstream signals&lt;/li>
&lt;/ul>
&lt;p>We quickly settled on adding a kind field, but had a lengthy discussion over how to discriminate upstream and downstream signals.
We explored the following options:&lt;/p>
&lt;ul>
&lt;li>❌
adding &lt;code>source&lt;/code> metadata, which was rejected as it does not address the issue of upstream / downstream&lt;/li>
&lt;li>❌
adding identifiers to instructions, and overriding specific instructions, which was rejected as it makes
instruction generation and processing more complex&lt;/li>
&lt;li>✅
adding some kind of priority / rank field, which was adopted&lt;/li>
&lt;/ul></description></item><item><title>Docs: Speed limits</title><link>https://osrd.fr/en/docs/reference/design-docs/signaling/speed-limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/signaling/speed-limits/</guid><description>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>Railway infrastructure has a surprising variety of speed limits:&lt;/p>
&lt;ul>
&lt;li>some are known by the driver, and not announced at all&lt;/li>
&lt;li>some are announced by fixed signs regardless of where the train goes&lt;/li>
&lt;li>some are announced by fixed signs, depending on where the train path goes&lt;/li>
&lt;li>some are announced by dynamic signals regardless of where the train goes&lt;/li>
&lt;li>some are announced by dynamic signals, depending on where the train path goes&lt;/li>
&lt;/ul>
&lt;h2 id="data-model">Data model&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># unique speed limit identifier&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;...&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A list of routes the speed limit is enforced on. When empty&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or missing, the speed limit is enforced regardless of the route.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># /!\ When a speed section is announced by signals, the routes it is&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># announced on are automatically filled in /!\&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;on_routes&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${ROUTE_A}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${ROUTE_B}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># &amp;#34;on_routes&amp;#34;: null, # not conditional&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># &amp;#34;on_routes&amp;#34;: [], # conditional&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A speed limit in meters per second.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;speed_limit&amp;#34;: &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A map from train tag to speed limit override. If missing and&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the speed limit is announced by a signal, this field is deduced&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># from the signal.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;speed_limit_by_tag&amp;#34;: {&amp;#34;freight&amp;#34;: &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">20&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;track_ranges&amp;#34;: [{&amp;#34;track&amp;#34;: &amp;#34;${TRACK_SECTION}&amp;#34;, &amp;#34;begin&amp;#34;: 0, &amp;#34;end&amp;#34;: 42, &amp;#34;applicable_directions&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;START_TO_STOP&amp;#34;&lt;/span>}&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="design-considerations">Design considerations&lt;/h2>
&lt;h3 id="where-to-put-the-speed-limit-value">Where to put the speed limit value&lt;/h3>
&lt;p>When a speed limit is announced by dynamic signaling, we may be in a position where speed limit value is duplicated:&lt;/p>
&lt;ul>
&lt;li>once in the signal itself&lt;/li>
&lt;li>once in the speed limit&lt;/li>
&lt;/ul>
&lt;p>There are multiple ways this issue can be dealt with:&lt;/p>
&lt;h4 id="hahahugoshortcode157s0hbhb-mandatory-speed-limit-value-in-the-speed-section">✅
Mandatory speed limit value in the speed section&lt;/h4>
&lt;p>Upsides:&lt;/p>
&lt;ul>
&lt;li>simpler to implement, works even without train reactions to signals nor additional API&lt;/li>
&lt;/ul>
&lt;p>Downsides:&lt;/p>
&lt;ul>
&lt;li>more work on the side of users&lt;/li>
&lt;li>room for inconsistencies between the speed limit announced by signaling, and the effective speed limit&lt;/li>
&lt;/ul>
&lt;h4 id="hahahugoshortcode157s1hbhb-deduce-the-signal-constraint-from-the-speed-limit">❌
Deduce the signal constraint from the speed limit&lt;/h4>
&lt;p>This option was not explored much, as it was deemed awkward
to deduce signal parameters from a speed limit value.&lt;/p>
&lt;h4 id="hahahugoshortcode157s2hbhb-deduce-the-speed-limit-from-the-signal">❌
Deduce the speed limit from the signal&lt;/h4>
&lt;p>Make the speed limit value optional, and deduce it from the signal itself.
Speed limits per tag also have to be deduced if missing.&lt;/p>
&lt;p>Upsides:&lt;/p>
&lt;ul>
&lt;li>less work for users&lt;/li>
&lt;li>lessens the likelihood of configuration mismatches&lt;/li>
&lt;/ul>
&lt;p>Downsides:&lt;/p>
&lt;ul>
&lt;li>not all signaling systems work well with this. It may be difficult to deduce the announced speed limit from a signal configuration, such as with TVM.&lt;/li>
&lt;li>speed limits have to be deduced, which increases implementation complexity&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-link-announce-signals-and-speed-limit-area">How to link announce signals and speed limit area&lt;/h3>
&lt;p>Speed limit announced by dynamic signaling often start being enforced at a specific location,
which is distinct from the signal which announces the speed limit.&lt;/p>
&lt;p>To allow for correct train reactions to this kind of limits, a link between the announce signal
and the speed limit section has to be made at some point.&lt;/p>
&lt;h4 id="hahahugoshortcode157s3hbhb-automated-matching-of-signals-and-speed-sections">❌
Automated matching of signals and speed sections&lt;/h4>
&lt;p>Was not deemed realistic.&lt;/p>
&lt;h4 id="hahahugoshortcode157s4hbhb-explicit-link-from-route-to-speed-limit-and-signals">❌
Explicit link from route to speed limit and signals&lt;/h4>
&lt;p>Was deemed to be awkward, as signaling is currently built over interlocking.
Referencing signaling from interlocking creates a circular dependency between the two schemas.&lt;/p>
&lt;h4 id="hahahugoshortcode157s5hbhb-explicit-link-from-speed-limit-to-signals">❌
Explicit link from speed limit to signals&lt;/h4>
&lt;p>Add a list of &lt;code>(route, signal)&lt;/code> tuples to speed sections.&lt;/p>
&lt;p>Upside:&lt;/p>
&lt;ul>
&lt;li>a link with the signal can be made with creating the speed section&lt;/li>
&lt;/ul>
&lt;p>Downside:&lt;/p>
&lt;ul>
&lt;li>Creates a dependency loop between speed limits and signaling. Part of the parsing of speed limit has to be deferred.&lt;/li>
&lt;li>Signals parameters also have to be set per route, which is done in the signal. Having per-route options on both sides doubles the work.&lt;/li>
&lt;/ul>
&lt;h4 id="hahahugoshortcode157s6hbhb-inlining-speed-limit-definitions-into-signals">❌
Inlining speed limit definitions into signals&lt;/h4>
&lt;p>Introduces a new type of speed limit, which are announced by signals.
These speed limits are directly defined within signal definitions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;conditional_parameters&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;on_route&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${ROUTE_ID}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;speed_section&amp;#34;: &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;speed_limit&amp;#34;: &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;begin&amp;#34;: {&amp;#34;track&amp;#34;: &amp;#34;a&amp;#34;, &amp;#34;offset&amp;#34;: &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;end&amp;#34;: {&amp;#34;track&amp;#34;: &amp;#34;b&amp;#34;, &amp;#34;offset&amp;#34;: &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;parameters&amp;#34;: {&amp;#34;rappel30&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;short_block&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upsides:&lt;/p>
&lt;ul>
&lt;li>straightforward infrastructure edition experience for speed sections announced by a single signal&lt;/li>
&lt;/ul>
&lt;p>Downsides:&lt;/p>
&lt;ul>
&lt;li>creates two separate kinds of speed limits:
&lt;ul>
&lt;li>can cause code duplication&lt;/li>
&lt;li>could make later changes of the data model trickier&lt;/li>
&lt;li>it&amp;rsquo;s unclear whether the criterion used to make this partition is appropriate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>speed sections created directly inside signals can only be announced by a single signal, which could be an issue for speed sections which apply to very large areas, and are announced by multiple signals (such as one for each direction)&lt;/li>
&lt;li>the cost of reversing this decision could be fairly high&lt;/li>
&lt;/ul>
&lt;h4 id="hahahugoshortcode157s7hbhb-explicit-link-from-signal-to-speed-section">✅
Explicit link from signal to speed section&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;conditional_parameters&amp;#34;: &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;on_route&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${ROUTE_ID}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;announced_speed_section&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;${SPEED_SECTION_ID}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#34;parameters&amp;#34;: {&amp;#34;rappel30&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;short_block&amp;#34;: &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upsides:&lt;/p>
&lt;ul>
&lt;li>single unified way of declaring speed limits&lt;/li>
&lt;li>very close to the current implementation&lt;/li>
&lt;/ul>
&lt;p>Downsides:&lt;/p>
&lt;ul>
&lt;li>adds a level of indirection between the signal and the speed section&lt;/li>
&lt;li>the edition front-end has to be smart enough to create / search speed sections from the signal edition menu&lt;/li>
&lt;/ul>
&lt;h3 id="speed-limits-by-route">Speed limits by route&lt;/h3>
&lt;p>Some speed limits only apply so some routes. This relationship needs to be modeled:&lt;/p>
&lt;ol>
&lt;li>speed limits could have a list of routes they apply on&lt;/li>
&lt;li>routes could have a list of speed limits they enforce&lt;/li>
&lt;li>the routes a speed limit apply on could be deduced from its announce signals, plus an explicit list of routes per speed section&lt;/li>
&lt;/ol>
&lt;p>We took option 3.&lt;/p></description></item><item><title>Docs: Conflict avoidance</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/conflict_avoidance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/conflict_avoidance/</guid><description>
&lt;p>While exploring the graph, it is possible to end up in locations that would
generate conflicts. They can be avoided by adding delay.&lt;/p>
&lt;h4 id="shifting-the-departure-time">Shifting the departure time&lt;/h4>
&lt;p>The departure time is defined as an interval in the module parameters:
the train can leave at a given time, or up to &lt;code>x&lt;/code> seconds later.
Whenever possible, delay should be added by shifting the departure time.&lt;/p>
&lt;blockquote>
&lt;p>for example : a train can leave between 10:00 et 11:00. Leaving
at 10:00 would cause a conflict, the train actually needs to enter the
destination station 15 minutes later. Making the train leave at
10:15 solves the problem.&lt;/p>
&lt;/blockquote>
&lt;p>In OSRD, this feature is handled by keeping track, for every edge,
of the maximum duration by which we can delay the departure time.
As long as this value is enough, conflicts are avoided this way.&lt;/p>
&lt;p>This time shift is a value stored in every edge of the path.
Once a path is found, the value is summed over the whole path.
This is added to the departure time.&lt;/p>
&lt;blockquote>
&lt;p>For example :&lt;/p>
&lt;ul>
&lt;li>a train leaves between 10:00 and 11:00. The initial maximum
time shift is 1:00.&lt;/li>
&lt;li>At some point, an edge becomes unavailable 20 minutes after the
train passage. The value is now at 20 for any edge accessed from here.&lt;/li>
&lt;li>The departure time is then delayed by 5 minutes to avoid a conflict.
The maximum time shift value is now at 15 minutes.&lt;/li>
&lt;li>This process is applied until the destination is found,
or until no more delay can be added this way.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4 id="engineering-allowances">Engineering allowances&lt;/h4>
&lt;p>Once the maximum delay is at 0, the delay needs to be added
between two points of the path.&lt;/p>
&lt;p>&lt;img src="engineering_allowance.png" alt="Engineering allowances (1/2)">&lt;/p>
&lt;p>The idea is the same as the one used to fix speed discontinuities:
new edges are created, replacing the previous ones.
The new edges have an engineering allowance, to add the delay where
it is possible.&lt;/p>
&lt;p>&lt;img src="engineering_allowance_edges.png" alt="Engineering allowances (2/2)">&lt;/p>
&lt;p>computing an
&lt;a href="https://osrd.fr/en/docs/explanation/running_time_calculation/allowances/" title="allowances">engineering allowance&lt;/a>
is a feature of the running-time
calculation module. It adds a given delay between two points of
a path, without affecting the speeds on the rest of the path.&lt;/p>
&lt;h2 id="post-processing">Post-processing&lt;/h2>
&lt;p>We &lt;strong>used to&lt;/strong> compute the engineering allowances during the graph
exploration, but that process was far too expensive. We used to
run binary searches on full simulations, which would sometimes
go back for a long distance in the path.&lt;/p>
&lt;p>What we &lt;em>actually need&lt;/em> is to know whether an engineering allowance
is &lt;em>possible&lt;/em> without causing any conflict. We can use heuristics
here, as long as we&amp;rsquo;re on the conservative side: we can&amp;rsquo;t
say that it&amp;rsquo;s possible if it isn&amp;rsquo;t, but missing solutions with
extremely tight allowances isn&amp;rsquo;t a bad thing in our use cases.&lt;/p>
&lt;p>But this change means that, once the solution is found, we can&amp;rsquo;t
simply concatenate the simulation results. We need to run
a full simulation, with actual engineering allowances,
that avoid any conflict. This step has been merged
with the one described on the
&lt;a href="https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/standard_allowance/" title="standard allowance">standard allowance&lt;/a>
page, which is now run even when no standard allowance
have been set.&lt;/p></description></item><item><title>Docs: Pipeline</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/pipeline/</guid><description>
&lt;p>The walk calculation in OSRD is a 4-step process, each using &lt;a href="../envelopes_system">the envelopes system&lt;/a>:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#calculation-of-the-most-restricted-speed-profile-mrsp">Construction of the most restrictive speed profile&lt;/a>&lt;/li>
&lt;li>&lt;a href="#calculation-of-the-max-speed-profile">Addition of the different braking curves&lt;/a>&lt;/li>
&lt;li>&lt;a href="#calculation-of-the-max-effort-profile">Adding the different acceleration curves and checking the constant speed curves&lt;/a>&lt;/li>
&lt;li>&lt;a href="#application-of-allowances">Application of allowance(s)&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&amp;nbsp;&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="calculation-of-the-most-restricted-speed-profile-mrsp">Calculation of the Most Restricted Speed Profile (MRSP)&lt;/h3>
&lt;/font>
&lt;p>A first envelope is calculated at the beginning of the simulation by grouping all static velocity limits:&lt;/p>
&lt;ul>
&lt;li>maximum line speed&lt;/li>
&lt;li>maximum speed of rolling stock&lt;/li>
&lt;li>temporary speed limits (e.g. in case of works on a line)&lt;/li>
&lt;li>speed limits by train category&lt;/li>
&lt;li>speed limits according to train load&lt;/li>
&lt;li>speed limits corresponding to signposts&lt;/li>
&lt;/ul>
&lt;p>The length of the train is also taken into account to ensure that the train does not accelerate until its tail leaves the slowest speed zone. An offset is then applied to the red dashed curve. The resulting envelope (black curve) is called the &lt;strong>Most Restricted Speed Profile (MRSP)&lt;/strong>. It is on this envelope that the following steps will be calculated.&lt;/p>
&lt;p>&lt;img src="../mrsp.png" alt="Most Restricted Speed Profile">&lt;/p>
&lt;blockquote>
&lt;p>The red dotted line represents the maximum permitted speed depending on the position.
The black line represents the MRSP where the train length has been taken into account.&lt;/p>
&lt;/blockquote>
&lt;p>It should be noted that the different envelopeParts composing the MRSP are input data, so they do not correspond to curves with a physical reality.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="calculation-of-the-max-speed-profile">Calculation of the Max Speed Profile&lt;/h3>
&lt;/font>
&lt;p>Starting from the MRSP, all braking curves are calculated using the overlay system (see &lt;a href="../envelopes_system/#a-specific-interface-in-the-osrd-core-service">here&lt;/a> for more details on overlays), i.e. by creating envelopeParts which will be more restrictive than the MRSP. The resulting curve is called &lt;strong>Max Speed Profile&lt;/strong>. This is the maximum speed envelope of the train, taking into account its braking capabilities.&lt;/p>
&lt;p>Since braking curves have an imposed end point and the braking equation has no analytical solution, it is impossible to predict their starting point. The braking curves are therefore calculated backwards from their target point, i.e. the point in space where a certain speed limit is imposed (finite target speed) or the stopping point (zero target speed).&lt;/p>
&lt;p>&lt;img src="../msp.png" alt="Max Speed Profile">&lt;/p>
&lt;p>For historical reasons in hourly production, braking curves are calculated at SNCF with a fixed deceleration, the so-called hourly deceleration (typically ~0.5m/s²) without taking into account the other forces. This method has therefore also been implemented in OSRD, allowing the calculation of braking in two different ways: with this hourly rate or with a braking force that is simply added to the other forces.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="calculation-of-the-max-effort-profile">Calculation of the Max Effort Profile&lt;/h3>
&lt;/font>
&lt;p>For each point corresponding to an increase in speed in the MRSP or at the end of a stop braking curve, an acceleration curve is calculated. The acceleration curves are calculated taking into account all active forces (traction force, driving resistance, weight) and therefore have a physical meaning.&lt;/p>
&lt;p>For envelopeParts whose physical meaning has not yet been verified (which at this stage are the constant speed running phases, always coming from the MRSP), a new integration of the equations of motion is performed. This last calculation is necessary to take into account possible speed stalls in case the train is physically unable to hold its speed, typically in the presence of steep ramps (see &lt;a href="../envelopes_system/#given-envelopes-vs.-calculated-envelopes">this example&lt;/a>).&lt;/p>
&lt;p>The envelope that results from the addition of the acceleration curves and the verification of the speed plates is called the &lt;strong>Max Effort Profile&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="../mep.png" alt="Max Effort Profile">&lt;/p>
&lt;p>At this stage, the resulting envelope is continuous and has a physical meaning from start to finish. The train accelerates to the maximum, runs as fast as possible according to the different speed limits and driving capabilities, and brakes to the maximum. The resulting travel calculation is called the &lt;strong>basic running time&lt;/strong>. It corresponds to the fastest possible route for the given rolling stock on the given route.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="application-of-allowances">Application of allowance(s)&lt;/h3>
&lt;/font>
&lt;p>After the calculation of the basic run (corresponding to the Max Effort Profile in OSRD), it is possible to apply allowances. Allowances are additions of extra time to the train&amp;rsquo;s journey. They are used to allow the train to catch up if necessary or for other operational purposes (more details on allowances &lt;a href="../allowances">here&lt;/a>).&lt;/p>
&lt;p>A new &lt;strong>Allowances&lt;/strong> envelope is therefore calculated using overlays to distribute the allowance requested by the user over the maximum effort envelope calculated previously.&lt;/p>
&lt;p>&lt;img src="../allowances.png" alt="Allowances">&lt;/p>
&lt;p>In the OSRD running calculation it is possible to distribute the allowances in a linear way, by lowering all speeds by a certain factor, or in an economic way, i.e. by minimising the energy consumption during the train run.&lt;/p></description></item><item><title>Docs: Driver behavior modules</title><link>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driver-behavior-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/train-sim-v3/driver-behavior-modules/</guid><description>
&lt;h2 id="design-specs">Design specs&lt;/h2>
&lt;h3 id="general-pitch">General pitch&lt;/h3>
&lt;p>Driver behavior modules are responsible for making driving decisions.
Its main responsibility, given the state of the train and an instruction, is to react to the instruction.
This reaction is expressed as a new train state.&lt;/p>
&lt;p>To perform this critical task, it needs access to additional context:&lt;/p>
&lt;ul>
&lt;li>the physical properties of the path, which are used to make coasting decisions, and to model natural forces.&lt;/li>
&lt;li>a slowdown coefficient, which is used to adjust how much the train is slowed down compared to a
full power simulation.&lt;/li>
&lt;/ul>
&lt;p>The driver behavior modules are supposed to have different implementations, which would interpret the slow down coefficient differently.&lt;/p>
&lt;h3 id="api">API&lt;/h3>
&lt;p>One driver behavior module is instantiated per driving instruction.
It takes at initialization:&lt;/p>
&lt;ul>
&lt;li>a slowdown coefficient&lt;/li>
&lt;li>the driving instruction&lt;/li>
&lt;li>the path properties&lt;/li>
&lt;/ul>
&lt;p>It has two public methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>enact_decision(current_state: TrainState, t: float) -&amp;gt; (TrainState, float)&lt;/code>&lt;/p>
&lt;p>Which returns what the next train state would be if there was only this one instruction to follow, and the time delta
to reach this state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>truncate_integration_step(current_state: TrainState, potential_state: TrainState, t: float, dt: float) -&amp;gt; (TrainState, float)&lt;/code>&lt;/p>
&lt;p>Which returns a state and time delta which respects the instruction, and is as close as possible to the potential state.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="loop">Loop&lt;/h3>
&lt;p>At a given train state, we know which driving instructions are enforced.&lt;/p>
&lt;p>For each enforced driving instruction, we query the corresponding driver behavior module.&lt;/p>
&lt;p>This gives a set of different train states. From this, we coalesce a single train state which respects all instructions.&lt;/p>
&lt;p>To do so, we:&lt;/p>
&lt;ol>
&lt;li>Find the states which are most constraining for &amp;ldquo;constraining properties&amp;rdquo; (speed and pantograph state).&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Most constraining state regarding speed is the one with the lowest acceleration (taking sign into account).&lt;/li>
&lt;li>Most constraining state regarding pantograph state is the one which sets the pantograph down the earliest.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Interpolate the &lt;strong>constraining&lt;/strong> states to the smallest &lt;code>dt&lt;/code> they are associated with.&lt;/li>
&lt;li>Merge the &lt;strong>constraining&lt;/strong> states into a single &lt;strong>potential state&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>for speed, we take the lowest acceleration&lt;/li>
&lt;li>for pantograph state, we take the earliest pantograph state&lt;/li>
&lt;li>other properties should be identical&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>Submit the &lt;strong>potential state&lt;/strong> for truncation to all driver behavior modules, chaining the outputs of &lt;code>truncate_integration_step&lt;/code>.&lt;/li>
&lt;/ol>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>There is a heavy underlying assumption that &amp;ldquo;constraining properties&amp;rdquo; can be combined in a new state which
is valid.
This underlies the step 3. It is not yet clear if this assumption will always be valid in the future.&lt;/p>
&lt;p>Also: what component should be in charge of instantiating all the driver behavior modules with the right implementation ?&lt;/p>
&lt;/div>
&lt;p>Here is a schema summarizing the process:&lt;/p>
&lt;p>&lt;img src="../reconciliation.svg" alt="Driver behavior modules">&lt;/p>
&lt;h3 id="a-short-case-for-why-step-4-is-needed">A short case for why step 4 is needed.&lt;/h3>
&lt;p>&lt;img src="../overshoot.svg" alt="most constraining state overshoots">&lt;/p>
&lt;p>Here the constraints are in red, and the next state chosen by the driver behavior modules are in black.&lt;/p>
&lt;p>In this example, the most constraining state is A, since it&amp;rsquo;s the one which accelerates the least.
However, it overshoots constraint B, thus we need to select the state which respects both constraints.&lt;/p>
&lt;h2 id="decision-process">Decision process&lt;/h2>
&lt;h3 id="unifying-driver-behavior-and-margin-distribution-algorithms">Unifying driver behavior and margin distribution algorithms&lt;/h3>
&lt;p>When this design project started, driver behavior was left completely undefined.
We assumed that a set of driving instructions can be unambiguously interpreted given a starting point.
This assumption was then decided to be relied on to search which margin speed ceiling yields expected
arrival times.&lt;/p>
&lt;p>We also knew this assumption to be false: there are many ways instructions can be interpreted.
Worse yet, different use cases for OSRD have different needs:&lt;/p>
&lt;ul>
&lt;li>some users might want to reproduce existing timetables, which exhibit naive driver behavior:
aggressive accelerations, aggressive breaking behavior.&lt;/li>
&lt;li>some users want to evaluate the feasibility of timetables, and thus want somewhat realistic driver
behavior, with less aggressive acceleration and cautious breaking behavior.&lt;/li>
&lt;/ul>
&lt;p>To resolve this tension, we thought of adding support for pluggable driver behavior.
Doing so, however, would create two ways a timetable can be loosened (loose time):&lt;/p>
&lt;ul>
&lt;li>lowering the margin speed ceiling&lt;/li>
&lt;li>making driver behavior less aggressive&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s say we want to loosen the timetable by 1 minute on a given section. It could be achieved by:&lt;/p>
&lt;ul>
&lt;li>lowering the speed ceiling using margins while keeping aggressive driver behavior&lt;/li>
&lt;li>making driving behavior very conservative, but using no margins at all&lt;/li>
&lt;li>lowering the speed ceiling a little, and making driving behavior a little more conservative&lt;/li>
&lt;li>any other combination of the two factors&lt;/li>
&lt;/ul>
&lt;p>This is an issue, as it might make simulation results unstable: because there possibly are many ways
to achieve the requested schedule, it would be very challenging to reliably choose a solution which
matches expectations.&lt;/p>
&lt;ul>
&lt;li>❌
We considered ignoring the issue, as driver behavior was initially out of the scope
of this design project. We decided not to, as we expected the cost of making later changes to integrate
driver behavior to be significant.&lt;/li>
&lt;li>✅
We decided to avoid this shortcoming by making margin distribution part of driver behavior.
Driver behavior modules are controlled by a slowdown coefficient between 0 (loose as much time as shall
be achieved) and 1 (loose no time).&lt;/li>
&lt;/ul>
&lt;h3 id="interfacing-driver-behavior-driving-instructions-and-numerical-integration">Interfacing driver behavior, driving instructions, and numerical integration&lt;/h3>
&lt;p>Driver behavior can be formally modeled as a local decision function &lt;code>f&lt;/code>, which takes the state of the
train as an input, including position and speed, and returns an acceleration.&lt;/p>
&lt;p>To best integrate this acceleration over the given time step, it is best not to use only the acceleration at (t).
Since it may vary a lot along [t, t+dt]. To approximate the acceleration within this interval,
we would need a better estimator, using a numerical method such as
&lt;a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">RK4&lt;/a>. Such estimator then needs to call &lt;code>f&lt;/code> multiple times.&lt;/p>
&lt;p>A number of questions came up:&lt;/p>
&lt;ul>
&lt;li>should numerical integration within the driver behavior module, or outside&lt;/li>
&lt;li>are driver behavior modules queried about their reaction to a specific instruction, or in general&lt;/li>
&lt;li>does the driver behavior module return decisions, or parameters used to make decisions (such as curves)&lt;/li>
&lt;li>if decisions are returned, is it a force, an acceleration, or a new state&lt;/li>
&lt;li>if a new state is returned, how to deal with heterogenous time steps&lt;/li>
&lt;li>do we check decisions for correctness? that is, if a decision causes the train to overshoot a limit curve,
do we do anything?&lt;/li>
&lt;/ul>
&lt;h4 id="do-we-have-a-single-dbm-for-all-driving-instructions-or-one-per-driving-instruction">Do we have a single DBM for all driving instructions, or one per driving instruction?&lt;/h4>
&lt;p>We identified that this API choice shouldn&amp;rsquo;t constrain the implementation.
We decided to go the conservative route and have &lt;em>one DBM per driving instructions&lt;/em> as it reduces the API surface
and relieves DBM from the responsibility of finding the most restrictive instruction.&lt;/p>
&lt;h4 id="how-do-we-prevent-overshooting">How do we prevent overshooting?&lt;/h4>
&lt;p>We identified that DBMs need the ability to follow internal target curves (distinct from limit curves).&lt;/p>
&lt;p>To do so we could either:&lt;/p>
&lt;ol>
&lt;li>Have a way to short-circuit our integration scheme, to snap to target curves without overshooting.&lt;/li>
&lt;li>Accept oscillations around target curves (and thus overshooting).&lt;/li>
&lt;li>Setup a feedback loop mechanism to avoid overshooting.&lt;/li>
&lt;/ol>
&lt;p>We decided that only the first option was desirable.&lt;/p>
&lt;p>The design choices then are:&lt;/p>
&lt;h5 id="hahahugoshortcode181s3hbhb-make-the-dbm-as-close-as-possible-to-a-decision-function">❌
Make the DBM as close as possible to a decision function&lt;/h5>
&lt;p>Then the DBM would not be aware of the time step it is called with, and would return an acceleration. Then the module should expose two methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>One for taking decisions, akin to &lt;code>f&lt;/code>.&lt;br>
Called several times depending on the integration method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>One for correcting an integration step (i.e. a time step and a new state), if it happened to overshoot its internal goal curves
(for example MARECO which sets it&amp;rsquo;s own speed limits).&lt;br>
Called on the integration step results from this DBM, and the other DBMs integration step results.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="hahahugoshortcode181s4hbhb-the-dbm-returns-a-new-state">✅
The DBM returns a new state&lt;/h5>
&lt;p>The module would then expose two methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>One for taking decisions, which, given a train state and a desired/maximum time step, returns a new state (which does not overshoot) and a new current time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>One for correcting an integration step (i.e. a time step and a new state), if it happened to overshoot its internal goal curves
(for example MARECO which sets it&amp;rsquo;s own speed limits).&lt;br>
Called only on other DBMs integration step results.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="how-do-we-combine-the-decisions-from-all-dbms">How do we combine the decisions from all DBMs?&lt;/h4>
&lt;ol>
&lt;li>For each state property, find the most constraining value and &lt;code>dt&lt;/code>.&lt;/li>
&lt;li>Find the smallest &lt;code>dt&lt;/code> amongst constraining properties. Interpolate remaining properties to this &lt;code>dt&lt;/code>, to build a provisional state.&lt;/li>
&lt;li>Submit this provisional state for truncation to all DBMs and take the truncation with the smallest &lt;code>dt&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>To understand how this algorithm is designed, we need to consider two example cases:&lt;/p>
&lt;ul>
&lt;li>For steps 1 and 2: if a neutral zone and a breaking instruction overlap, both are most constraining to different state properties:
the neutral zone affects pantograph state, and the breaking instruction affects speed. The final state has to be a combination of both.&lt;/li>
&lt;li>For step 3: We need to truncate integration steps to avoid overshoots, and thus avoid the need for feedback loops.
Ideally, we want to truncate to the exact overshoot location. This overshoot location is not the same as the initial &lt;code>dt&lt;/code> for the overshot constraint.&lt;/li>
&lt;/ul>
&lt;h3 id="should-truncate_integration_step-depend-on-the-driver-behavior-module">Should &lt;code>truncate_integration_step&lt;/code> depend on the driver behavior module?&lt;/h3>
&lt;p>Yes: DBMs may use internal representations that the new state should not overshoot.
For instance, when passed a driving instruction with a speed limit of 60km/h,
a DBM wishing to lose time may reduce the speed to 50 km/h.&lt;/p></description></item><item><title>About: Governance</title><link>https://osrd.fr/en/about/governance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/governance/</guid><description>
&lt;p>One of the ambitions of OSRD is to help with &lt;strong>timetabling on a European scale&lt;/strong>.&lt;/p>
&lt;p>To reach this goal, OSRD has to take local features into account by consulting and collaborating with railway companies and infrastructure operators.&lt;/p>
&lt;p>And by contributing to OSRD, these companies:&lt;/p>
&lt;ul>
&lt;li>Profit from all the common development efforts&lt;/li>
&lt;li>Can freely build on the common effort to achieve their own goals&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Participate in the roadmap and technical direction of the project to the extent of their contribution&lt;/li>
&lt;/ul>
&lt;p>OSRD is currently developed by:&lt;/p>
&lt;ul>
&lt;li>A &lt;a href="../../join-us">team of full-time developers at SNCF Réseau&lt;/a>, financed by SNCF Réseau, the French state and the European Union&lt;/li>
&lt;li>Individual contributors&lt;/li>
&lt;/ul>
&lt;h2 id="the-openrail-association">The OpenRail association&lt;/h2>
&lt;p>The &lt;a href="https://openrailassociation.org/">OpenRail association&lt;/a> is an upcoming non-profit committed to organizing cooperative work around railway software tools.&lt;/p>
&lt;p>&lt;a href="https://openrailassociation.org/">&lt;img class="marginauto" src="logo-openrail-association.png" alt="OpenRail association">&lt;/a>&lt;/p>
&lt;style>
.marginauto {
margin: 10px auto 20px;
display: block;
width:220px;
height:200px;
}
.marginauto:hover {
filter: brightness(80%);
transition: all 0.5s;
}
&lt;/style>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>As long as they don&amp;rsquo;t modify the common tools without sharing their improvements. See the details of the &lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html">LGPLv3&lt;/a> license.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Docs: Data-flow</title><link>https://osrd.fr/en/docs/reference/architecture/data_flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/architecture/data_flow/</guid><description>
&lt;p>&lt;img src="data_flow.svg" alt="Data-flow diagram">&lt;/p></description></item><item><title>Docs: Services</title><link>https://osrd.fr/en/docs/reference/architecture/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/architecture/services/</guid><description>
&lt;p>It is a multi-service architecture where several software components interact with each other. This choice was made to ensure the modularity of the code and to guarantee the exploitability of certain OSRD services by external applications.&lt;/p>
&lt;ul>
&lt;li>Valkey is configured as &lt;code>maxmemory-policy=allkeys-lru&lt;/code> (&lt;a href="https://valkey.io/topics/lru-cache/">documentation&lt;/a>)&lt;/li>
&lt;li>Osrdyne has multiple drivers to support:
&lt;ul>
&lt;li>k8s&lt;/li>
&lt;li>docker&lt;/li>
&lt;li>process compose&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The gateway supports multiple authentication providers:
&lt;ul>
&lt;li>OpenID Connect (OIDC)&lt;/li>
&lt;li>Bearer token&lt;/li>
&lt;li>Mock (for development purpose)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Some &lt;code>editoast&lt;/code> endpoints requires an &lt;code>InfraCache&lt;/code> object which make them stateful. These endpoints are only used in the &lt;code>editoast-stateful&lt;/code> service. Doing so most endpoints are run by a scalable service.&lt;/li>
&lt;/ul>
&lt;p>Coming soon:&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Adapt &lt;code>editoast-stateful&lt;/code> so editoast is fully scalable.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="services.en.svg" alt="Services architecture">&lt;/p></description></item><item><title>Docs: Conflict detection</title><link>https://osrd.fr/en/docs/reference/design-docs/conflict-detection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/conflict-detection/</guid><description>
&lt;div class="pageinfo pageinfo-warning">
&lt;p>This document is a work in progress&lt;/p>
&lt;/div>
&lt;p>Conflict detection is the process of looking for timetable conflicts.
A timetable conflict is any predictable condition which disrupts planned operations.
Planned operations can be disrupted if a train is slowed down, prevented from proceeding, or delayed.&lt;/p>
&lt;p>One of the core features of OSRD is the ability to automatically detect some conflicts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spacing conflicts&lt;/strong>: insufficient spacing between trains sharing the same path&lt;/li>
&lt;li>&lt;strong>routing conflicts&lt;/strong>: insufficient spacing between trains with intersecting paths&lt;/li>
&lt;/ul>
&lt;p>Some other kinds of conflicts may be detected &lt;em>later on&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>maintenance conflicts&lt;/strong>: planned maintenance disrupts the path of a train&lt;/li>
&lt;li>&lt;strong>power delivery conflicts&lt;/strong>: combined power delivery requirements exceeds capacity&lt;/li>
&lt;/ul>
&lt;p>Conflict detection relies on interlocking and signaling modeling and simulation to:&lt;/p>
&lt;ol>
&lt;li>figure out what each actor requires to perform its duty undisturbed&lt;/li>
&lt;li>detect conflicting requirements&lt;/li>
&lt;/ol>
&lt;h2 id="design-constraints">Design constraints&lt;/h2>
&lt;p>The primary design goals are as follows:&lt;/p>
&lt;ul>
&lt;li>enable threading new train paths into an existing timetable (see STDCM)&lt;/li>
&lt;li>produce conflicts which can be linked back to a root cause&lt;/li>
&lt;li>operate in way that can be visualized and interpreted&lt;/li>
&lt;li>scale to real world timetables: millions of yearly trains, tens of thousands of daily trains&lt;/li>
&lt;/ul>
&lt;p>In addition to these goals, the following constraints apply:&lt;/p>
&lt;ul>
&lt;li>it must be possible to thread new train paths into timetables with existing conflicts&lt;/li>
&lt;li>it must not cause false-negatives: if no conflicts are detected, a multi-train simulation of the same timetable must not yield any slowdowns&lt;/li>
&lt;li>it cannot rely on data we do not have&lt;/li>
&lt;li>it has to enable later support of mobile block systems&lt;/li>
&lt;li>it has to rely on existing signaling and interlocking simulation&lt;/li>
&lt;li>it has to enable detecting conflicts regardless of the signaling system in use&lt;/li>
&lt;li>it has to support transitions between signaling systems&lt;/li>
&lt;li>it has to support conflicts between different signaling systems&lt;/li>
&lt;/ul>
&lt;h2 id="conflict-modeling">Conflict modeling&lt;/h2>
&lt;p>&lt;strong>Actors&lt;/strong> are objects which cause resources to be used:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>train paths&lt;/strong> (or someone / something on the behalf of the train)&lt;/li>
&lt;li>&lt;strong>maintenance work&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Actors need &lt;strong>resources&lt;/strong> to be available to proceed, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>zones&lt;/strong>, which have one state per way to traverse it&lt;/li>
&lt;li>&lt;strong>switches&lt;/strong>, which have one state per position&lt;/li>
&lt;li>&lt;strong>station platforms&lt;/strong>, which could be used to prevent two large trains from occupying both sides of a tiny platform&lt;/li>
&lt;/ul>
&lt;p>Actor emit &lt;strong>resource requirements&lt;/strong>, which:&lt;/p>
&lt;ul>
&lt;li>describe the need of an actor for a resource, for a given time span&lt;/li>
&lt;li>describe what the resource is needed for&lt;/li>
&lt;li>detail how the resource is used, such as switch position, zone entry and exit&lt;/li>
&lt;/ul>
&lt;p>Resource requirements can turn out to be either &lt;strong>satisfied&lt;/strong>
or &lt;strong>conflicting&lt;/strong> with other requirements, depending on compatibility rules.&lt;/p>
&lt;p>&lt;strong>Compatibility rules differ by requirement purpose and resource type&lt;/strong>. For example:&lt;/p>
&lt;ul>
&lt;li>spacing requirements are exclusive: simultaneous requirements for the same resource are conflicting&lt;/li>
&lt;li>zone and switch requirements are shareable: simultaneous requirements are satisfied if the resource configuration is identical&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>For conflict detection to work, resource requirements have to be at least as extensive as what&amp;rsquo;s required to guarantee that a train path will not be disturbed.&lt;/strong>&lt;/p>
&lt;h2 id="routing-conflicts">Routing conflicts&lt;/h2>
&lt;h3 id="context">Context&lt;/h3>
&lt;p>For trains to proceed safely along their planned path:&lt;/p>
&lt;ul>
&lt;li>switches have to be moved in the appropriate position&lt;/li>
&lt;li>level crossings have to activate&lt;/li>
&lt;li>risks of collision with other trains have to be mitigated&lt;/li>
&lt;/ul>
&lt;p>In practice, the path of trains is partitioned into routes, which when set, ensure a train can safely follow the route.&lt;/p>
&lt;p>Routes have the following lifestyle:&lt;/p>
&lt;ul>
&lt;li>As a train approaches the start of one of its routes, it is &lt;strong>called&lt;/strong> by an operator. If all resources required to safely use the route are available, switches and level crossings start to move. If a resources is not available, e.g. because another train has reserved a section of track, this process is delayed until all conditions are met.&lt;/li>
&lt;li>Once all resources are configured and reserved, the route is &lt;strong>set&lt;/strong> and ready to be followed. Before that point, the entry of the route was protected by signaling, which prevented the train from moving past the entry point.&lt;/li>
&lt;li>As the train moves along the route, it is &lt;strong>destroyed&lt;/strong>. When the tail of the trail releases key detectors along the route, resources before this detector are released, and can this be reserved by other routes.&lt;/li>
&lt;/ul>
&lt;p>For a train to proceed through a route unimpeded, the following things have to happen:&lt;/p>
&lt;ul>
&lt;li>The route has to be set before the train arrives, and before it is slowed down by signaling.&lt;/li>
&lt;li>The route has to be called, so that is it set in time.&lt;/li>
&lt;li>All resources required for the route to start setting at call time have to be available.&lt;/li>
&lt;/ul>
&lt;h3 id="generating-requirements">Generating requirements&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">RouteRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">route&lt;/span>: &lt;span style="color:#000">RouteId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">set_deadline&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone_requirements&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">RouteZoneRequirement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">RouteZoneRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone&lt;/span>: &lt;span style="color:#000">ZoneId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">entry_det&lt;/span>: &lt;span style="color:#000">DirDetectorId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">exit_det&lt;/span>: &lt;span style="color:#000">DirDetectorId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">release_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">switches&lt;/span>: &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SwitchId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SwitchConfigId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Routing requirements are generated by the following algorithm:&lt;/p>
&lt;ul>
&lt;li>Compute the set deadline using signaling simulation. The set deadline is the point in time at which the train would be slowed down if the route were not set.&lt;/li>
&lt;li>For each zone in each route, simulate when it would be released, and thus not required anymore.&lt;/li>
&lt;/ul>
&lt;div class="pageinfo pageinfo-info">
&lt;p>Route overlaps are not yet supported.&lt;/p>
&lt;/div>
&lt;h3 id="requirement-compatibility-rules">Requirement compatibility rules&lt;/h3>
&lt;p>Requirement compatibility is evaluated for all &lt;code>RouteZoneRequirement&lt;/code>s, grouped by zone. Requirements A and B, ordered such that &lt;code>A.set_deadline &amp;lt;= B.set_deadline&lt;/code>, are compatible if and only if either:&lt;/p>
&lt;ul>
&lt;li>their active time span does not overlap, such that &lt;code>A.release_time &amp;lt;= (B.set_deadline - activation_time)&lt;/code>, where the activation time is the delay required to reconfigure from &lt;code>A.switches&lt;/code> to &lt;code>B.switches&lt;/code>.&lt;/li>
&lt;li>&lt;code>(A.entry_det, A.exit_det, A.switches) == (B.entry_det, B.exit_det, B.switches)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="spacing-conflicts">Spacing conflicts&lt;/h2>
&lt;h3 id="context-1">Context&lt;/h3>
&lt;p>Even if interlocking mitigates some of the risks associated with operating trains, a major one is left out: head to tail collisions, caused by insufficient spacing.&lt;/p>
&lt;p>This responsibility is handled by signaling, which conveys both interlocking and spacing constraints.&lt;/p>
&lt;p>Signaling helps trains slow down until the end of their movement authority, which is either:&lt;/p>
&lt;ul>
&lt;li>behind the tail of the next train&lt;/li>
&lt;li>at the end of the last route set for this train&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Spacing requirements are emitted for zones which if occupied, would cause a slowdown, and zones occupied by the train&lt;/strong>&lt;/p>
&lt;h3 id="generating-requirements-1">Generating requirements&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">SpacingRequirement&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">zone&lt;/span>: &lt;span style="color:#000">ZoneId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">begin_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">end_time&lt;/span>: &lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every time the driver sees a signal, generate updated spacing requirements by calculating which zones, if occupied, would trigger a slowdown:&lt;/p>
&lt;ul>
&lt;li>start by assuming the zone just after the head of the train is occupied&lt;/li>
&lt;li>until the train is not slowed down, move the occupied section one zone further away from the train&lt;/li>
&lt;/ul>
&lt;h3 id="requirement-compatibility-rules-1">Requirement compatibility rules&lt;/h3>
&lt;p>Requirement compatibility is evaluated for all &lt;code>SpacingRequirement&lt;/code>s, grouped by zone.&lt;/p>
&lt;p>Requirements A and B are compatible if and only if their &lt;code>[begin_time, end_time]&lt;/code> ranges do not overlap.&lt;/p>
&lt;h2 id="incremental-requirement-generation">Incremental requirement generation&lt;/h2>
&lt;h3 id="routing-requirements">Routing requirements&lt;/h3>
&lt;pre class="mermaid">sequenceDiagram
participant client as Client
participant gen as Routing resource generator
client -&amp;gt;&amp;gt; gen: initial path &amp;#43; train movement
loop
gen -&amp;gt;&amp;gt; client: prefix path extension needed
client -&amp;gt;&amp;gt; gen: extra prefix path &amp;#43; train movement
end
gen -&amp;gt;&amp;gt; client: resource requirements&lt;/pre>
&lt;p>After an initial path is given, the requirement generator can ask for more &lt;strong>prefix&lt;/strong> path (before the start of the route). The client responds with:&lt;/p>
&lt;ul>
&lt;li>the extra prefix path&lt;/li>
&lt;li>the movement of the train over time on the given prefix path&lt;/li>
&lt;/ul>
&lt;p>If the initial path has multiple routes, the last route is the one resource requirements are emitted for.&lt;/p>
&lt;h3 id="spacing-requirements">Spacing requirements&lt;/h3>
&lt;pre class="mermaid">sequenceDiagram
participant client as Client
participant gen as Spacing resource generator
client -&amp;gt;&amp;gt; gen: initial path &amp;#43; train movement
loop
gen -&amp;gt;&amp;gt; client: postfix path extension needed
client -&amp;gt;&amp;gt; gen: extra postfix path
end
gen -&amp;gt;&amp;gt; client: resource requirements&lt;/pre>
&lt;p>After an initial path is given, the requirement generator can ask for more &lt;strong>postfix&lt;/strong> path (before the start of the route).&lt;/p>
&lt;h2 id="visualizing-requirements">Visualizing requirements&lt;/h2>
&lt;script type="application/javascript" src="mkt.js">&lt;/script>
&lt;p>&lt;object style="width: 100%" onload="mkt_hydrate(this.contentDocument.rootElement)" type="image/svg+xml" data="requirements-diagram.svg">&lt;/object>&lt;/p>
&lt;p>&lt;a href="./requirements-diagram.html">Full-page requirements diagram&lt;/a>&lt;/p></description></item><item><title>Docs: Allowances</title><link>https://osrd.fr/en/docs/explanation/running_time_calculation/allowances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/explanation/running_time_calculation/allowances/</guid><description>
&lt;font color=#aa026d>
&lt;h3 id="the-purpose-of-allowances">The purpose of allowances&lt;/h3>
&lt;/font>
&lt;p>As explained in the &lt;a href="../pipeline/#calculation-of-the-max-effort-profile">calculation of the Max Effort Profile&lt;/a>, the &lt;strong>basic running time&lt;/strong> represents the most stretched run normally achievable, i.e. the fastest possible run of the given equipment on the given route. The train accelerates to the maximum, travels as fast as possible according to the different speed limits and driving capabilities, and brakes to the maximum.&lt;/p>
&lt;p>This basic run has a major disadvantage: if a train leaves 10 minutes late, it will arrive at best 10 minutes late, because by definition it is impossible for it to run faster than the basic run. Therefore, trains are scheduled with one or more allowances added. The allowances are a relaxation of the train&amp;rsquo;s route, an addition of time to the scheduled timetable, which inevitably results in a lowering of running speeds.&lt;/p>
&lt;blockquote>
&lt;p>A train running in basic gear is unable to catch up!&lt;/p>
&lt;/blockquote>
&lt;font color=#aa026d>
&lt;h3 id="allowances-types">Allowances types&lt;/h3>
&lt;/font>
&lt;p>There are two types of allowances:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The regularity allowance&lt;/strong>: this is the additional time added to the basic running time to take account of the inaccuracy of speed measurement, to compensate for the consequences of external incidents that disrupt the theoretical run of trains, and to maintain the regularity of the traffic. The regularity allowance applies to the whole route, although its value may change at certain intervals.&lt;/li>
&lt;li>&lt;strong>The construction allowance&lt;/strong>: this is the time added/removed on a specific interval, in addition to the regularity allowance, but this time for operational reasons (dodging another train, clearing a track more quickly, etc.)&lt;/li>
&lt;/ul>
&lt;p>A basic running time with an added allowance of regularity gives what is known as a &lt;strong>standard walk&lt;/strong>.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="allowance-distribution">Allowance distribution&lt;/h3>
&lt;/font>
&lt;p>Since the addition of allowance results in lower speeds along the route, there are a number of possible routes. Indeed, there are an infinite number of solutions that result in the same journey time.&lt;/p>
&lt;p>As a simple example, in order to reduce the running time of a train by 10% of its journey time, it is possible to extend any stop by the time equivalent to this 10%, just as it is possible to run at 1/1.1 = 90.9% of the train&amp;rsquo;s capacity over the entire route, or to run slower, but only at high speeds&amp;hellip;&lt;/p>
&lt;p>There are currently two algorithms for margin distribution in OSRD: linear and economic.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="linear-distribution">Linear distribution&lt;/h3>
&lt;/font>
&lt;p>Linear allowance distribution is simply lowering the speeds by the same factor over the area where the user applies the allowance. Here is an example of its application:&lt;/p>
&lt;p>&lt;img src="../python_plot_linear.png" alt="Python plot linear">&lt;/p>
&lt;p>The advantage of this distribution is that the allowance is spread evenly over the entire journey. A train that is late on 30% of its journey will have 70% of its allowance for the remaining 70% of its journey.&lt;/p>
&lt;font color=#aa026d>
&lt;h3 id="economic-distribution">Economic distribution&lt;/h3>
&lt;/font>
&lt;p>The economic distribution of the allowance, presented in detail in &lt;a href="https://osrd.fr/pdf/MARECO.pdf">this document&lt;/a> (&lt;strong>MARECO&lt;/strong> is an algorithm designed by the SNCF research department), consists of distributing the allowance in the most energy-efficient way possible. It is based on two principles:&lt;/p>
&lt;ol>
&lt;li>a maximum speed, avoiding the most energy-intensive speeds&lt;/li>
&lt;li>run-on zones, located before braking and steep gradients, where the train runs with the engine off thanks to its inertia, allowing it to consume no energy during this period&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../python_plot_eco_w_slopes.png" alt="Python plot eco with slopes">&lt;/p>
&lt;blockquote>
&lt;p>An example of economic walking. Above, the gradients/ramps encountered by the train. The areas of travel on the track are shown in blue.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Standard allowance</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/standard_allowance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/standard_allowance/</guid><description>
&lt;p>The STDCM module must be usable with
&lt;a href="https://osrd.fr/en/docs/explanation/running_time_calculation/allowances/">standard allowances&lt;/a>.
The user can set an allowance value, expressed either as a function of
the running time or the travelled distance. This time must be added to the
running time, so that it arrives later compared to its fastest possible
running time.&lt;/p>
&lt;blockquote>
&lt;p>For example: the user can set a margin of 5 minutes per 100km.
On a 42km long path that would take 10 minutes at best,
the train should arrive 12 minutes and 6 seconds after leaving.&lt;/p>
&lt;/blockquote>
&lt;p>This can cause problems to detect conflicts, as an allowance would move
the end of the train slot to a later time.
The allowance must be considered when we compute conflicts as
the graph is explored.&lt;/p>
&lt;p>The allowance must also follow the &lt;a href="https://osrd.fr/pdf/MARECO.pdf">MARECO&lt;/a> model:
the extra time isn&amp;rsquo;t added evenly over the whole path,
it is computed in a way that requires knowing the whole path.
This is done to optimize the energy used by the train.&lt;/p>
&lt;h4 id="during-the-exploration">During the exploration&lt;/h4>
&lt;p>The main implication of the standard allowance is during
the graph exploration, when we identify conflicts.
It means that we need to scale down the speeds. We still need
to compute the maximum speed simulations (as they define
the extra time), but when identifying at which time we see
a given signal, all speeds and times are scaled.&lt;/p>
&lt;p>This process &lt;em>is not exact&lt;/em>. It doesn&amp;rsquo;t properly account for
the way the allowance is applied (especially for MARECO).
But at this point we don&amp;rsquo;t need exact times, we just need
to identify whether a solution would exist at this approximate time.&lt;/p>
&lt;div class="alert alert-info" role="alert">
This slightly inexact process may seem like a problem, but in
reality (for SNCF) standard allowances actually have some
tolerance between arbitrary points on the path. e.g. if
we should aim for 5 minutes per 100km, any value between
3 and 7 would be valid. The actual tolerance is not something
we can or want to encode as they&amp;rsquo;re too many specificities,
but it means we can be off by a few seconds.
&lt;/div>
&lt;h4 id="post-processing">Post-processing&lt;/h4>
&lt;p>The process to find the actual train simulation is as follows:&lt;/p>
&lt;ol>
&lt;li>We define points at which the time is fixed, initialized
at first with the time of each train stop. This is an input
of the simulation and indirectly calls the standard allowance.&lt;/li>
&lt;li>If there are conflict, we try to remove the first one.&lt;/li>
&lt;li>We add a fixed time point &lt;em>at the location where that conflict
happened&lt;/em>. We use the time considered during the exploration
(with linear scaling) as reference time.&lt;/li>
&lt;li>This process is repeated iteratively until no conflict is found.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Implementation details</title><link>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/implementation_details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/stdcm/pathfinding_module/implementation_details/</guid><description>
&lt;p>This page is about implementation details.
It isn&amp;rsquo;t necessary to understand general principles,
but it helps before reading the code.&lt;/p>
&lt;h4 id="stdcmedgebuilder">STDCMEdgeBuilder&lt;/h4>
&lt;p>This refers to
&lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/core/src/main/kotlin/fr/sncf/osrd/stdcm/graph/STDCMEdgeBuilder.kt">this class&lt;/a>
in the project.&lt;/p>
&lt;p>This class is used to make it easier to create instances of
&lt;code>STDCMEdge&lt;/code>, the graph edges. Those contain many attributes,
most of which can be determined from the context (e.g. the
previous node).
The &lt;code>STDCMEdgeBuilder&lt;/code> class makes some parameters optional
and automatically computes others.&lt;/p>
&lt;p>Once instantiated and parametrized, an &lt;code>STDCMEdgeBuilder&lt;/code> has two methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>makeAllEdges(): Collection&amp;lt;STDCMEdge&amp;gt;&lt;/code> can be used to create all
the possible edges in the given context for a given route.
If there are several &amp;ldquo;openings&amp;rdquo; between occupancy blocks, one edge
is instantiated for each opening. Every conflict, their avoidance,
and their related attributes are handled here.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>findEdgeSameNextOccupancy(double timeNextOccupancy): STDCMEdge?&lt;/code>:
This method is used to get the specific edges that uses a certain
opening (when it exists), identified here with the time of the next
occupancy block. It is called whenever a new edge must be re-created
to replace an old one. It calls the previous method.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="pathfinding">Pathfinding&lt;/h3>
&lt;p>The methods mentioned here are defined in
&lt;a href="https://github.com/OpenRailAssociation/osrd/blob/dev/core/src/main/kotlin/fr/sncf/osrd/stdcm/graph/STDCMPathfinding.kt">this class&lt;/a>.&lt;/p>
&lt;h4 id="cost-function">Cost function&lt;/h4>
&lt;p>The function used to define pathfinding cost sets which path
is used over another. The result is always the one that minimizes
this cost (as long as the heuristic is admissible).&lt;/p>
&lt;p>Here, two parameters are used: total run time and departure time.
The latter has a very small weight compared to the former,
so that the fastest path is found. More details
are explained in the documentation of those methods.&lt;/p>
&lt;h4 id="heuristics">Heuristics&lt;/h4>
&lt;p>The algorithm used to find a path is an A*, with a heuristic based
on geographical coordinates.&lt;/p>
&lt;p>However, the coordinates of generated infrastructures are arbitrary
and don&amp;rsquo;t reflect the track distance. It means that,
for the generated infrastructures, the path may not always be the
shortest one.&lt;/p>
&lt;p>It would be possible to use this heuristic to determine whether
the current node can lead to a path that doesn&amp;rsquo;t take
longer than the maximum allowed total run time. But for the same
reason, adding this feature would break any STDCM test on generated
infras. More details in
&lt;a href="https://github.com/OpenRailAssociation/osrd/issues/2818">this issue&lt;/a>.&lt;/p></description></item><item><title>Docs: Timetable v2</title><link>https://osrd.fr/en/docs/reference/design-docs/timetable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/timetable/</guid><description>
&lt;p>&lt;img src="timetable.svg" alt="Test">&lt;/p>
&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;p>Some major changes were made between our first version of the timetable and the new one:&lt;/p>
&lt;ul>
&lt;li>Isolate the timetable table. It can be used in a scenario or in other contexts&lt;/li>
&lt;li>Have a soft reference from train schedule to rolling stock (to be able to create a train schedule with unknown rolling stock)&lt;/li>
&lt;li>Consider path and simulation output as cache (that don&amp;rsquo;t require to be stored in DB)&lt;/li>
&lt;li>We can compute pathfinding without having to store data&lt;/li>
&lt;li>All input needed to compute a path is stored in the train schedule (we can recompute it if needed)&lt;/li>
&lt;li>All input needed to run a simulation is stored in the train schedule (we can recompute it if needed)&lt;/li>
&lt;/ul>
&lt;h1 id="train-schedule-v2">Train schedule v2&lt;/h1>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>&lt;code>front&lt;/code>: easy to keep consistent during edition&lt;/li>
&lt;li>&lt;code>front&lt;/code>: intermediate invalid states than can be reached during edition have to be encodable&lt;/li>
&lt;li>&lt;code>front&lt;/code>: when deleting a waypoint that is referenced by margins, the position of the deleted waypoint within the path must be preserved until the situation is resolved&lt;/li>
&lt;li>&lt;code>import&lt;/code>: path waypoint locations can be specified using UIC operational point codes&lt;/li>
&lt;li>&lt;code>import&lt;/code>: support fixed scheduled arrival times at stops and arbitrary points&lt;/li>
&lt;li>&lt;code>import&lt;/code> &lt;code>edition&lt;/code>: train schedules must be self-contained: they cannot be described using the result of pathfinding or simulations&lt;/li>
&lt;/ul>
&lt;h2 id="design-decisions-1">Design decisions&lt;/h2>
&lt;h3 id="path-waypoints-have-an-identity">Path waypoints have an identity&lt;/h3>
&lt;p>At some point in the design process, the question was raised of whether to reference location of stops and margin transitions by name, or by value. That is, should stops hold the index of the waypoint where the stop occurs, or a description of the location where the stop occurs?&lt;/p>
&lt;p>It was decided to add identifiers to path waypoints, and to reference those identifiers where referencing a path location is needed. This has multiple upsides:&lt;/p>
&lt;ul>
&lt;li>you can&amp;rsquo;t reference a location outside of the path&lt;/li>
&lt;li>when changing a waypoint&amp;rsquo;s location, for example from one station&amp;rsquo;s platform to another, no additional work is needed to keep the path consistent&lt;/li>
&lt;li>if a path goes to the same place multiple times, the identifier reference makes it clear which path location is referenced&lt;/li>
&lt;li>it makes keeping data consistent while editing easier, as all locations are kept in a single place&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-train-schedules-and-soft-deletes">Invalid train schedules and soft deletes&lt;/h3>
&lt;p>If a user deletes a waypoint, what happens? Is it the front-end&amp;rsquo;s responsibility to only save valid schedules, or can invalid schedules be represented in the data model? We decided that it wasn&amp;rsquo;t just the front-end&amp;rsquo;s responsibility, as we want to be able to model inconsistent states, until the user comes back to fix it.&lt;/p>
&lt;p>One key observation was that we do not want to lose the ability to locate within the path waypoints that were deleted, until all references are gone. How is the front-end supposed to display margin bounds or stops for a waypoint that&amp;rsquo;s gone, if it&amp;rsquo;s not there anymore?&lt;/p>
&lt;p>We thus decided to add a &lt;code>deleted&lt;/code> soft-delete flag to waypoints. When this flag is set, the back-end runs simulations on the path, but still allows saving it. Once all references to a deleted waypoint are gone, it can be removed from the path. The backend can deny train schedules with stale deleted waypoints.&lt;/p>
&lt;h3 id="separating-path-and-stops">Separating path and stops&lt;/h3>
&lt;p>This decision was hard to make, as there are little factors influencing this decision. Two observations led us to this decision:&lt;/p>
&lt;ul>
&lt;li>when deleting a waypoint, the end user may want to preserve the associated stop. Making the separation clear in the data model helps with implementing this behavior correctly, if deemed relevant&lt;/li>
&lt;li>bundling stops into the path makes it harder to describe what fields &lt;code>path&lt;/code> waypoints should have, and what should have a separate object and reference. It was decided that keeping &lt;code>path&lt;/code> a simple list of &lt;code>Location&lt;/code>, with no strings attached, made things a little clearer.&lt;/li>
&lt;/ul>
&lt;h3 id="no-more-engineering-margins">No more engineering margins?&lt;/h3>
&lt;p>In the legacy model, we had engineering margins. These margins had the property of being able to overlap. It was also possible to choose the distribution algorithm for each margin individually.&lt;/p>
&lt;p>We asked users to comment on the difference and the usefulness of retaining these margins with scheduled points. The answer is that there is no fundamental difference, and that the additional flexibility offered by engineering margins makes no practical sense (overlap and choice of distribution&amp;hellip;).&lt;/p>
&lt;h3 id="arrival-times-are-durations-since-departure-time">Arrival times are durations since departure time&lt;/h3>
&lt;ul>
&lt;li>this allows shifting the departure time without having to change arrival times&lt;/li>
&lt;li>we don&amp;rsquo;t have to parse dates and compute date differences within a single trip&lt;/li>
&lt;/ul>
&lt;p>We also discussed whether to use seconds or ISO 8601 durations. In the end, ISO 8601 was chosen, despite the simplicity of seconds:&lt;/p>
&lt;ul>
&lt;li>it preserves the user&amp;rsquo;s choice unit for specifying duration&lt;/li>
&lt;li>it interfaces nicely with the ISO 8601 departure time&lt;/li>
&lt;li>it does not suffer from potential integer-float serialization related precision loss&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-and-outdated-train-schedules">Invalid and outdated train schedules&lt;/h3>
&lt;p>Reasons for a train schedule to be &lt;strong>invalid&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Inconsistent train schedule (contains deleted waypoint)&lt;/li>
&lt;li>Rolling stock not found&lt;/li>
&lt;li>Path waypoint not found&lt;/li>
&lt;li>The path cannot be found&lt;/li>
&lt;/ul>
&lt;p>Reasons for a train schedule to be &lt;strong>outdated&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>The train path changed&lt;/li>
&lt;li>The train running time changed&lt;/li>
&lt;/ul>
&lt;p>What we can do about outdated trains:&lt;/p>
&lt;ol>
&lt;li>Nothing, they&amp;rsquo;re updated without notification&lt;/li>
&lt;li>We can notify the user that a train schedule is outdated:
&lt;ul>
&lt;li>Nothing can be done except acknowledge the change&lt;/li>
&lt;li>We can not check what changed between the old and new version&lt;/li>
&lt;li>We can not know the cause of this change (RS, Infra, Algorithms&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Note: The outdated status is a nice to have feature (it won&amp;rsquo;t be implemented right now).&lt;/p>
&lt;h2 id="creation-fields">Creation fields&lt;/h2>
&lt;p>These fields are required at creation time, but cannot be changed afterwards.
They are returned when the train schedule is queried.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">timetable_id&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="modifiable-fields">Modifiable fields&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">train_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ABC3615&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">rolling_stock_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">R2D2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># labels are metadata. They&amp;#39;re only used for display filtering&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">labels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;tchou-tchou&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;choo-choo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># used to select speed limits for simulation&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">speed_limit_tag&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;MA100&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the start time is an ISO 8601 datetime with timezone. it is not always the&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># same at the departure time, as there may be a stop at the starting point&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">start_time&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2023-12-21T08:51:11.914897+00:00&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: a, uic&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">87210&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Any operational point matching the given uic&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: b, track: foo, offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 10m on track foo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: c, deleted: true, trigram&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ABC}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Any operational point matching the trigram ABC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">id: d, operational_point&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">X}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># A specified operational point&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the algorithm used for distributing margins and scheduled times&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constraint_distribution&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MARECO&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or LINEAR&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># all durations and times are specified using ISO 8601&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># we don&amp;#39;t supports months and years duration since it&amp;#39;s ambiguous&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># times are defined as time elapsed since start. Even if the attribute is omitted,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># a scheduled point at the starting point is inferred to have departure=start_time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the &amp;#34;locked&amp;#34; flag is ignored by the backend.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># To specify signal&amp;#39;s state on stop&amp;#39;s arrival, you can use the &amp;#34;reception_signal&amp;#34; enum:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - OPEN: arrival on open signal, will reserve resource downstream of the signal.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - STOP: arrival on stop signal, will not reserve resource downstream of the signal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># and will trigger safety speed on approach.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - SHORT_SLIP_STOP: arrival on stop signal with a short slip distance,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># will not reserve resource downstream of the signal and will trigger safety&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># speed on approach as well as short slip distance speed.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This is used for cases where a movable element is placed shortly after the signal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># and going beyond the signal would cause major problems.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This is used automatically for any stop before a buffer-stop.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This is also the default use for STDCM stops, as it is the most restrictive.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">schedule&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: a, stop_for: PT5M, locked&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># inferred arrival to be equal to start_time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: b, arrival: PT10M, stop_for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PT5M}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: c, stop_for&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PT5M}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">at: d, arrival: PT50M, locked: true, reception_signal&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">SHORT_SLIP_STOP}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">margins&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># This example encodes the following margins:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># a --- 5% --- b --- 3% --- c --- 4.5min/100km --- d&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># /!\ all schedule points with either an arrival or departure time must also be&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># margin boundaries. departure and arrival waypoints are implicit boundaries. /!\&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># boundaries delimit margin sections. A list of N boundaries yields N + 1 sections.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">boundaries&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">b, c]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the following units are supported:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - % means added percentage of the base simulation time&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># - min/100km means minutes per 100 kilometers&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">values&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;5%&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;3%&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;4.5min/100km&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># train speed at simulation start, in meters per second.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># must be zero if the train starts at a stop&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">initial_speed&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.5&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">power_restrictions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- {&lt;span style="color:#204a87;font-weight:bold">from: b, to: c, value&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;M1C1&amp;#34;&lt;/span>}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">comfort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">AIR_CONDITIONING&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or HEATING, default STANDARD&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">options&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Should we use electrical profiles to select rolling stock speed effort curves&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">use_electrical_profiles&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="combining-margins-and-schedule">Combining margins and schedule&lt;/h1>
&lt;p>Margins and scheduled points are two ways to add time constraints to a train&amp;rsquo;s schedule.
Therefore, there must be a clear set of rules to figure out how these two interfaces interact.&lt;/p>
&lt;p>The end goal is to make the target schedule and margins consistent with each other. This is achieved by:&lt;/p>
&lt;ul>
&lt;li>computing what the schedule would look like if only margins were applied&lt;/li>
&lt;li>compare that to the target schedule&lt;/li>
&lt;li>correct the margin schedule so that it matches the target schedule&lt;/li>
&lt;/ul>
&lt;p>The path is partitioned as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>known time sections&lt;/strong> span between locations where the arrival time is known.
If there are &lt;code>N&lt;/code> such locations, there are &lt;code>N - 1&lt;/code> known time sections.
In these sections, margins need to be adjusted to match the target schedule.&lt;/li>
&lt;li>If the arrival time at destination is unknown, the section from the last known
arrival time point and the destination is called the &lt;strong>relaxed time section&lt;/strong> has no bound.
Margins can be applied directly.&lt;/li>
&lt;/ul>
&lt;p>As &lt;strong>margins cannot span known time section boundaries&lt;/strong>, each known time section can be
further subdivided into margin sections. Margins cover the entire path.&lt;/p>
&lt;p>&lt;strong>The end goal is to find the target arrival time at the end of each margin section&lt;/strong>.
This needs to be done while preserving consistency with the input schedule.&lt;/p>
&lt;p>&lt;img src="schedule.svg" alt="Schedule building algorithm">&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;p>Note that stops do not impact margin repartition. For example, the margin &lt;strong>does not need&lt;/strong> to be proportionally distributed on each side of &lt;code>b&lt;/code>.&lt;/p>
&lt;p>The same goes for points with arrival time. They impact whether the margin is respected or not, but they do not force the margin to be proportionally distributed on each side of the point.&lt;/p>
&lt;/div>
&lt;p>The final schedule is computed as follows:&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>base simulation&lt;/strong> is computed, without any time constraint (other than stops). It&amp;rsquo;s used to compute provisional margin values.&lt;/li>
&lt;li>Make a &lt;strong>provisional time table&lt;/strong>, which ignores target arrival times but includes provisional margin values.&lt;/li>
&lt;li>For each &lt;strong>known time section&lt;/strong>, compute the adjustment required to make the provisional schedule match the target schedule.&lt;/li>
&lt;li>Distribute this difference into the known time section&amp;rsquo;s margin sections, proportionally to margin section running time.
After distributing the adjustment into margin sections, the &lt;strong>final schedule&lt;/strong> should be compatible with the target schedule.&lt;/li>
&lt;/ul>
&lt;h2 id="error-handling">Error handling&lt;/h2>
&lt;p>Some errors may happen while building the timetable:&lt;/p>
&lt;ul>
&lt;li>if a known time section&amp;rsquo;s required adjustment is negative, a warning must be raised, as margins will have to be lowered&lt;/li>
&lt;li>if a margin section&amp;rsquo;s final running time is tighter than the base simulation, it cannot be achieved, and a warning should be raised&lt;/li>
&lt;/ul>
&lt;p>Other errors can happen at runtime:&lt;/p>
&lt;ul>
&lt;li>target margin values can be too low, as transitions from high density margin to low margin section force the train to lose
time after it has exited to high density margin section.&lt;/li>
&lt;li>target margin values can also be too high, as the train may not have time to slow down enough, or drive so slow as to be
unacceptable.&lt;/li>
&lt;/ul>
&lt;p>During simulation, &lt;strong>if a target arrival time cannot be achieved, the rest of the schedule still stands&lt;/strong>.&lt;/p>
&lt;p>The mission model in OSRD is represented almost like a Train Schedule with the addition of 2 fields:&lt;/p>
&lt;ul>
&lt;li>&lt;code>step: Duration (ISO 8601)&lt;/code> corresponds to the delay between each train&lt;/li>
&lt;li>&lt;code>duration: Duration (ISO 8601)&lt;/code> which corresponds to the total duration of the mission.&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>A mission with a step of 15 min and a duration of 2 hours will see 8 trains running from the departure time.&lt;/p>
&lt;h2 id="endpoints">Endpoints&lt;/h2>
&lt;h3 id="timetable">Timetable&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /timetable
GET /timetable/ # Paginated list timetable
PUT /timetable/ID
DELETE /timetable/ID
GET /timetable/ID/train_schedules # Paginated list of train schedules
GET /timetable/ID/paced_trains # Paginated list of paced_trains
&lt;/code>&lt;/pre>&lt;h3 id="train-schedule">Train Schedule&lt;/h3>
&lt;pre tabindex="0">&lt;code>POST /timetable/ID/train_schedules # A batch creation
GET /train_schedule/ID
PUT /train_schedule/ID # Update a specific train schedule
DELETE /train_schedule # A batch deletion
&lt;/code>&lt;/pre>&lt;h3 id="paced-train">Paced Train&lt;/h3>
&lt;p>POST /timetable/ID/paced_trains # A batch creation
GET /paced_train/ID
PUT /paced_train/ID # Update a specific paced train
DELETE /paced_trains # A batch deletion&lt;/p>
&lt;pre tabindex="0">&lt;code>
### Path
&lt;/code>&lt;/pre>&lt;p>POST /infra/ID/pathfinding/topo # Not required now can be move later
POST /infra/ID/pathfinding/blocks&lt;/p>
&lt;h1 id="takes-a-pathfinding-result-and-a-list-of-properties-to-extract">takes a pathfinding result and a list of properties to extract&lt;/h1>
&lt;p>POST /infra/ID/path_properties?props[]=slopes&amp;amp;props[]=gradients&amp;amp;props[]=electrifications&amp;amp;props[]=geometry&amp;amp;props[]=operational_points
GET /train_schedule/ID/path?infra_id=42 # Retrieve the path from a train schedule
GET /paced_train/ID/path?infra_id=42 # Retrieve the path from a paced_train&lt;/p>
&lt;pre tabindex="0">&lt;code>
### Simulation results
&lt;/code>&lt;/pre>&lt;h1 id="retrieve-the-list-of-conflict-of-the-timetable-invalid-trains-are-ignored">Retrieve the list of conflict of the timetable (invalid trains are ignored)&lt;/h1>
&lt;p>GET /timetable/ID/conflicts?infra=N&lt;/p>
&lt;h1 id="retrieve-the-space-speed-and-time-curve-of-a-given-train">Retrieve the space, speed and time curve of a given train&lt;/h1>
&lt;p>GET /train_schedule/ID/simulation?infa=N&lt;/p>
&lt;h1 id="retrieve-the-space-speed-and-time-curve-of-a-given-paced-train">Retrieve the space, speed and time curve of a given paced train&lt;/h1>
&lt;p>GET /paced_train/ID/simulation?infa=N&lt;/p>
&lt;h1 id="retrieves-simulation-information-for-a-given-train-list-useful-for-finding-out-whether-pathfindingsimulation-was-successful">Retrieves simulation information for a given train list. Useful for finding out whether pathfinding/simulation was successful.&lt;/h1>
&lt;p>GET /train_schedule/simulations_sumary?infa=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;h1 id="retrieves-simulation-information-for-a-given-paced-train-list-useful-for-finding-out-whether-pathfindingsimulation-was-successful">Retrieves simulation information for a given paced train list. Useful for finding out whether pathfinding/simulation was successful.&lt;/h1>
&lt;p>GET /paced_train/simulations_sumary?infa=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;h1 id="projects-the-space-time-curves-and-paths-of-a-number-of-train-schedules-onto-a-given-path">Projects the space time curves and paths of a number of train schedules onto a given path&lt;/h1>
&lt;p>POST /v2/train_schedule/project_path?infra=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;h1 id="projects-the-space-time-curves-and-paths-of-a-number-of-paced-trains-onto-a-given-path">Projects the space time curves and paths of a number of paced trains onto a given path&lt;/h1>
&lt;p>POST /paced_train/project_path?infra=N&amp;amp;ids[]=X&amp;amp;ids[]=Y&lt;/p>
&lt;pre tabindex="0">&lt;code>
## Frontend workflow
The frontend shouldn&amp;#39;t wait minutes to display something to the user. When a timetable contains hundreds of trains it can take some time to simulate everything.
The idea is to split requests into small batches.
```mermaid
flowchart TB
InfraLoaded[Check for infra to be loaded]
RetrieveTimetable[Retrieve Timetable]
RetrieveTrains[Retrieve TS2 payloads]
SummarySimulation[[Summary simulation batch N:N+10]]
TrainProjectionPath[Get selected train projection path]
Projection[[Projection batch N-10:N]]
TrainSimulation[Get selected train simulation]
TrainPath[Get selected train path]
TrainPathProperties[Get selected train path properties]
DisplayGev(Display: GEV / Map /\n Driver Schedule/ Linear / Output Table)
DisplayGet(Display Space Time Chart)
DisplayTrainList(Display train list)
Conflicts(Compute and display conflicts)
ProjectConflicts(Display conflicts in GET)
InfraLoaded --&amp;gt;|Wait| SummarySimulation
InfraLoaded --&amp;gt;|Wait| TrainProjectionPath
InfraLoaded --&amp;gt;|Wait| TrainPath
TrainPath --&amp;gt;|If found| TrainSimulation
TrainPath --&amp;gt;|If found| TrainPathProperties
RetrieveTimetable --&amp;gt;|Get train ids| RetrieveTrains
RetrieveTrains ==&amp;gt;|Sort trains and chunk it| SummarySimulation
SummarySimulation ==&amp;gt;|Wait for the previous batch| Projection
SummarySimulation --&amp;gt;|Gradually fill cards| DisplayTrainList
TrainPathProperties --&amp;gt;| | DisplayGev
TrainSimulation --&amp;gt;|If valid simulation| DisplayGev
TrainProjectionPath --&amp;gt;|Wait for the previous batch| Projection
SummarySimulation -..-&amp;gt;|If no projection train id| TrainProjectionPath
Projection ==&amp;gt;|Gradually fill| DisplayGet
SummarySimulation --&amp;gt;|Once everything is simulated| Conflicts
Conflicts --&amp;gt; ProjectConflicts
&lt;/code>&lt;/pre></description></item><item><title>Docs: Simulation lifecycle</title><link>https://osrd.fr/en/docs/reference/design-docs/signaling/simulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/signaling/simulation/</guid><description>
&lt;h2 id="loading-signal-parameters">Loading Signal Parameters&lt;/h2>
&lt;p>The first step of loading the signal is to characterize the signal in the signaling system.
This step produces an object that describes the signal.&lt;/p>
&lt;p>During the loading of the signal:&lt;/p>
&lt;ul>
&lt;li>the signaling system corresponding to the provided name is identified&lt;/li>
&lt;li>the signal properties and parameters are loaded and validated according to the signaling system spec&lt;/li>
&lt;li>the signal&amp;rsquo;s block and route delimiting properties are evaluated&lt;/li>
&lt;/ul>
&lt;h2 id="loading-the-signal">Loading the Signal&lt;/h2>
&lt;p>Once signal parameters are loaded, drivers can be loaded. For each driver:&lt;/p>
&lt;ul>
&lt;li>The driver implementation is identified from the &lt;code>(signaling_system, next_signaling_system)&lt;/code> pair.&lt;/li>
&lt;li>It is verified that the signaling system outgoing from the driver corresponds to the one of the signal.&lt;/li>
&lt;li>It is verified that there is no existing driver for the incoming signaling system of the driver.&lt;/li>
&lt;/ul>
&lt;p>This step produces a &lt;code>Map&amp;lt;SignalingSystem, SignalDriver&amp;gt;&lt;/code>, where the signaling
system is the one incoming to the signal. It then becomes possible to construct
the loaded signal.&lt;/p>
&lt;h2 id="constructing-blocks">Constructing Blocks&lt;/h2>
&lt;ul>
&lt;li>The framework creates blocks between signals following the routes present in the infrastructure, and the block properties of the signals.&lt;/li>
&lt;li>Checks are made on the created block graph: it must always be possible to choose a block for each signal and each state of the infrastructure.&lt;/li>
&lt;/ul>
&lt;h2 id="block-validation">Block validation&lt;/h2>
&lt;p>The validation process helps to report invalid configurations in terms of signaling and blockage. The validation cases we want to support are:&lt;/p>
&lt;ul>
&lt;li>The signaling system may want to validate, knowing if the block starts / ends on a buffer:
&lt;ul>
&lt;li>the length of the block&lt;/li>
&lt;li>the spacing between the block signals, first signal excluded&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Each signal in the block may have specific information if it is a transition signal. Therefore, all signal drivers participate in the validation.&lt;/li>
&lt;/ul>
&lt;p>In practice, there are two separate mechanisms to address these two needs:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>signaling system module&lt;/strong> is responsible for validating signaling &lt;strong>within&lt;/strong> blocks.&lt;/li>
&lt;li>&lt;strong>Signal drivers&lt;/strong> take care of validating transitions &lt;strong>between&lt;/strong> blocks.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">extern&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">report_warning&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/* TODO */&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">extern&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">report_error&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/* TODO */&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Block&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">startsAtBufferStop&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">stopsAtBufferStop&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">signalTypes&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SignalingSystemId&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">signalSettings&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">SignalSettings&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">signalPositions&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Distance&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">length&lt;/span>: &lt;span style="color:#000">Distance&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Runs in the signaling system module
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">check_block&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">block&lt;/span>: &lt;span style="color:#000">Block&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Runs in the signal driver module
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">check_signal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">signal&lt;/span>: &lt;span style="color:#000">SignalSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">block&lt;/span>: &lt;span style="color:#000">Block&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// The partial block downstream of the signal - no signal can see backward
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="signal-lifecycle">Signal lifecycle&lt;/h2>
&lt;p>Before a train startup:&lt;/p>
&lt;ul>
&lt;li>the path a of the train can be expressed is given, both as routes and blocks&lt;/li>
&lt;li>the signal queue a train will encounter is established&lt;/li>
&lt;/ul>
&lt;p>During the simulation:&lt;/p>
&lt;ul>
&lt;li>along a train movement, the track occupation before it are synthesized&lt;/li>
&lt;li>when a train observes a signal, its state is evaluated&lt;/li>
&lt;/ul>
&lt;h2 id="signal-state-evaluation">Signal state evaluation&lt;/h2>
&lt;p>Signals are modeled as an evaluation function, taking a view of the world and returning the signal state&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">ZoneStatus&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/** The zone is clear to be used by the train */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">CLEAR&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/** The zone is occupied by another train, but otherwise clear to use */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">OCCUPIED&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/** The zone is incompatible. There may be another train as well */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">INCOMPATIBLE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">MAView&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/** Combined status of the zones protected by the current signal */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">val&lt;/span> &lt;span style="color:#000">protectedZoneStatus&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ZoneStatus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">val&lt;/span> &lt;span style="color:#000">nextSignalState&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">SignalState&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">val&lt;/span> &lt;span style="color:#000">nextSignalSettings&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">SignalSettings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">fun&lt;/span> &lt;span style="color:#000">signal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">maView&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">MAView&lt;/span>&lt;span style="color:#000;font-weight:bold">?):&lt;/span> &lt;span style="color:#000">SignalState&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The view should allow access to the following data:&lt;/p>
&lt;ul>
&lt;li>a synthesized view of zones downstream until the end of the train&amp;rsquo;s MA&lt;/li>
&lt;li>the block chain&lt;/li>
&lt;li>the state of downstream signals which belong to the current block chain&lt;/li>
&lt;/ul>
&lt;h2 id="signaling-view-path">Signaling view path&lt;/h2>
&lt;p>The path along which the MAView and SpeedLimitView live is best expressed using blocks:&lt;/p>
&lt;ul>
&lt;li>blocks can be added to extend the view along the path of a train&lt;/li>
&lt;li>the view can be reduced by removing blocks, as the train passes by signals&lt;/li>
&lt;/ul>
&lt;h2 id="simulation-outside-the-train-path">Simulation outside the train path&lt;/h2>
&lt;p>Everything mentioned so far was designed to simulate signals between a train the
end of its movement authority, as all others signals have no influence over the behavior
of trains (they cannot be seen, or are disregarded by drivers).&lt;/p>
&lt;p>Nevertheless, one may want to simulate and display the state of all signals at a given point in time,
regardless of which signals are in use.&lt;/p>
&lt;p>Simulation rules are as follows:&lt;/p>
&lt;ul>
&lt;li>if a signal starts blocks which have differing paths, it is simulated as if it were at the end of a route&lt;/li>
&lt;li>if a signal starts blocks which all start the same path, it is simulated in the same view as the next signals in this path&lt;/li>
&lt;/ul></description></item><item><title>Docs: Scalable async RPC</title><link>https://osrd.fr/en/docs/reference/design-docs/scalable-async-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/docs/reference/design-docs/scalable-async-rpc/</guid><description>
&lt;p>TODO: create another document describing RPC interactions between core and editoast&lt;/p>
&lt;h2 id="context-and-requirements">Context and requirements&lt;/h2>
&lt;p>Without this proposal, editoast directly makes calls to core using http.
Using k8s, if multiple core workers are started, requests are randomly
distributed to core workers.&lt;/p>
&lt;p>This architecture brings a number of issues:&lt;/p>
&lt;ul>
&lt;li>To respond to a request, the core worker need to hold the request&amp;rsquo;s full infrastructure in memory.
Workers do not have enough memory to hold all infrastructures in memory.
Requests thus need to be routed to core workers specialized by infrastructure, which cannot be easily done using http.&lt;/li>
&lt;li>If too many requests are dispatched to a busy core worker, they will just time out.&lt;/li>
&lt;li>There is no easy way to scale up the number of workers to react to increased load.&lt;/li>
&lt;li>Because calls need to complete within the timeout of the client&amp;rsquo;s http requests,
the system falls apart when latency increases due to load.&lt;/li>
&lt;/ul>
&lt;p>This proposal intends to address these issues by introducing an RPC system which:&lt;/p>
&lt;ul>
&lt;li>manages &lt;a href="#worker-key">specialized&lt;/a> workers&lt;/li>
&lt;li>automatically scales specialized workers&lt;/li>
&lt;/ul>
&lt;h3 id="goals">Goals&lt;/h3>
&lt;ul>
&lt;li>&lt;code>high priority&lt;/code> the RPC protocol between editoast and core should be the same for development and production setups&lt;/li>
&lt;li>&lt;code>high priority&lt;/code> requests are dispatched to specialized workers&lt;/li>
&lt;li>&lt;code>high priority&lt;/code> the RPC system should be stateless and failure-resilient&lt;/li>
&lt;li>&lt;code>low priority&lt;/code> the complexity of the local development setup should not increase&lt;/li>
&lt;/ul>
&lt;h3 id="non-goals">Non-goals&lt;/h3>
&lt;ul>
&lt;li>&lt;code>not a goal&lt;/code> streaming events to the front-end&lt;/li>
&lt;li>&lt;code>not a goal&lt;/code> reliable response processing&lt;/li>
&lt;li>&lt;code>not a goal&lt;/code> caching&lt;/li>
&lt;/ul>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;pre class="mermaid">flowchart TD
client
osrdyne
worker-pool
worker-group
worker-group-queue
worker
worker-pool -- contains --&amp;gt; worker-group
worker-group -- contains and manages --&amp;gt; worker
client -- pub --&amp;gt; worker-group-queue
worker-group -- has a --&amp;gt; worker-group-queue
worker -- sub --&amp;gt; worker-group-queue
osrdyne -- manages --&amp;gt; worker-pool
osrdyne -- manages --&amp;gt; worker-group
osrdyne -- manages --&amp;gt; worker-group-queue&lt;/pre>
&lt;h3 id="client">Client&lt;/h3>
&lt;p>Clients submit RPC &lt;a href="#client-protocol">requests&lt;/a> to the message queue. RPC requests are published using AMQP 0.9.1.&lt;/p>
&lt;p>For example, &lt;code>editoast&lt;/code> would be a client.&lt;/p>
&lt;h3 id="worker-key">Worker key&lt;/h3>
&lt;p>Every submitted request includes a requested &lt;code>worker-key&lt;/code>, as the message&amp;rsquo;s &lt;code>routing-key&lt;/code>.&lt;/p>
&lt;p>&lt;strong>The key is what identifies which worker group will process the request&lt;/strong>.&lt;/p>
&lt;p>Workers known their worker key at startup. All workers in a worker group have the same worker key.
It is an arbitrary utf-8 string set by the client, whose meaning is not defined by the RPC protocol:&lt;/p>
&lt;ul>
&lt;li>It could just be a way to have separate processing queues. In this case, workers may not care about what their is.&lt;/li>
&lt;li>There could be an extra layer of protocol between client and worker about how the key is meant to be interpreted&lt;/li>
&lt;/ul>
&lt;p>Here are some &lt;strong>examples&lt;/strong> of how such protocols may work:&lt;/p>
&lt;ul>
&lt;li>it could be the identifier of a resource to act upon: &lt;code>42&lt;/code>&lt;/li>
&lt;li>it could be the identifiers of multiple resources: &lt;code>infra=42,timetable=24&lt;/code>&lt;/li>
&lt;li>it could even be, even though that&amp;rsquo;s probably &lt;strong>not a good idea&lt;/strong>, random worker settings:
&lt;code>log_level=debug&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="worker-pools">Worker pools&lt;/h3>
&lt;p>Worker pools are collections of workers of the same type, which can be specialized by key.
osrdyne creates an exchange for each worker pool, where clients can submit requests.&lt;/p>
&lt;p>For example, &lt;code>core&lt;/code> would be a worker pool.&lt;/p>
&lt;h3 id="worker-group">Worker group&lt;/h3>
&lt;p>Worker groups are collections of workers of the same pool and key, processing messages from the same queue.
&lt;strong>Worker groups are responsible for scaling the number of workers depending on queue length and processing rate.&lt;/strong>&lt;/p>
&lt;p>Worker groups are managed by osrdyne. osrdyne should support multiple worker group drivers:&lt;/p>
&lt;ul>
&lt;li>a &lt;a href="https://keda.sh">keda&lt;/a> k8s driver&lt;/li>
&lt;li>a k8s autoscaler driver&lt;/li>
&lt;li>a docker driver&lt;/li>
&lt;li>a subprocess driver, where a single worker is started as a subprocess for each worker group&lt;/li>
&lt;li>a systemd template unit driver&lt;/li>
&lt;li>a noop driver, where workers have to be started manually&lt;/li>
&lt;/ul>
&lt;p>For example, each &lt;code>core&lt;/code> worker group handles a given infrastructure.&lt;/p>
&lt;h3 id="worker">Worker&lt;/h3>
&lt;p>A worker is a server processing requests from its worker group queue. Worker have a key.
For example, &lt;code>core&lt;/code> workers are keyed by infrastructure.&lt;/p>
&lt;h3 id="osrdyne">osrdyne&lt;/h3>
&lt;ul>
&lt;li>manages all exchanges, policies, queues and bindings&lt;/li>
&lt;li>starts and stops worker groups as needed&lt;/li>
&lt;li>generates error responses if the worker group fails to respond&lt;/li>
&lt;/ul>
&lt;p>Each osrdyne instance manages a worker pool. See the &lt;a href="#osrdyne-architecture">dedicated section&lt;/a>.&lt;/p>
&lt;h2 id="rpc-protocol">RPC protocol&lt;/h2>
&lt;h3 id="client-protocol">Client protocol&lt;/h3>
&lt;p>Requests are submitted using AMQP 0.9.1&amp;rsquo;s &lt;code>basic.publish&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exchange&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-pools">worker pool&lt;/a> identifier&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>routing-key&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-key">requested key&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>correlation-id&lt;/code>&lt;/td>
&lt;td>an optional request id. The response will copy this field.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reply-to&lt;/code> property&lt;/td>
&lt;td>optional response queue&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mandatory&lt;/code>&lt;/td>
&lt;td>&lt;code>true&lt;/code> to ensure an error is returned if the message cannot be routed&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The body of the request will be dispatched to a worker of the requested pool and key.
The request is guaranteed to be dispatched &lt;strong>at least once&lt;/strong>&lt;/p>
&lt;p>The response format is as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>correlation-id&lt;/code>&lt;/td>
&lt;td>the correlation ID from the request&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x-status&lt;/code> property&lt;/td>
&lt;td>either &lt;code>ok&lt;/code>, &lt;a href="https://www.rabbitmq.com/docs/dlx#effects">or the reason for dead lettering&lt;/a>, taken from the request&amp;rsquo;s &lt;code>x-first-death-reason&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>body&lt;/td>
&lt;td>optional response data&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="worker-protocol">Worker protocol&lt;/h3>
&lt;p>When starting workers, the worker group driver provides:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Variable name&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>WORKER_ID&lt;/code>&lt;/td>
&lt;td>a unique identifier for this worker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_KEY&lt;/code>&lt;/td>
&lt;td>the &lt;a href="#worker-key">worker key&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_POOL&lt;/code>&lt;/td>
&lt;td>the name of the worker pool&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_REQUESTS_QUEUE&lt;/code>&lt;/td>
&lt;td>the queue to consume work from&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WORKER_ACTIVITY_EXCHANGE&lt;/code>&lt;/td>
&lt;td>the exchange to publish events to&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Workers then have to:&lt;/p>
&lt;ul>
&lt;li>publish a &lt;code>started&lt;/code> &lt;a href="#worker-activity-reports">activity report message&lt;/a>&lt;/li>
&lt;li>subscribe to &lt;code>WORKER_REQUESTS_QUEUE&lt;/code> using &lt;code>basic.consume&lt;/code>&lt;/li>
&lt;li>for each request message:
&lt;ul>
&lt;li>publish a &lt;code>request-received&lt;/code> &lt;a href="#worker-activity-reports">activity report message&lt;/a>&lt;/li>
&lt;li>if the worker cannot process the request, it can request a requeue using &lt;code>basic.reject&lt;/code> with &lt;code>requeue=true&lt;/code>&lt;/li>
&lt;li>build and publish a response to the &lt;a href="https://www.rabbitmq.com/tutorials/amqp-concepts#exchange-default">default exchange&lt;/a>&lt;/li>
&lt;li>&lt;code>basic.ack&lt;/code> the request&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="worker-response-protocol">Worker response protocol&lt;/h4>
&lt;p>Responses are submitted using AMQP 0.9.1&amp;rsquo;s &lt;code>basic.publish&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exchange&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-pools">worker pool&lt;/a> identifier&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>routing-key&lt;/code>&lt;/td>
&lt;td>&lt;a href="#worker-key">requested key&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reply-to&lt;/code> property&lt;/td>
&lt;td>optional response queue&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="worker-activity-reports">Worker activity reports&lt;/h4>
&lt;p>Workers report the following activity events:&lt;/p>
&lt;ul>
&lt;li>&lt;code>started&lt;/code>: the worker is about to start processing requests&lt;/li>
&lt;li>&lt;code>request-received&lt;/code>: a request was received&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>AMQP field&lt;/th>
&lt;th>value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>exchange&lt;/code>&lt;/td>
&lt;td>&lt;code>WORKER_ACTIVITY_EXCHANGE&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>routing-key&lt;/code>&lt;/td>
&lt;td>&lt;code>WORKER_KEY&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x-event&lt;/code> property&lt;/td>
&lt;td>the event type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="message-passing-architecture">Message passing architecture&lt;/h2>
&lt;p>&lt;img src="message-passing-architecture.svg" alt="Message passing architecture">&lt;/p>
&lt;p>For a full reference of all exchanges and queues, see the &lt;a href="#exchange-and-queues">exchanges and queues&lt;/a> section&lt;/p>
&lt;h2 id="message-lifetime">Message lifetime&lt;/h2>
&lt;pre class="mermaid">flowchart TD
received
processed
received --&amp;gt; requests
received -- alternate exchange --&amp;gt; orphans
orphans -- controller starts worker group --&amp;gt; requests
requests -- dead letter --&amp;gt; dlx
dlx -- controller generates error --&amp;gt; processed
requests -- worker responds --&amp;gt; processed&lt;/pre>
&lt;h2 id="service-architecture">Service architecture&lt;/h2>
&lt;pre class="mermaid">flowchart TD
client
subgraph RPC layer
rabbitmq[RabbitMQ]
osrdyne[osrdyne]
end
subgraph worker-group[worker group]
worker
end
client -- enqueues --&amp;gt; rabbitmq
osrdyne -- sub orphan messages --&amp;gt; rabbitmq
osrdyne -- manages queues --&amp;gt; rabbitmq
osrdyne -- starts and stops --&amp;gt; worker-group
osrdyne -- sub activity events --&amp;gt; rabbitmq
worker -- sub requests --&amp;gt; rabbitmq
worker -- pub responses --&amp;gt; rabbitmq
worker -- pub activity events --&amp;gt; rabbitmq&lt;/pre>
&lt;ul>
&lt;li>&lt;code>osrdyne&lt;/code> stops and starts worker groups following demand&lt;/li>
&lt;li>&lt;code>worker&lt;/code> processes requests dequeued from rabbitmq&lt;/li>
&lt;/ul>
&lt;h2 id="life-of-an-rpc-call">Life of an RPC call&lt;/h2>
&lt;p>In this example:&lt;/p>
&lt;ul>
&lt;li>&lt;code>editoast&lt;/code> is the client&lt;/li>
&lt;li>it makes a request to the &lt;code>core&lt;/code> worker pool&lt;/li>
&lt;li>the &lt;code>core&lt;/code> worker pool is keyed on infrastructures&lt;/li>
&lt;/ul>
&lt;h3 id="fast-path">Fast path&lt;/h3>
&lt;ul>
&lt;li>Editoast publishes a request message to &lt;code>exchange=core&lt;/code> with &lt;code>routing_key=42&lt;/code>. If the message expects a reply, &lt;code>reply-to&lt;/code> is set.&lt;/li>
&lt;li>If the &lt;code>core&lt;/code> exchange already has binding for worker group &lt;code>42&lt;/code>, a worker picks up the request&lt;/li>
&lt;li>The worker processes the request, and uses the &lt;code>reply-to&lt;/code> field to submit a response.&lt;/li>
&lt;li>The worker ACKs the request.&lt;/li>
&lt;/ul>
&lt;h3 id="worker-group-startup">Worker group startup&lt;/h3>
&lt;p>These steps only occur if the worker group / queue has not yet started:&lt;/p>
&lt;ul>
&lt;li>If there is no queue bound to routing key &lt;code>42&lt;/code>, the message is routed to the &lt;code>core-orphan-xchg&lt;/code> exchange.
This exchange is a fanout exchange with a single queue, where &lt;code>osrdyne&lt;/code> processes messages.&lt;/li>
&lt;li>&lt;code>osrdyne&lt;/code> processes the message:
&lt;ul>
&lt;li>creates queue &lt;code>core-req-42&lt;/code>, binds it to the &lt;code>core&lt;/code> exchange on routing key &lt;code>42&lt;/code>&lt;/li>
&lt;li>forward the message to exchange &lt;code>core&lt;/code>&lt;/li>
&lt;li>ACK the original message once the original is forwarded&lt;/li>
&lt;li>start worker group &lt;code>core&lt;/code> key &lt;code>42&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>the worker group starts up and processes the request&lt;/li>
&lt;/ul>
&lt;h2 id="osrdyne-architecture">osrdyne architecture&lt;/h2>
&lt;pre class="mermaid">flowchart TD
%% inputs
activity-queue([activity queue])
orphan-queue([orphan queue])
dead-letter-queue([dead letter queue])
rabbitmq-api[RabbitMQ HTTP API]
%% components
orphan-processor[orphan processor]
dead-letter-responder[dead letter responder]
subgraph pool manager
pool-state-tracker[pool state tracker]
wgs-control-loop[worker groups control loop]
req-queues-control-loop[request queues control loop]
end
wg-driver[worker group driver]
%% outputs
request-xchg([request exchange])
poison-inventory([poison request inventory])
response([response queue])
%% relations
dead-letter-queue -- sub --&amp;gt; dead-letter-responder --&amp;gt; response &amp;amp; poison-inventory
orphan-queue -- sub --&amp;gt; orphan-processor -- forward --&amp;gt; request-xchg
orphan-processor -- request worker group start --&amp;gt; pool-state-tracker
orphan-processor -- wait for execution --&amp;gt; req-queues-control-loop
rabbitmq-api -- initial queue list --&amp;gt; pool-state-tracker
activity-queue -- worker activity --&amp;gt; pool-state-tracker
pool-state-tracker -- expected state --&amp;gt; wgs-control-loop &amp;amp; req-queues-control-loop
wgs-control-loop -- start / stop --&amp;gt; wg-driver&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>the &lt;strong>pool manager&lt;/strong> is the most complex component of osrdyne. It is in charge of creating,
deleting request queues, and deciding which worker groups should be running at any given time. To make such decisions, it needs:&lt;/p>
&lt;ul>
&lt;li>the ability to list existing queues at startup, which is done using the RabbitMQ HTTP API&lt;/li>
&lt;li>worker activity events, to know which queues are active&lt;/li>
&lt;li>queue creation commands from the orphan processor&lt;/li>
&lt;/ul>
&lt;p>The pool manager runs two control loops:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>worker groups control loop&lt;/strong> starts and stops worker groups using the &lt;strong>worker group driver&lt;/strong>&lt;/li>
&lt;li>the &lt;strong>request queues control loop&lt;/strong> creates and deletes request queues&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>the &lt;strong>orphan processor&lt;/strong> reacts to orphan messages by sending worker group start commands to the worker group manager&lt;/p>
&lt;/li>
&lt;li>
&lt;p>the &lt;strong>dead letter responder&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>responds errors to dead lettered messages following the &lt;a href="#worker-protocol">worker protocol&lt;/a>&lt;/li>
&lt;li>if a message is deemed to have caused repeated worker crashes, publish to the poison inventory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>On worker pool startup:&lt;/p>
&lt;ul>
&lt;li>create and bind all &lt;a href="#exchanges-and-queues">exchanges and queues&lt;/a>&lt;/li>
&lt;li>configure the TTL, delivery timeout and delivery limit policies using the HTTP API&lt;/li>
&lt;li>start the &lt;strong>orphan processor&lt;/strong>, &lt;strong>dead letter responder&lt;/strong> and &lt;strong>worker group manager&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="exchanges-and-queues">Exchanges and queues&lt;/h3>
&lt;p>osrdyne creates a number of exchanges and queues. Most of the setup is done
per worker pool, except for worker group request queues.&lt;/p>
&lt;p>Worker pool exchanges:&lt;/p>
&lt;ul>
&lt;li>pool requests exchange &lt;code>{pool}-req-xchg&lt;/code>, type &lt;code>direct&lt;/code>:
&lt;ul>
&lt;li>alternate exchange is &lt;code>{pool}-orphan-xchg&lt;/code>&lt;/li>
&lt;li>dead letter exchange is &lt;code>{pool}-dl-xchg&lt;/code>&lt;/li>
&lt;li>worker group request queues are bound to this exchange&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>orphan exchange &lt;code>{pool}-orphan-xchg&lt;/code>, type &lt;code>fanout&lt;/code>&lt;/li>
&lt;li>dead letter exchange &lt;code>{pool}-dl-xchg&lt;/code>, type &lt;code>fanout&lt;/code>&lt;/li>
&lt;li>activity queue &lt;code>{pool}-activity-xchg&lt;/code>, type &lt;code>fanout&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Worker pool queues:&lt;/p>
&lt;ul>
&lt;li>dead letter queue &lt;code>{pool}-dl&lt;/code>, bound to &lt;code>{pool}-dl-xchg&lt;/code> (&lt;strong>exclusive&lt;/strong>)&lt;/li>
&lt;li>orphan queue &lt;code>{pool}-orphan&lt;/code>, bound to &lt;code>{pool}-orphan-xchg&lt;/code> (&lt;strong>exclusive&lt;/strong>)&lt;/li>
&lt;li>worker activity queue &lt;code>{pool}-activity&lt;/code>, bound to &lt;code>{pool}-activity-xchg&lt;/code>&lt;/li>
&lt;li>poison queue &lt;code>{pool}-poison&lt;/code>. Used to collect messages which could not be processed, supposedly due to worker crash&lt;/li>
&lt;/ul>
&lt;p>Worker group queues:&lt;/p>
&lt;ul>
&lt;li>request queue &lt;code>{pool}-req-{key}&lt;/code>, bound by key to &lt;code>{pool}-req-xchg&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="worker-group-manager">Worker group manager&lt;/h3>
&lt;p>The worker group manager has three internal components:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>pool state tracker&lt;/strong> tracks the expected status of worker groups&lt;/li>
&lt;li>the &lt;strong>request queues control loop&lt;/strong> applies changes to worker group request queues&lt;/li>
&lt;li>the &lt;strong>worker groups control loop&lt;/strong> applies changes to worker groups&lt;/li>
&lt;/ul>
&lt;p>The state tracker assigns a 64 bit generation identifier to each expected state.
The two control loops report the last synchronized state.&lt;/p>
&lt;p>When the orphan processor wants to start a worker group, it has to:&lt;/p>
&lt;ul>
&lt;li>tell the &lt;strong>state tracker&lt;/strong>, which gives a generation identifier for the new expected state&lt;/li>
&lt;li>wait until the &lt;strong>request queue control loop&lt;/strong> has caught up to this generation &lt;strong>and&lt;/strong> has
created the queue (which may be delayed due to networking issues)&lt;/li>
&lt;/ul>
&lt;h4 id="pool-state-tracker">Pool state tracker&lt;/h4>
&lt;pre class="mermaid">stateDiagram-v2
Inactive --&amp;gt; Active: received request
Active --&amp;gt; Unbound: unbind delay elapsed
Unbound --&amp;gt; Inactive: stop delay elapsed
Unbound --&amp;gt; Active: received request&lt;/pre>
&lt;p>Two time constants govern how the expected state of worker groups evolves:&lt;/p>
&lt;ul>
&lt;li>&lt;code>UNBIND_DELAY&lt;/code> delay until the queue transitions from &lt;code>Active&lt;/code> to &lt;code>Unbound&lt;/code>&lt;/li>
&lt;li>&lt;code>STOP_DELAY&lt;/code> delay until the worker group is stopped&lt;/li>
&lt;/ul>
&lt;p>The state tracker has the following API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Active&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Unbound&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">PoolState&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">generation&lt;/span>: &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">wgs&lt;/span>: &lt;span style="color:#000">im&lt;/span>::&lt;span style="color:#000">OrdMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">PoolStateTracker&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">initial_worker_groups&lt;/span>: &lt;span style="color:#204a87">Vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Require some worker group to be active. The extra lifetime adds active duration compared to the configured spool down schedule.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// This allows the worker activity processor to debounce activity events without lowering the active time of worker groups.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Returns the state generation where this worker group starts being active.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">require_worker_group&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">key&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">str&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">extra_lifetime&lt;/span>: &lt;span style="color:#000">Duration&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Subscribe to a stream of target pool state updates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">async&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">tokio&lt;/span>::&lt;span style="color:#000">sync&lt;/span>::&lt;span style="color:#000">watch&lt;/span>::&lt;span style="color:#000">Receiver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PoolState&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="request-queues-control-loop">Request queues control loop&lt;/h3>
&lt;p>The request queue control loop takes care of creating, binding, unbinding and stopping request queues.
It subscribes to the pool state tracker, and reacts to state changes.&lt;/p>
&lt;p>It exposes the following API, which is used by the orphan processor to wait for updates to propagate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">ReqQueueStatus&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">expected&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">actual&lt;/span>: &lt;span style="color:#204a87">Option&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">WGStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">ReqQueuesState&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">generation&lt;/span>: &lt;span style="color:#000">Generation&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">queues&lt;/span>: &lt;span style="color:#000">im&lt;/span>::&lt;span style="color:#000">OrdMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ReqQueueStatus&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">trait&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">RequestQueueControlLoop&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">target&lt;/span>: &lt;span style="color:#000">tokio&lt;/span>::&lt;span style="color:#000">sync&lt;/span>::&lt;span style="color:#000">watch&lt;/span>::&lt;span style="color:#000">Receiver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">PoolState&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Self&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">tokio&lt;/span>::&lt;span style="color:#000">sync&lt;/span>::&lt;span style="color:#000">watch&lt;/span>::&lt;span style="color:#000">Receiver&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ReqQueuesState&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>it runs the following control loop:&lt;/p>
&lt;ul>
&lt;li>fetch the set of &lt;code>current&lt;/code>ly active request queues&lt;/li>
&lt;li>control loop:
&lt;ul>
&lt;li>for each queue in &lt;code>expected&lt;/code> and not in &lt;code>current&lt;/code>:
&lt;ul>
&lt;li>attempt to create the queue&lt;/li>
&lt;li>if successful, update the current set&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for each queue in &lt;code>current&lt;/code> and not in &lt;code>expected&lt;/code>:
&lt;ul>
&lt;li>attempt to remove the queue, if empty and unused&lt;/li>
&lt;li>if successful, update the current set&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for each waiting orphan processor, release if the condition is met&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The control loop runs when &lt;code>current&lt;/code> != &lt;code>expected&lt;/code>, or when &lt;code>expected&lt;/code> changes.&lt;/p>
&lt;h3 id="worker-groups-control-loop">Worker groups control loop&lt;/h3>
&lt;p>osrdyne is responsible for starting and stopping worker groups following demand.
&lt;strong>It it NOT responsible for scaling the number of workers per worker group&lt;/strong>.&lt;/p>
&lt;p>osrdyne runs the following control loop:&lt;/p>
&lt;ul>
&lt;li>receive the set of &lt;code>expected&lt;/code> worker groups from the &lt;strong>pool state tracker&lt;/strong>&lt;/li>
&lt;li>build the set of &lt;code>running&lt;/code> worker groups: query running worker groups from the &lt;strong>worker group driver&lt;/strong>. If this fails, log and continue to the next iteration of the control loop.&lt;/li>
&lt;li>make both sets converge:
&lt;ul>
&lt;li>for each worker group in &lt;code>expected&lt;/code> and not in &lt;code>running&lt;/code>:
&lt;ul>
&lt;li>use the docker / kubernetes API to start the worker group. This must be idempotent. &lt;strong>do not retry&lt;/strong> &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>for each worker group in &lt;code>running&lt;/code> and not in &lt;code>expected&lt;/code>:
&lt;ul>
&lt;li>use the docker / kubernetes API to attempts to stop the worker group. This must be idempotent. &lt;strong>do not retry&lt;/strong> &lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="worker-activity-processor">Worker activity processor&lt;/h3>
&lt;p>As the number of worker activity events could be very high, we may not want to forward all of these to the pool state tracker:
if multiple messages are received within a short time span, only the first one is relevant. A separate actor can be used to receive
and dedup activity messages, and forward a low bandwidth summary to the pool state tracker.&lt;/p>
&lt;h2 id="failure-mode-analysis">Failure mode analysis&lt;/h2>
&lt;h3 id="the-worker-fails-to-parse-a-message">The worker fails to parse a message&lt;/h3>
&lt;p>This is an application layer error:
the worker must respond, and indicate that something went wrong&lt;/p>
&lt;h3 id="the-worker-dies-or-stalls-when-processing-a-message">The worker dies or stalls when processing a message&lt;/h3>
&lt;p>RabbitMQ will wait until the message TTL expires, and re-queues it.
A limit must be set on the number of times a message can be re-queued using a &lt;a href="https://www.rabbitmq.com/docs/quorum-queues#poison-message-handling">&lt;code>delivery-limit&lt;/code>&lt;/a>.
When this limit is reached, the poison message is sent to the dead letter exchange, and the client times out.&lt;/p>
&lt;h3 id="osrdyne-fails-to-start">osrdyne fails to start&lt;/h3>
&lt;ul>
&lt;li>If exchanges are not setup, the client cannot publish messages&lt;/li>
&lt;li>If the appropriate work group is operational, the &lt;a href="#fast-path">fast path&lt;/a> can proceed&lt;/li>
&lt;li>Otherwise, requests pile up in the orphan queue, and the client ends up timing out&lt;/li>
&lt;/ul>
&lt;h3 id="invalid-worker-key">Invalid worker key&lt;/h3>
&lt;p>Because the key is an arbitrary string set by the client, it has to be processed carefully:&lt;/p>
&lt;ul>
&lt;li>the format is defined as a convention between the client and workers. If the format isn&amp;rsquo;t right,
it is up to the worker to publish a response to the client.&lt;/li>
&lt;li>key validity conditions is also up to the worker: if the key is supposed to be some
object ID, but the object does not exist, the worker needs to start up and respond&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Even if the key does not conform to the convention established between the client and the
worker, the worker needs to start and respond to all requests.&lt;/strong>&lt;/p>
&lt;h3 id="workers-fails-to-start">Workers fails to start&lt;/h3>
&lt;p>&lt;strong>A &lt;a href="https://www.rabbitmq.com/blog/2014/01/23/preventing-unbounded-buffers-with-rabbitmq#per-queue-message-ttl">per-queue message TTL&lt;/a>
should be set to avoid requests accumulating indefinitely.&lt;/strong>&lt;/p>
&lt;p>Workers failing to start will cause:&lt;/p>
&lt;ul>
&lt;li>messages to accumulate in the queue.&lt;/li>
&lt;li>when message TTL is reached, it will get transferred to the dead letter queue&lt;/li>
&lt;li>the client will time out awaiting a response&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-osrdyne-daemons-are-started-on-the-same-pool">Multiple osrdyne daemons are started on the same pool&lt;/h3>
&lt;p>It shouldn&amp;rsquo;t be an issue, as:&lt;/p>
&lt;ul>
&lt;li>all operations done on startup are idempotent&lt;/li>
&lt;li>before doing anything, the daemon has to start listening as an &lt;strong>exclusive consumer of the dead letter and orphan queues&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="known-limitations">Known limitations&lt;/h2>
&lt;h3 id="latency-publisher-confirms-and-reliability">Latency, publisher confirms and reliability&lt;/h3>
&lt;p>Without publisher confirms, networker or broken failure can result in message loss.
However, publisher confirms add quite a bit of latency (about 200ms), as it ensures messages are persisted to disk if the queue is durable.&lt;/p>
&lt;p>&lt;strong>We should use publisher confirms for responses and orphan transfers, and leave the decision of whether to do it for requests to the client.&lt;/strong>&lt;/p>
&lt;h3 id="at-least-once-semantics">At least once semantics&lt;/h3>
&lt;p>Most things in this protocol have at least once semantics if publisher confirms are used:&lt;/p>
&lt;ul>
&lt;li>&lt;code>request delivery to workers&lt;/code>: if osrdyne is restarted while transferring an orphan to its destination, the orphan may be transferred twice&lt;/li>
&lt;li>&lt;code>response delivery to clients&lt;/code>: if a worker takes slightly too long to ACK a message, but still responds, it may be requeued and re-processed, and thus responded to twice&lt;/li>
&lt;/ul>
&lt;h2 id="design-decisions">Design decisions&lt;/h2>
&lt;h3 id="using-rabbitmq">Using RabbitMQ&lt;/h3>
&lt;p>To implement this solution, we rely on a combination of &lt;a href="https://www.rabbitmq.com/docs/extensions">features unique to RabbitMQ&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>each worker type needs a separate &lt;strong>exchange&lt;/strong> and configuration&lt;/li>
&lt;li>when a message cannot be routed within a worker type&amp;rsquo;s exchange, it is redirected to an &lt;strong>alternate exchange&lt;/strong> managed by the worker manager&lt;/li>
&lt;li>&lt;strong>dead lettering&lt;/strong> is leveraged to generate protocol errors&lt;/li>
&lt;li>the worker manager uses the &lt;strong>RabbitMQ HTTP API&lt;/strong> to list queues&lt;/li>
&lt;/ul>
&lt;p>In addition to its attractive feature set, RabbitMQ has:&lt;/p>
&lt;ul>
&lt;li>various useful quality of life features, such as direct reply and per-message TTL&lt;/li>
&lt;li>long demonstrated its &lt;strong>reliability&lt;/strong>&lt;/li>
&lt;li>multiple engineers on staff &lt;strong>experience&lt;/strong>d with the tool&lt;/li>
&lt;/ul>
&lt;h3 id="queues-are-created-by-osrdyne">Queues are created by osrdyne&lt;/h3>
&lt;p>At some point, we explored the possibility of RPC clients creating queues.
osrdyne would react to queue creation by starting workers. If the
queue were to be unused for a while, osrdyne would stop workers and
delete the queue.&lt;/p>
&lt;p>This creates a race condition on queue deletion:&lt;/p>
&lt;ul>
&lt;li>osrdyne sees that the queue is empty&lt;/li>
&lt;li>the client ensures the queue is created&lt;/li>
&lt;li>osrdyne deletes the queue&lt;/li>
&lt;li>the client attempts to publish a message to the now deleted queue&lt;/li>
&lt;/ul>
&lt;p>We thus decided to move the responsibility of queue management to the
osrdyne, and implement a mechanism to ensure messages cannot be
dropped due to a missing queue.&lt;/p>
&lt;h3 id="osrdyne-republishes-orphan-messages">osrdyne republishes orphan messages&lt;/h3>
&lt;p>Initially, we though of a solution whereby osrdyne&amp;rsquo;s orphan processor uses &lt;a href="https://www.rabbitmq.com/docs/dlx">dead lettering&lt;/a>
to send messages back to their original exchange. This is in fact a bad idea, as dead lettering &lt;a href="https://www.rabbitmq.com/docs/dlx#effects">inhibits per message TTL&lt;/a>.&lt;/p>
&lt;p>Instead, the orphan processor has to proxy messages back to their original exchange.
&lt;strong>This proxying process can cause requests to get delivered multiple times to the target queue&lt;/strong>.&lt;/p>
&lt;h3 id="osrdyne-responds-to-dead-lettered-messages">osrdyne responds to dead lettered messages&lt;/h3>
&lt;p>If a message is dead lettered for some reason (expired TTL, delivery limit, max queue length),
we figured it would be best to give the client some idea that something went wrong.&lt;/p>
&lt;p>The &lt;a href="#worker-protocol">worker protocol&lt;/a> thus has to allow the client to distinguish protocol errors from worker responses.&lt;/p>
&lt;h3 id="messages-are-only-acked-by-workers-once-processed">Messages are only ACKed by workers once processed&lt;/h3>
&lt;p>If messages are ACKed on reception:&lt;/p>
&lt;ul>
&lt;li>processing time is not limited by message timeout (which is arguably not a feature)&lt;/li>
&lt;li>the broker does not attempt re-delivery if the worker were to stop and not respond for some reason&lt;/li>
&lt;/ul>
&lt;p>If messages are ACKed once processed:&lt;/p>
&lt;ul>
&lt;li>messages whose processing time exceeds TTL will be re-queued, even if the worker is still processing the message. &lt;strong>This can result in multiple responses being delivered&lt;/strong>.&lt;/li>
&lt;li>if the worker crashes or is stopped, the message will be re-queued&lt;/li>
&lt;/ul>
&lt;p>We decided to rely on a &lt;a href="https://www.rabbitmq.com/docs/quorum-queues#poison-message-handling">&lt;code>delivery-limit&lt;/code> policy&lt;/a> to handle poison messages, and ACK messages once processed.&lt;/p>
&lt;h3 id="report-worker-activity-using-amqp">Report worker activity using AMQP&lt;/h3>
&lt;p>osrdyne needs to maintain queue usage statistics in order to know when worker groups can be stopped.
At first, we considered having workers use valkey to store the timestamp of the last processed message for the queue.
We decided against it as:&lt;/p>
&lt;ul>
&lt;li>it would mean the workers store a timestamp directly in database, read by a supervisor process. it&amp;rsquo;s a pretty bad design&lt;/li>
&lt;li>it adds an additional database to the RPC architecture, for little to no benefit compared to just using rabbitmq&lt;/li>
&lt;li>if one of the workers has its clock drift by more than the worker group expiration time compared to osrdyne, the worker group will get stopped&lt;/li>
&lt;li>any worker can get the pool deleted by forcing the timestamp to an old value&lt;/li>
&lt;li>it adds a failure mode: if osrdyne / workers are unable to reach valkey, weird bugs may ensue&lt;/li>
&lt;/ul>
&lt;p>Instead, we decided to require worker to publish activity updates to a dedicated queue.
This queue can be watched by osrdyne, which can use these events to know when to stop a worker group.&lt;/p>
&lt;h3 id="make-worker-group-lifetime-decisions-in-a-separate-actor">Make worker group lifetime decisions in a separate actor&lt;/h3>
&lt;p>The lifetime of worker groups is influenced by three types of asynchronous events:&lt;/p>
&lt;ul>
&lt;li>worker activity&lt;/li>
&lt;li>orphan requests&lt;/li>
&lt;li>worker group spool down deadlines&lt;/li>
&lt;/ul>
&lt;p>When the orphan processor gets a request, it needs to create the worker group&amp;rsquo;s request
queue before it can proceed to forward the message.&lt;/p>
&lt;p>If queues were created and deleted asynchronously when these events are received, it would introduce a race condition:&lt;/p>
&lt;ul>
&lt;li>the orphan processor creates the queue&lt;/li>
&lt;li>the queue gets deleted because it expired at the same time&lt;/li>
&lt;li>the orphan processor forwards the message, which gets lost&lt;/li>
&lt;/ul>
&lt;p>We found multiple solutions for this issue:&lt;/p>
&lt;ul>
&lt;li>process all asynchronous events in a single actor. This was not deemed viable because worker activity processing is work intensive, and orphan request processing is latency sensitive.&lt;/li>
&lt;li>having a single actor create and delete queues (the &lt;a href="#request-queues-control-loop">&lt;strong>request queues control loop&lt;/strong>&lt;/a>) and making the orphan processor wait until the control loop creates the queue&lt;/li>
&lt;/ul>
&lt;h3 id="unbind-the-queue-and-wait-before-stopping-workers">Unbind the queue and wait before stopping workers&lt;/h3>
&lt;p>In a previous design, we tried to delete work queue in one go. It created a race condition issue on queue deletion,
caused by the fact osrdyne does not get direct notifications of when messages are received on a work queue:&lt;/p>
&lt;ul>
&lt;li>we decide to stop the worker group&lt;/li>
&lt;li>work is received on the queue, but we aren&amp;rsquo;t made aware as no worker is up&lt;/li>
&lt;li>we try to delete the queue, but cannot do so without loosing messages&lt;/li>
&lt;/ul>
&lt;p>We could think of two fixes for this issue:&lt;/p>
&lt;ul>
&lt;li>implement a two stage shutdown, where no work can get to the queue for a while before workers are stopped&lt;/li>
&lt;li>detect that the queue still has messages after workers have stopped, and start workers back up&lt;/li>
&lt;/ul>
&lt;p>We decided to implement two stage worker group shutdown:&lt;/p>
&lt;ul>
&lt;li>if no activity is register for &lt;code>UNBIND_DELAY&lt;/code>, unbind the work queue&lt;/li>
&lt;li>wait for a while to see if any worker picks up work from the queue and notifies osrdyne, which would rebind the queue&lt;/li>
&lt;li>if no orphan nor worker activity is registered for &lt;code>STOP_DELAY&lt;/code>, stop workers and delete the queue&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The control loop is designed to make the state of all worker groups converge at once.
Retrying convergence for one worker group adds latency to convergence for all worker groups.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>About: Open Source</title><link>https://osrd.fr/en/about/opensource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/opensource/</guid><description>
&lt;p>Open source is a &lt;strong>software development practice&lt;/strong>, where the software&amp;rsquo;s source code&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> :&lt;/p>
&lt;ul>
&lt;li>usually developed by multiple actors, in an open and transparent way&lt;/li>
&lt;li>free and available for all&lt;/li>
&lt;li>can be modified or used for derivative work by anyone&lt;/li>
&lt;li>can be freely distributed&lt;/li>
&lt;/ul>
&lt;p>In practice, open source is both a &lt;strong>legal framework&lt;/strong> for collaborative work, and a &lt;strong>set of practices&lt;/strong>.&lt;/p>
&lt;h2 id="osrd-and-open-source">OSRD and Open Source&lt;/h2>
&lt;p>Applied to OSRD, Open Source has &lt;strong>multiple advantages&lt;/strong> :&lt;/p>
&lt;ul>
&lt;li>the algorithms and know-how developed with the project are free for all&lt;/li>
&lt;li>development cost and results are shared between actors&lt;/li>
&lt;li>it makes interoperability between software systems easier by helping make the landscape more homogeneous and standardized&lt;/li>
&lt;li>helps focus collaboration around common interests&lt;/li>
&lt;li>enables actors to tailor the software to their own interests&lt;/li>
&lt;li>enables researchers to contribute and benefit from the project&lt;/li>
&lt;li>it allows public actors to meet their transparency goals&lt;/li>
&lt;/ul>
&lt;p>Using open source to enable industrial collaboration is not a new idea:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Blender&lt;/strong> is a modelling, rendering and 3D animation software, which has recently become &lt;a href="https://fund.blender.org/">major point of industry collaboration&lt;/a> for this industry&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>, a Windows alternative used by Google, Microsoft, Amazon, Apple, most websites, cloud platforms, mobile phones, routers, and more. All these companies rely on and contribute to Linux tremendously&lt;/li>
&lt;li>&lt;strong>Android&lt;/strong> is the common base software for most phones. Phone manufacturers regularly contribute to android&lt;/li>
&lt;li>&lt;strong>PostgreSQL&lt;/strong>, &lt;strong>MySQL&lt;/strong>, &lt;strong>SQLite&lt;/strong> and other open-source databases collectively dominate the database market. Any actor with special needs can improve an existing open-source tool rather than create a new one.&lt;/li>
&lt;li>Both &lt;strong>Firefox&lt;/strong> and &lt;strong>Chrome&lt;/strong> are Open Source&lt;/li>
&lt;li>&lt;strong>Wordpress&lt;/strong> is the CMS which runs 43% of all websites. A flock of companies contribute to Wordpress and make extensions&lt;/li>
&lt;li>&lt;strong>Odoo&lt;/strong> is a powerful modular ERP, which has a community not unlike Wordpress&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>All these projects share the common property of being essential to a number of companies, without being part of what these companies sell.&lt;/strong>&lt;/p>
&lt;p>It thus makes sense for these companies to collaborate with peers and competitors to build common tools, which makes exchanges easier and helps improve quality of service for all.&lt;/p>
&lt;h2 id="processes">Processes&lt;/h2>
&lt;div class="alert alert-info" role="alert">
These processes are not specific to open source: many companies work in a similar way.
&lt;/div>
&lt;p>In practice, most open-source software is developed using &lt;a href="https://github.com/OpenRailAssociation/osrd">a forge&lt;/a>. Through this forge, developers and users can access the source code, report bugs, plan tasks, and integrate new changes to the code.
Anyone can suggest a change, report a bug or plan a task.&lt;/p>
&lt;p>All changes go through a &lt;strong>peer review&lt;/strong>, not unlike those used by the scientific community.
Reviewers are software developers most familiar with components affected by the change.&lt;/p>
&lt;p>Changes are integrated into the code base when everyone involved agrees to.
Maintainers are responsible for keeping the project working and consistent. Maintainers are chosen among developers by developers.
What motivates whether to integrate a change or not is technical viability: the goal of everyone involved is to &lt;strong>maintain high level of service and quality standard&lt;/strong>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Source code is a set of text documents which describes how a piece of software works. It&amp;rsquo;s the result of the work of software developers.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>About: Open Data</title><link>https://osrd.fr/en/about/opendata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/opendata/</guid><description>
&lt;p>Open Data is the practice of making data public accessible under a permissive license.
It is not the same as open source, which only applies to software.&lt;/p>
&lt;p>&lt;strong>Open data and open source have a symbiotic relationship : without open data, an open source railway software can only be used by industry insiders. Managing data access is hard, expensive, often not necessary, and reduces the availability of critical data.&lt;/strong>&lt;/p>
&lt;p>Alone, &lt;strong>open data&lt;/strong> already brings a number of key benefits:&lt;/p>
&lt;ul>
&lt;li>companies can use open data in their products, which also promotes railway services&lt;/li>
&lt;li>researchers can study the data immediately, and can find the data by themselves&lt;/li>
&lt;/ul>
&lt;p>Yet, &lt;strong>open data&lt;/strong> used by an &lt;strong>open source toolbox&lt;/strong> open up new prospects:&lt;/p>
&lt;ul>
&lt;li>companies and researchers can use the open source tools to analyse the data, which greatly reduces the barrier to entry by alleviating the need for custom or paid-for tools&lt;/li>
&lt;li>customers can use the toolbox to improve how they use railway services&lt;/li>
&lt;/ul>
&lt;p>If &lt;strong>multiple actors&lt;/strong> have open data exploitable by an open source tool, these datasets can be &lt;strong>combined&lt;/strong> and used to &lt;strong>provide and plan for common services&lt;/strong>.&lt;/p>
&lt;h2 id="osrd-and-open-data">OSRD and Open Data&lt;/h2>
&lt;ul>
&lt;li>having &lt;strong>rolling stock&lt;/strong> and &lt;strong>infrastructure&lt;/strong> open data enables anyone to &lt;strong>simulate trains&lt;/strong>, &lt;strong>study&lt;/strong> and &lt;strong>evaluate&lt;/strong> the railway network&lt;/li>
&lt;li>having &lt;strong>timetable&lt;/strong> open data enables anyone to &lt;strong>study&lt;/strong> rail network usage&lt;/li>
&lt;/ul></description></item><item><title>About: Roadmap</title><link>https://osrd.fr/en/about/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://osrd.fr/en/about/roadmap/</guid><description>
&lt;p>Here&amp;rsquo;s a list of the big features OSRD wants to support. The order of items depends on priority (the higher the item, the more valuable it is).
This roadmap is spread over a couple of years.&lt;/p>
&lt;ul>
&lt;li>Add &lt;a href="https://en.wikipedia.org/wiki/European_Rail_Traffic_Management_System">ERTMS&lt;/a> signaling system support.&lt;/li>
&lt;li>A fine-grained permission system.&lt;/li>
&lt;li>Support cyclic train schedule. Improving Netzgrafik-Editor integration.&lt;/li>
&lt;li>Send STDCM trains to external services for storage and processing.&lt;/li>
&lt;li>Create annual transport plan service.&lt;/li>
&lt;li>Support a linear referencing &lt;a href="https://en.wikipedia.org/wiki/Linear_referencing">LRS&lt;/a> commonly used in the railway industry. Usage of &lt;a href="https://en.wikipedia.org/wiki/Milestone#Railway_mileposts">railway mileposts&lt;/a>.&lt;/li>
&lt;li>Revamp the infrastructure editor.&lt;/li>
&lt;li>New dynamic simulator. Simulate a timetable on an infrastructure and observe generated delays.&lt;/li>
&lt;li>Versioning infrastructures.&lt;/li>
&lt;li>Revamp train simulation v3.&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;d like to push for one of these features, or if you have ideas for what OSRD could do in the future, don&amp;rsquo;t hesitate to join the project!&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Tasks that are currently developed and assigned to our team can be found in our project boards &lt;a href="https://github.com/orgs/OpenRailAssociation/projects?query=is%3Aopen">here&lt;/a>.
&lt;/div></description></item></channel></rss>